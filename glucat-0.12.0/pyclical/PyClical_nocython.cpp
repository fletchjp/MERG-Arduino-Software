/* Generated by Cython 0.29.28 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "PyClical.h"
        ],
        "include_dirs": [
            "."
        ],
        "language": "c++",
        "name": "PyClical",
        "sources": [
            "PyClical.pyx"
        ]
    },
    "module_name": "PyClical"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__PyClical
#define __PYX_HAVE_API__PyClical
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "PyClical.h"
#include <string.h>
#include <string>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "PyClical.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_8PyClical_index_set;
struct __pyx_obj_8PyClical_clifford;
struct __pyx_obj_8PyClical___pyx_scope_struct____iter__;
struct __pyx_opt_args_8PyClical_approx_equal;
struct __pyx_opt_args_8PyClical_sqrt;
struct __pyx_opt_args_8PyClical_log;
struct __pyx_opt_args_8PyClical_cos;
struct __pyx_opt_args_8PyClical_acos;
struct __pyx_opt_args_8PyClical_acosh;
struct __pyx_opt_args_8PyClical_sin;
struct __pyx_opt_args_8PyClical_asin;
struct __pyx_opt_args_8PyClical_asinh;
struct __pyx_opt_args_8PyClical_tan;
struct __pyx_opt_args_8PyClical_atan;
struct __pyx_opt_args_8PyClical_atanh;
struct __pyx_opt_args_8PyClical_random_clifford;

/* "PyClical.pyx":1359
 *     return glucat.error_squared(toClifford(lhs), toClifford(rhs), <scalar_t>threshold)
 * 
 * cpdef inline approx_equal(lhs, rhs, threshold=None, tol=None):             # <<<<<<<<<<<<<<
 *     """
 *     Test for approximate equality of multivectors.
 */
struct __pyx_opt_args_8PyClical_approx_equal {
  int __pyx_n;
  PyObject *threshold;
  PyObject *tol;
};

/* "PyClical.pyx":1591
 *     return clifford().wrap( glucat.complexifier(toClifford(obj)) )
 * 
 * cpdef inline sqrt(obj, i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Square root of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_sqrt {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1628
 *         return clifford().wrap( glucat.exp(toClifford(obj)) )
 * 
 * cpdef inline log(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Natural logarithm of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_log {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1651
 *             return clifford().wrap( glucat.log(toClifford(obj)) )
 * 
 * cpdef inline cos(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Cosine of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_cos {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1668
 *             return clifford().wrap( glucat.cos(toClifford(obj)) )
 * 
 * cpdef inline acos(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse cosine of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_acos {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1705
 *         return clifford().wrap( glucat.cosh(toClifford(obj)) )
 * 
 * cpdef inline acosh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic cosine of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_acosh {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1728
 *             return clifford().wrap( glucat.acosh(toClifford(obj)) )
 * 
 * cpdef inline sin(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Sine of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_sin {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1747
 *             return clifford().wrap( glucat.sin(toClifford(obj)) )
 * 
 * cpdef inline asin(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse sine of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_asin {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1782
 *         return clifford().wrap( glucat.sinh(toClifford(obj)) )
 * 
 * cpdef inline asinh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic sine of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_asinh {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1801
 *             return clifford().wrap( glucat.asinh(toClifford(obj)) )
 * 
 * cpdef inline tan(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Tangent of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_tan {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1818
 *             return clifford().wrap( glucat.tan(toClifford(obj)) )
 * 
 * cpdef inline atan(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse tangent of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_atan {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1847
 *         return clifford().wrap( glucat.tanh(toClifford(obj)) )
 * 
 * cpdef inline atanh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic tangent of multivector with optional complexifier.
 */
struct __pyx_opt_args_8PyClical_atanh {
  int __pyx_n;
  PyObject *i;
};

/* "PyClical.pyx":1864
 *             return clifford().wrap( glucat.atanh(toClifford(obj)) )
 * 
 * cpdef inline random_clifford(index_set ixt, fill = 1.0):             # <<<<<<<<<<<<<<
 *     """
 *     Random multivector within a frame.
 */
struct __pyx_opt_args_8PyClical_random_clifford {
  int __pyx_n;
  PyObject *fill;
};

/* "PyClical.pyx":38
 * 
 * # Forward reference
 * cdef class index_set             # <<<<<<<<<<<<<<
 * 
 * cdef inline IndexSet toIndexSet(obj):
 */
struct __pyx_obj_8PyClical_index_set {
  PyObject_HEAD
  struct __pyx_vtabstruct_8PyClical_index_set *__pyx_vtab;
  IndexSet *instance;
};


/* "PyClical.pyx":532
 * 
 * # Forward reference.
 * cdef class clifford             # <<<<<<<<<<<<<<
 * 
 * cdef inline Clifford toClifford(obj):
 */
struct __pyx_obj_8PyClical_clifford {
  PyObject_HEAD
  struct __pyx_vtabstruct_8PyClical_clifford *__pyx_vtab;
  Clifford *instance;
};


/* "PyClical.pyx":229
 *         return self.instance.getitem(idx)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over the indices of an index_set.
 */
struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ {
  PyObject_HEAD
  PyObject *__pyx_v_idx;
  struct __pyx_obj_8PyClical_index_set *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "PyClical.pyx":46
 *     return index_set(obj).instance[0]
 * 
 * cdef class index_set:             # <<<<<<<<<<<<<<
 *     """
 *     Python class index_set wraps C++ class IndexSet.
 */

struct __pyx_vtabstruct_8PyClical_index_set {
  PyObject *(*wrap)(struct __pyx_obj_8PyClical_index_set *, IndexSet);
  IndexSet (*unwrap)(struct __pyx_obj_8PyClical_index_set *);
  PyObject *(*copy)(struct __pyx_obj_8PyClical_index_set *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8PyClical_index_set *__pyx_vtabptr_8PyClical_index_set;
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_9index_set_wrap(struct __pyx_obj_8PyClical_index_set *, IndexSet);
static CYTHON_INLINE IndexSet __pyx_f_8PyClical_9index_set_unwrap(struct __pyx_obj_8PyClical_index_set *);


/* "PyClical.pyx":537
 *     return clifford(obj).instance[0]
 * 
 * cdef class clifford:             # <<<<<<<<<<<<<<
 *     """
 *     Python class clifford wraps C++ class Clifford.
 */

struct __pyx_vtabstruct_8PyClical_clifford {
  PyObject *(*wrap)(struct __pyx_obj_8PyClical_clifford *, Clifford);
  Clifford (*unwrap)(struct __pyx_obj_8PyClical_clifford *);
  PyObject *(*copy)(struct __pyx_obj_8PyClical_clifford *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_8PyClical_clifford *__pyx_vtabptr_8PyClical_clifford;
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_8clifford_wrap(struct __pyx_obj_8PyClical_clifford *, Clifford);
static CYTHON_INLINE Clifford __pyx_f_8PyClical_8clifford_unwrap(struct __pyx_obj_8PyClical_clifford *);

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static CYTHON_INLINE PyObject *__pyx_f_8PyClical_9index_set_wrap(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, IndexSet __pyx_v_other); /* proto*/
static CYTHON_INLINE IndexSet __pyx_f_8PyClical_9index_set_unwrap(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_8PyClical_9index_set_copy(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_8clifford_wrap(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, Clifford __pyx_v_other); /* proto*/
static CYTHON_INLINE Clifford __pyx_f_8PyClical_8clifford_unwrap(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_8PyClical_8clifford_copy(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'glucat' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'PyClical' */
static PyTypeObject *__pyx_ptype_8PyClical_index_set = 0;
static PyTypeObject *__pyx_ptype_8PyClical_clifford = 0;
static PyTypeObject *__pyx_ptype_8PyClical___pyx_scope_struct____iter__ = 0;
static CYTHON_INLINE IndexSet __pyx_f_8PyClical_toIndexSet(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_compare(PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_min_neg(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_max_pos(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE std::vector<scalar_t>  __pyx_f_8PyClical_list_to_vector(PyObject *); /*proto*/
static CYTHON_INLINE Clifford __pyx_f_8PyClical_toClifford(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_error_squared_tol(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_error_squared(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_approx_equal(PyObject *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_approx_equal *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_inv(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_scalar(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_real(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_imag(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_pure(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_even(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_odd(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_involute(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_reverse(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_conj(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_quad(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_norm(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_abs(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_max_abs(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_pow(PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_outer_pow(PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_complexifier(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_sqrt(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_sqrt *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_exp(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_log(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_log *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cos(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_cos *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_acos(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_acos *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cosh(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_acosh(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_acosh *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_sin(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_sin *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_asin(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_asin *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_sinh(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_asinh(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_asinh *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_tan(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_tan *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_atan(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_atan *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_tanh(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_atanh(PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_atanh *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_random_clifford(struct __pyx_obj_8PyClical_index_set *, int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_random_clifford *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cga3(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cga3std(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_8PyClical_agc3(PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "PyClical"
extern int __pyx_module_is_main_PyClical;
int __pyx_module_is_main_PyClical = 0;

/* Implementation of 'PyClical' */
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_NotImplemented;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_[] = ".";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k__2[] = " ";
static const char __pyx_k__5[] = ":";
static const char __pyx_k__6[] = "\n\t";
static const char __pyx_k__7[] = " (";
static const char __pyx_k__8[] = ", ";
static const char __pyx_k__9[] = ").";
static const char __pyx_k_cl[] = "cl";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_abc[] = "abc";
static const char __pyx_k_cos[] = "cos";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_frm[] = "frm";
static const char __pyx_k_inv[] = "inv";
static const char __pyx_k_ist[] = "ist";
static const char __pyx_k_ixt[] = "ixt";
static const char __pyx_k_lhs[] = "lhs";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_odd[] = "odd";
static const char __pyx_k_pow[] = "pow";
static const char __pyx_k_rhs[] = "rhs";
static const char __pyx_k_sin[] = "sin";
static const char __pyx_k_tan[] = "tan";
static const char __pyx_k_tau[] = "tau";
static const char __pyx_k_tol[] = "tol";
static const char __pyx_k_Real[] = "Real";
static const char __pyx_k_acos[] = "acos";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_asin[] = "asin";
static const char __pyx_k_atan[] = "atan";
static const char __pyx_k_conj[] = "conj";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_cosh[] = "cosh";
static const char __pyx_k_even[] = "even";
static const char __pyx_k_fill[] = "fill";
static const char __pyx_k_from[] = " from ";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_pure[] = "pure";
static const char __pyx_k_quad[] = "quad";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sinh[] = "sinh";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_tanh[] = "tanh";
static const char __pyx_k_test[] = "_test";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_acosh[] = "acosh";
static const char __pyx_k_asinh[] = "asinh";
static const char __pyx_k_atanh[] = "atanh";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_grade[] = "grade";
static const char __pyx_k_istpq[] = "istpq";
static const char __pyx_k_nbar3[] = "nbar3";
static const char __pyx_k_ninf3[] = "ninf3";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_using[] = " using (";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = " value ";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_scalar[] = "scalar";
static const char __pyx_k_test_2[] = "__test__";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_doctest[] = "doctest";
static const char __pyx_k_invalid[] = " invalid ";
static const char __pyx_k_numbers[] = "numbers";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_testmod[] = "testmod";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_Integral[] = "Integral";
static const char __pyx_k_PyClical[] = "PyClical";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_as_frame[] = " as frame:\n\t";
static const char __pyx_k_clifford[] = "clifford";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_involute[] = "involute";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_to_frame[] = " to frame ";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_index_set[] = "index_set";
static const char __pyx_k_outer_pow[] = "outer_pow";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_e_line_1936[] = "e (line 1936)";
static const char __pyx_k_PyClical_pyx[] = "PyClical.pyx";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_abs_line_1522[] = "abs (line 1522)";
static const char __pyx_k_cos_line_1651[] = "cos (line 1651)";
static const char __pyx_k_exp_line_1614[] = "exp (line 1614)";
static const char __pyx_k_inv_line_1378[] = "inv (line 1378)";
static const char __pyx_k_log_line_1628[] = "log (line 1628)";
static const char __pyx_k_odd_line_1446[] = "odd (line 1446)";
static const char __pyx_k_pow_line_1543[] = "pow (line 1543)";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_sin_line_1728[] = "sin (line 1728)";
static const char __pyx_k_tan_line_1801[] = "tan (line 1801)";
static const char __pyx_k_using_invalid[] = " using invalid ";
static const char __pyx_k_Cannot_reframe[] = "Cannot reframe";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_Not_applicable[] = "Not applicable.";
static const char __pyx_k_acos_line_1668[] = "acos (line 1668)";
static const char __pyx_k_agc3_line_1893[] = "agc3 (line 1893)";
static const char __pyx_k_asin_line_1747[] = "asin (line 1747)";
static const char __pyx_k_atan_line_1818[] = "atan (line 1818)";
static const char __pyx_k_cga3_line_1873[] = "cga3 (line 1873)";
static const char __pyx_k_conj_line_1485[] = "conj (line 1485)";
static const char __pyx_k_cosh_line_1689[] = "cosh (line 1689)";
static const char __pyx_k_even_line_1437[] = "even (line 1437)";
static const char __pyx_k_imag_line_1415[] = "imag (line 1415)";
static const char __pyx_k_invalid_string[] = " invalid string ";
static const char __pyx_k_norm_line_1511[] = "norm (line 1511)";
static const char __pyx_k_pure_line_1426[] = "pure (line 1426)";
static const char __pyx_k_quad_line_1500[] = "quad (line 1500)";
static const char __pyx_k_real_line_1404[] = "real (line 1404)";
static const char __pyx_k_scalar_epsilon[] = "scalar_epsilon";
static const char __pyx_k_sinh_line_1768[] = "sinh (line 1768)";
static const char __pyx_k_sqrt_line_1591[] = "sqrt (line 1591)";
static const char __pyx_k_tanh_line_1835[] = "tanh (line 1835)";
static const char __pyx_k_acosh_line_1705[] = "acosh (line 1705)";
static const char __pyx_k_asinh_line_1782[] = "asinh (line 1782)";
static const char __pyx_k_atanh_line_1847[] = "atanh (line 1847)";
static const char __pyx_k_istpq_line_1949[] = "istpq (line 1949)";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_compare_line_492[] = "compare (line 492)";
static const char __pyx_k_index_set___iter[] = "index_set.__iter__";
static const char __pyx_k_max_pos_line_513[] = "max_pos (line 513)";
static const char __pyx_k_min_neg_line_504[] = "min_neg (line 504)";
static const char __pyx_k_scalar_line_1393[] = "scalar (line 1393)";
static const char __pyx_k_cga3std_line_1882[] = "cga3std (line 1882)";
static const char __pyx_k_max_abs_line_1531[] = "max_abs (line 1531)";
static const char __pyx_k_reverse_line_1470[] = "reverse (line 1470)";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_involute_line_1455[] = "involute (line 1455)";
static const char __pyx_k_outer_pow_line_1567[] = "outer_pow (line 1567)";
static const char __pyx_k_clifford_inv_line_926[] = "clifford.inv (line 926)";
static const char __pyx_k_clifford_pow_line_980[] = "clifford.pow (line 980)";
static const char __pyx_k_approx_equal_line_1359[] = "approx_equal (line 1359)";
static const char __pyx_k_clifford_abs_line_1175[] = "clifford.abs (line 1175)";
static const char __pyx_k_clifford_copy_line_556[] = "clifford.copy (line 556)";
static const char __pyx_k_clifford_odd_line_1070[] = "clifford.odd (line 1070)";
static const char __pyx_k_complexifier_line_1576[] = "complexifier (line 1576)";
static const char __pyx_k_index_set_copy_line_65[] = "index_set.copy (line 65)";
static const char __pyx_k_index_set_max_line_351[] = "index_set.max (line 351)";
static const char __pyx_k_index_set_min_line_342[] = "index_set.min (line 342)";
static const char __pyx_k_clifford_conj_line_1138[] = "clifford.conj (line 1138)";
static const char __pyx_k_clifford_even_line_1061[] = "clifford.even (line 1061)";
static const char __pyx_k_clifford_norm_line_1164[] = "clifford.norm (line 1164)";
static const char __pyx_k_clifford_pure_line_1050[] = "clifford.pure (line 1050)";
static const char __pyx_k_clifford_quad_line_1153[] = "clifford.quad (line 1153)";
static const char __pyx_k_error_squared_line_1346[] = "error_squared (line 1346)";
static const char __pyx_k_Unary_print_clifford_1_1[] = "\n        Unary -.\n\n        >>> print(-clifford(\"{1}\"))\n        -{1}\n        ";
static const char __pyx_k_clifford___or___line_939[] = "clifford.__or__ (line 939)";
static const char __pyx_k_clifford_frame_line_1224[] = "clifford.frame (line 1224)";
static const char __pyx_k_clifford_hidden_doctests[] = "clifford_hidden_doctests";
static const char __pyx_k_clifford_isinf_line_1206[] = "clifford.isinf (line 1206)";
static const char __pyx_k_clifford_isnan_line_1215[] = "clifford.isnan (line 1215)";
static const char __pyx_k_index_set_count_line_315[] = "index_set.count (line 315)";
static const char __pyx_k_clifford___add___line_740[] = "clifford.__add__ (line 740)";
static const char __pyx_k_clifford___and___line_836[] = "clifford.__and__ (line 836)";
static const char __pyx_k_clifford___ior___line_950[] = "clifford.__ior__ (line 950)";
static const char __pyx_k_clifford___mod___line_806[] = "clifford.__mod__ (line 806)";
static const char __pyx_k_clifford___mul___line_780[] = "clifford.__mul__ (line 780)";
static const char __pyx_k_clifford___neg___line_722[] = "clifford.__neg__ (line 722)";
static const char __pyx_k_clifford___pos___line_731[] = "clifford.__pos__ (line 731)";
static const char __pyx_k_clifford___pow___line_961[] = "clifford.__pow__ (line 961)";
static const char __pyx_k_clifford___sub___line_760[] = "clifford.__sub__ (line 760)";
static const char __pyx_k_clifford___xor___line_866[] = "clifford.__xor__ (line 866)";
static const char __pyx_k_clifford_reframe_line_649[] = "clifford.reframe (line 649)";
static const char __pyx_k_clifford_scalar_line_1039[] = "clifford.scalar (line 1039)";
static const char __pyx_k_index_set___or___line_293[] = "index_set.__or__ (line 293)";
static const char __pyx_k_index_set_hidden_doctests[] = "index_set_hidden_doctests";
static const char __pyx_k_random_clifford_line_1864[] = "random_clifford (line 1864)";
static const char __pyx_k_Cannot_take_vector_part_of[] = "Cannot take vector part of ";
static const char __pyx_k_Unary_print_clifford_1_1_2[] = "\n        Unary +.\n\n        >>> print(+clifford(\"{1}\"))\n        {1}\n        ";
static const char __pyx_k_clifford___iadd___line_751[] = "clifford.__iadd__ (line 751)";
static const char __pyx_k_clifford___iand___line_851[] = "clifford.__iand__ (line 851)";
static const char __pyx_k_clifford___idiv___line_911[] = "clifford.__idiv__ (line 911)";
static const char __pyx_k_clifford___imod___line_821[] = "clifford.__imod__ (line 821)";
static const char __pyx_k_clifford___imul___line_793[] = "clifford.__imul__ (line 793)";
static const char __pyx_k_clifford___isub___line_771[] = "clifford.__isub__ (line 771)";
static const char __pyx_k_clifford___iter___line_638[] = "clifford.__iter__ (line 638)";
static const char __pyx_k_clifford___ixor___line_881[] = "clifford.__ixor__ (line 881)";
static const char __pyx_k_clifford___str___line_1244[] = "clifford.__str__ (line 1244)";
static const char __pyx_k_clifford_max_abs_line_1184[] = "clifford.max_abs (line 1184)";
static const char __pyx_k_clifford_reverse_line_1123[] = "clifford.reverse (line 1123)";
static const char __pyx_k_index_set___and___line_271[] = "index_set.__and__ (line 271)";
static const char __pyx_k_index_set___ior___line_304[] = "index_set.__ior__ (line 304)";
static const char __pyx_k_index_set___str___line_395[] = "index_set.__str__ (line 395)";
static const char __pyx_k_index_set___xor___line_249[] = "index_set.__xor__ (line 249)";
static const char __pyx_k_clifford___call___line_1020[] = "clifford.__call__ (line 1020)";
static const char __pyx_k_clifford___repr___line_1235[] = "clifford.__repr__ (line 1235)";
static const char __pyx_k_clifford_involute_line_1107[] = "clifford.involute (line 1107)";
static const char __pyx_k_error_squared_tol_line_1337[] = "error_squared_tol (line 1337)";
static const char __pyx_k_index_set___iand___line_282[] = "index_set.__iand__ (line 282)";
static const char __pyx_k_index_set___iter___line_229[] = "index_set.__iter__ (line 229)";
static const char __pyx_k_index_set___ixor___line_260[] = "index_set.__ixor__ (line 260)";
static const char __pyx_k_index_set___repr___line_384[] = "index_set.__repr__ (line 384)";
static const char __pyx_k_clifford_outer_pow_line_1004[] = "clifford.outer_pow (line 1004)";
static const char __pyx_k_clifford_truncated_line_1195[] = "clifford.truncated (line 1195)";
static const char __pyx_k_index_set_count_neg_line_324[] = "index_set.count_neg (line 324)";
static const char __pyx_k_index_set_count_pos_line_333[] = "index_set.count_pos (line 333)";
static const char __pyx_k_clifford___getitem___line_707[] = "clifford.__getitem__ (line 707)";
static const char __pyx_k_clifford___truediv___line_896[] = "clifford.__truediv__ (line 896)";
static const char __pyx_k_index_set___invert___line_240[] = "index_set.__invert__ (line 240)";
static const char __pyx_k_Abbreviation_for_index_set_q_p[] = "\n    Abbreviation for index_set({-q,...p}).\n\n    >>> print(istpq(2,3))\n    {-3,-2,-1,1,2}\n    ";
static const char __pyx_k_Conjugation_reverse_o_involute[] = "\n        Conjugation, reverse o involute == involute o reverse.\n\n        >>> print((clifford(\"{1}\")).conj())\n        -{1}\n        >>> print((clifford(\"{2}\") * clifford(\"{1}\")).conj())\n        {1,2}\n        >>> print((clifford(\"{1}\") * clifford(\"{2}\")).conj())\n        -{1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\").conj())\n        1-{1}-{1,2}\n        ";
static const char __pyx_k_Geometric_product_x_clifford_2[] = "\n        Geometric product.\n\n        >>> x = clifford(2); x *= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x *= clifford(\"{2}\"); print(x)\n        {1,2}\n        >>> x = clifford(\"{1}\"); x *= clifford(\"{1,2}\"); print(x)\n        {2}\n        ";
static const char __pyx_k_Geometric_sum_print_clifford_1[] = "\n        Geometric sum.\n\n        >>> print(clifford(1) + clifford(\"{2}\"))\n        1+{2}\n        >>> print(clifford(\"{1}\") + clifford(\"{2}\"))\n        {1}+{2}\n        ";
static const char __pyx_k_Hyperbolic_sine_of_multivector[] = "\n    Hyperbolic sine of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi/2; print(sinh(x))\n    {1,2}\n    >>> x=clifford(\"{1,2}\") * pi/6; print(sinh(x))\n    0.5{1,2}\n    ";
static const char __pyx_k_Inner_product_print_clifford_1[] = "\n        Inner product.\n\n        >>> print(clifford(\"{1}\") & clifford(\"{2}\"))\n        0\n        >>> print(clifford(2) & clifford(\"{2}\"))\n        0\n        >>> print(clifford(\"{1}\") & clifford(\"{1}\"))\n        1\n        >>> print(clifford(\"{1}\") & clifford(\"{1,2}\"))\n        {2}\n        ";
static const char __pyx_k_Inverse_tangent_of_multivector[] = "\n    Inverse tangent of multivector with optional complexifier.\n\n    >>> s=index_set({1,2,3}); x=clifford(\"{1}\"); print(tan(atan(x,s),s))\n    {1}\n    >>> x=clifford(\"{1}\"); print(tan(atan(x)))\n    {1}\n    ";
static const char __pyx_k_Iterate_over_the_indices_of_an[] = "\n        Iterate over the indices of an index_set.\n\n        >>> for i in index_set({-3,4,7}):print(i, end=\",\")\n        -3,4,7,\n        ";
static const char __pyx_k_Maximum_member_index_set_1_1_2[] = "\n        Maximum member.\n\n        >>> index_set({-1,1,2}).max()\n        2\n        ";
static const char __pyx_k_Maximum_positive_index_or_0_if[] = "\n    Maximum positive index, or 0 if none.\n\n    >>> max_pos(index_set({1,2}))\n    2\n    ";
static const char __pyx_k_Minimum_member_index_set_1_1_2[] = "\n        Minimum member.\n\n        >>> index_set({-1,1,2}).min()\n        -1\n        ";
static const char __pyx_k_Minimum_negative_index_or_0_if[] = "\n    Minimum negative index, or 0 if none.\n\n    >>> min_neg(index_set({1,2}))\n    0\n    ";
static const char __pyx_k_Odd_part_of_multivector_sum_of[] = "\n        Odd part of multivector, sum of odd grade terms.\n\n        >>> print(clifford(\"1+{1}+{1,2}\").odd())\n        {1}\n        ";
static const char __pyx_k_Outer_product_power_x_clifford[] = "\n        Outer product power.\n\n        >>> x=clifford(\"2+{1}\"); print(x.outer_pow(0))\n        1\n        >>> x=clifford(\"2+{1}\"); print(x.outer_pow(1))\n        2+{1}\n        >>> x=clifford(\"2+{1}\"); print(x.outer_pow(2))\n        4+4{1}\n        >>> print(clifford(\"1+{1}+{1,2}\").outer_pow(3))\n        1+3{1}+3{1,2}\n\n        ";
static const char __pyx_k_Outer_product_print_clifford_1[] = "\n        Outer product.\n\n        >>> print(clifford(\"{1}\") ^ clifford(\"{2}\"))\n        {1,2}\n        >>> print(clifford(2) ^ clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") ^ clifford(\"{1}\"))\n        0\n        >>> print(clifford(\"{1}\") ^ clifford(\"{1,2}\"))\n        0\n        ";
static const char __pyx_k_Power_self_to_the_m_x_clifford[] = "\n        Power: self to the m.\n\n        >>> x=clifford(\"{1}\"); print(x ** 2)\n        1\n        >>> x=clifford(\"2\"); print(x ** 2)\n        4\n        >>> x=clifford(\"2+{1}\"); print(x ** 0)\n        1\n        >>> x=clifford(\"2+{1}\"); print(x ** 1)\n        2+{1}\n        >>> x=clifford(\"2+{1}\"); print(x ** 2)\n        5+4{1}\n        >>> i=clifford(\"{1,2}\"); print(exp(pi/2) * (i ** i))\n        1\n        ";
static const char __pyx_k_Pure_part_print_clifford_1_1_1[] = "\n        Pure part.\n\n        >>> print(clifford(\"1+{1}+{1,2}\").pure())\n        {1}+{1,2}\n        >>> print(clifford(\"{1,2}\").pure())\n        {1,2}\n        ";
static const char __pyx_k_Quadratic_form_rev_x_x_0_print[] = "\n        Quadratic form == (rev(x)*x)(0).\n\n        >>> print(clifford(\"1+{1}+{1,2}\").quad())\n        3.0\n        >>> print(clifford(\"1+{-1}+{1,2}+{1,2,3}\").quad())\n        2.0\n        ";
static const char __pyx_k_Quadratic_norm_error_tolerance[] = "\n    Quadratic norm error tolerance relative to a specific multivector.\n\n    >>> print(error_squared_tol(clifford(\"{1}\")) * 3.0 - error_squared_tol(clifford(\"1{1}-2{2}+3{3}\")))\n    0.0\n    ";
static const char __pyx_k_Set_complement_not_print_index[] = "\n        Set complement: not.\n\n        >>> print(~index_set({-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}))\n        {-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}\n        ";
static const char __pyx_k_Set_union_or_print_index_set_1[] = "\n        Set union: or.\n\n        >>> print(index_set({1}) | index_set({2}))\n        {1,2}\n        >>> print(index_set({1,2}) | index_set({2}))\n        {1,2}\n        ";
static const char __pyx_k_Transform_left_hand_side_using[] = "\n        Transform left hand side, using right hand side as a transformation.\n\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); print(y|x)\n        -{1}\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); print(y|exp(x))\n        -{1}\n        ";
static const char __pyx_k_clifford_vector_part_line_1079[] = "clifford.vector_part (line 1079)";
static const char __pyx_k_index_set___getitem___line_191[] = "index_set.__getitem__ (line 191)";
static const char __pyx_k_index_set___setitem___line_179[] = "index_set.__setitem__ (line 179)";
static const char __pyx_k_lexicographic_compare_eg_3_4_5[] = "\n    \"lexicographic compare\" eg. {3,4,5} is less than {3,7,8};\n    -1 if a<b, +1 if a>b, 0 if a==b.\n\n    >>> compare(index_set({1,2}),index_set({-1,3}))\n    -1\n    >>> compare(index_set({-1,4}),index_set({-1,3}))\n    1\n    ";
static const char __pyx_k_Abbreviation_for_clifford_index[] = "\n    Abbreviation for clifford(index_set(obj)).\n\n    >>> print(e(1))\n    {1}\n    >>> print(e(-1))\n    {-1}\n    >>> print(e(0))\n    1\n    ";
static const char __pyx_k_Absolute_value_of_multivector_m[] = "\n    Absolute value of multivector: multivector 2-norm.\n\n    >>> abs(clifford(\"1+{-1}+{1,2}+{1,2,3}\"))\n    2.0\n    ";
static const char __pyx_k_Absolute_value_square_root_of_n[] = "\n        Absolute value: square root of norm.\n\n        >>> clifford(\"1+{-1}+{1,2}+{1,2,3}\").abs()\n        2.0\n        ";
static const char __pyx_k_Cardinality_Number_of_indices_i[] = "\n        Cardinality: Number of indices included in set.\n\n        >>> index_set({-1,1,2}).count()\n        3\n        ";
static const char __pyx_k_Check_if_a_multivector_contains[] = "\n        Check if a multivector contains any infinite values.\n\n        >>> clifford().isinf()\n        False\n        ";
static const char __pyx_k_Contraction_print_clifford_1_cl[] = "\n        Contraction.\n\n        >>> print(clifford(\"{1}\") % clifford(\"{2}\"))\n        0\n        >>> print(clifford(2) % clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") % clifford(\"{1}\"))\n        1\n        >>> print(clifford(\"{1}\") % clifford(\"{1,2}\"))\n        {2}\n        ";
static const char __pyx_k_Contraction_x_clifford_1_x_clif[] = "\n        Contraction.\n\n        >>> x = clifford(\"{1}\"); x %= clifford(\"{2}\"); print(x)\n        0\n        >>> x = clifford(2); x %= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x %= clifford(\"{1}\"); print(x)\n        1\n        >>> x = clifford(\"{1}\"); x %= clifford(\"{1,2}\"); print(x)\n        {2}\n        ";
static const char __pyx_k_Convert_CGA3_null_vector_to_Euc[] = "\n    Convert CGA3 null vector to Euclidean 3D vector using Doran and Lasenby definition.\n\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(agc3(cga3(x)))\n    2{1}+9{2}+{3}\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(agc3(cga3(x))-x)\n    0\n    ";
static const char __pyx_k_Convert_CGA3_null_vector_to_sta[] = "\n    Convert CGA3 null vector to standard conformal null vector using Doran and Lasenby definition.\n\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(cga3std(cga3(x)))\n    87{-1}+4{1}+18{2}+2{3}+85{4}\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(cga3std(cga3(x))-cga3(x))\n    0\n    ";
static const char __pyx_k_Convert_Euclidean_3D_multivecto[] = "\n    Convert Euclidean 3D multivector to Conformal Geometric Algebra using Doran and Lasenby definition.\n\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(cga3(x))\n    87{-1}+4{1}+18{2}+2{3}+85{4}\n    ";
static const char __pyx_k_Copy_this_clifford_object_x_cli[] = "\n        Copy this clifford object.\n\n        >>> x=clifford(\"1{2}\"); y=x.copy(); print(y)\n        {2}\n        ";
static const char __pyx_k_Copy_this_index_set_object_s_in[] = "\n        Copy this index_set object.\n\n        >>> s=index_set(1); t=s.copy(); print(t)\n        {1}\n        ";
static const char __pyx_k_Cosine_of_multivector_with_opti[] = "\n    Cosine of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x),\"{1,2,3}\"))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x)))\n    {1,2}\n    ";
static const char __pyx_k_Even_part_of_multivector_sum_of[] = "\n        Even part of multivector, sum of even grade terms.\n\n        >>> print(clifford(\"1+{1}+{1,2}\").even())\n        1+{1,2}\n        ";
static const char __pyx_k_Exponential_of_multivector_x_cl[] = "\n    Exponential of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi/4; print(exp(x))\n    0.7071+0.7071{1,2}\n    >>> x=clifford(\"{1,2}\") * pi/2; print(exp(x))\n    {1,2}\n    ";
static const char __pyx_k_Geometric_difference_print_clif[] = "\n        Geometric difference.\n\n        >>> print(clifford(1) - clifford(\"{2}\"))\n        1-{2}\n        >>> print(clifford(\"{1}\") - clifford(\"{2}\"))\n        {1}-{2}\n        ";
static const char __pyx_k_Geometric_difference_x_clifford[] = "\n        Geometric difference.\n\n        >>> x = clifford(1); x -= clifford(\"{2}\"); print(x)\n        1-{2}\n        ";
static const char __pyx_k_Geometric_multiplicative_invers[] = "\n        Geometric multiplicative inverse.\n\n        >>> x = clifford(\"{1}\"); print(x.inv())\n        {1}\n        >>> x = clifford(2); print(x.inv())\n        0.5\n        >>> x = clifford(\"{1,2}\"); print(x.inv())\n        -{1,2}\n        ";
static const char __pyx_k_Geometric_product_print_cliffor[] = "\n        Geometric product.\n\n        >>> print(clifford(\"{1}\") * clifford(\"{2}\"))\n        {1,2}\n        >>> print(clifford(2) * clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") * clifford(\"{1,2}\"))\n        {2}\n        ";
static const char __pyx_k_Geometric_quotient_print_cliffo[] = "\n        Geometric quotient.\n\n        >>> print(clifford(\"{1}\") / clifford(\"{2}\"))\n        {1,2}\n        >>> print(clifford(2) / clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") / clifford(\"{1}\"))\n        1\n        >>> print(clifford(\"{1}\") / clifford(\"{1,2}\"))\n        -{2}\n        ";
static const char __pyx_k_Geometric_quotient_x_clifford_1[] = "\n        Geometric quotient.\n\n        >>> x = clifford(\"{1}\"); x /= clifford(\"{2}\"); print(x)\n        {1,2}\n        >>> x = clifford(2); x /= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x /= clifford(\"{1}\"); print(x)\n        1\n        >>> x = clifford(\"{1}\"); x /= clifford(\"{1,2}\"); print(x)\n        -{2}\n        ";
static const char __pyx_k_Geometric_sum_x_clifford_1_x_cl[] = "\n        Geometric sum.\n\n        >>> x = clifford(1); x += clifford(\"{2}\"); print(x)\n        1+{2}\n        ";
static const char __pyx_k_Get_the_value_of_an_index_set_o[] = "\n        Get the value of an index_set object at an index.\n\n        >>> index_set({1})[1]\n        True\n        >>> index_set({1})[2]\n        False\n        >>> index_set({2})[-1]\n        False\n        >>> index_set({2})[1]\n        False\n        >>> index_set({2})[2]\n        True\n        >>> index_set({2})[33]\n        False\n        ";
static const char __pyx_k_Hyperbolic_cosine_of_multivecto[] = "\n    Hyperbolic cosine of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi; print(cosh(x))\n    -1\n    >>> x=clifford(\"{1,2,3}\"); print(cosh(acosh(x)))\n    {1,2,3}\n    >>> x=clifford(\"{1,2}\"); print(cosh(acosh(x)))\n    {1,2}\n    ";
static const char __pyx_k_Hyperbolic_tangent_of_multivect[] = "\n    Hyperbolic tangent of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi/4; print(tanh(x))\n    {1,2}\n    ";
static const char __pyx_k_Imaginary_part_deprecated_alway[] = "\n    Imaginary part: deprecated (always 0).\n\n    >>> imag(clifford(\"1+{1}+{1,2}\"))\n    0.0\n    >>> imag(clifford(\"{1,2}\"))\n    0.0\n    ";
static const char __pyx_k_Inner_product_x_clifford_1_x_cl[] = "\n        Inner product.\n\n        >>> x = clifford(\"{1}\"); x &= clifford(\"{2}\"); print(x)\n        0\n        >>> x = clifford(2); x &= clifford(\"{2}\"); print(x)\n        0\n        >>> x = clifford(\"{1}\"); x &= clifford(\"{1}\"); print(x)\n        1\n        >>> x = clifford(\"{1}\"); x &= clifford(\"{1,2}\"); print(x)\n        {2}\n        ";
static const char __pyx_k_Integer_power_of_multivector_ob[] = "\n    Integer power of multivector: obj to the m.\n\n    >>> x=clifford(\"{1}\"); print(pow(x,2))\n    1\n    >>> x=clifford(\"2\"); print(pow(x,2))\n    4\n    >>> x=clifford(\"2+{1}\"); print(pow(x,0))\n    1\n    >>> x=clifford(\"2+{1}\"); print(pow(x,1))\n    2+{1}\n    >>> x=clifford(\"2+{1}\"); print(pow(x,2))\n    5+4{1}\n    >>> print(pow(clifford(\"1+{1}+{1,2}\"),3))\n    1+3{1}+3{1,2}\n    >>> i=clifford(\"{1,2}\"); print(exp(pi/2) * pow(i, i))\n    1\n    ";
static const char __pyx_k_Inverse_cosine_of_multivector_w[] = "\n    Inverse cosine of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x),\"{1,2,3}\"))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x),\"{-1,1,2,3,4}\"))\n    {1,2}\n    >>> print(acos(0) / pi)\n    0.5\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x)))\n    {1,2}\n    ";
static const char __pyx_k_Inverse_hyperbolic_cosine_of_mu[] = "\n    Inverse hyperbolic cosine of multivector with optional complexifier.\n\n    >>> print(acosh(0,\"{-2,-1,1}\"))\n    1.571{-2,-1,1}\n    >>> x=clifford(\"{1,2,3}\"); print(cosh(acosh(x,\"{-1,1,2,3,4}\")))\n    {1,2,3}\n    >>> print(acosh(0))\n    1.571{-1}\n    >>> x=clifford(\"{1,2,3}\"); print(cosh(acosh(x)))\n    {1,2,3}\n    >>> x=clifford(\"{1,2}\"); print(cosh(acosh(x)))\n    {1,2}\n    ";
static const char __pyx_k_Inverse_hyperbolic_sine_of_mult[] = "\n    Inverse hyperbolic sine of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(asinh(x,\"{1,2,3}\") * 2/pi)\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(asinh(x) * 2/pi)\n    {1,2}\n    >>> x=clifford(\"{1,2}\") / 2; print(asinh(x) * 6/pi)\n    {1,2}\n    ";
static const char __pyx_k_Inverse_hyperbolic_tangent_of_m[] = "\n    Inverse hyperbolic tangent of multivector with optional complexifier.\n\n    >>> s=index_set({1,2,3}); x=clifford(\"{1,2}\"); print(tanh(atanh(x,s)))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(tanh(atanh(x)))\n    {1,2}\n    ";
static const char __pyx_k_Inverse_sine_of_multivector_wit[] = "\n    Inverse sine of multivector with optional complexifier.\n\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),s))\n    {-1}\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),\"{-2,-1,1}\"))\n    {-1}\n    >>> print(asin(1) / pi)\n    0.5\n    >>> x=clifford(\"{1,2,3}\"); print(asin(sin(x)))\n    {1,2,3}\n    ";
static const char __pyx_k_Main_involution_each_i_is_repla[] = "\n        Main involution, each {i} is replaced by -{i} in each term,\n        eg. clifford(\"{1}\") -> -clifford(\"{1}\").\n\n        >>> print(clifford(\"{1}\").involute())\n        -{1}\n        >>> print((clifford(\"{2}\") * clifford(\"{1}\")).involute())\n        -{1,2}\n        >>> print((clifford(\"{1}\") * clifford(\"{2}\")).involute())\n        {1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\").involute())\n        1-{1}+{1,2}\n        ";
static const char __pyx_k_Maximum_absolute_value_of_coord[] = "\n    Maximum absolute value of coordinates multivector: multivector infinity-norm.\n\n    >>> max_abs(clifford(\"1+{-1}+{1,2}+{1,2,3}\"))\n    1.0\n    >>> max_abs(clifford(\"3+2{1}+{1,2}\"))\n    3.0\n\n    ";
static const char __pyx_k_Maximum_of_absolute_values_of_c[] = "\n        Maximum of absolute values of components of multivector: multivector infinity norm.\n\n        >>> clifford(\"1+{-1}+{1,2}+{1,2,3}\").max_abs()\n        1.0\n        >>> clifford(\"3+2{1}+{1,2}\").max_abs()\n        3.0\n        ";
static const char __pyx_k_Natural_logarithm_of_multivecto[] = "\n    Natural logarithm of multivector with optional complexifier.\n\n    >>> x=clifford(\"{-1}\"); print((log(x,\"{-1}\") * 2/pi))\n    {-1}\n    >>> x=clifford(\"{1,2}\"); print((log(x,\"{1,2,3}\") * 2/pi))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print((log(x) * 2/pi))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print((log(x,\"{1,2}\") * 2/pi))\n    Traceback (most recent call last):\n    ...\n    RuntimeError: check_complex(val, i): i is not a valid complexifier for val\n    ";
static const char __pyx_k_Norm_sum_of_squares_of_coordina[] = "\n        Norm == sum of squares of coordinates.\n\n        >>> clifford(\"1+{1}+{1,2}\").norm()\n        3.0\n        >>> clifford(\"1+{-1}+{1,2}+{1,2,3}\").norm()\n        4.0\n        ";
static const char __pyx_k_Not_applicable_for_a_in_cliffor[] = "\n        Not applicable.\n\n        >>> for a in clifford(index_set({-3,4,7})):print(a, end=\",\")\n        Traceback (most recent call last):\n          ...\n        TypeError: Not applicable.\n        ";
static const char __pyx_k_Number_of_negative_indices_incl[] = "\n        Number of negative indices included in set.\n\n        >>> index_set({-1,1,2}).count_neg()\n        1\n        ";
static const char __pyx_k_Number_of_positive_indices_incl[] = "\n        Number of positive indices included in set.\n\n        >>> index_set({-1,1,2}).count_pos()\n        2\n        ";
static const char __pyx_k_Outer_product_power_of_multivec[] = "\n    Outer product power of multivector.\n\n    >>> print(outer_pow(clifford(\"1+{1}+{1,2}\"),3))\n    1+3{1}+3{1,2}\n    ";
static const char __pyx_k_Outer_product_x_clifford_1_x_cl[] = "\n        Outer product.\n\n        >>> x = clifford(\"{1}\"); x ^= clifford(\"{2}\"); print(x)\n        {1,2}\n        >>> x = clifford(2); x ^= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x ^= clifford(\"{1}\"); print(x)\n        0\n        >>> x = clifford(\"{1}\"); x ^= clifford(\"{1,2}\"); print(x)\n        0\n        ";
static const char __pyx_k_Pure_grade_vector_part_print_cl[] = "\n        Pure grade-vector part.\n\n        >>> print(clifford(\"{1}\")(1))\n        {1}\n        >>> print(clifford(\"{1}\")(0))\n        0\n        >>> print(clifford(\"1+{1}+{1,2}\")(0))\n        1\n        >>> print(clifford(\"1+{1}+{1,2}\")(1))\n        {1}\n        >>> print(clifford(\"1+{1}+{1,2}\")(2))\n        {1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\")(3))\n        0\n        ";
static const char __pyx_k_Pure_part_print_pure_clifford_1[] = "\n    Pure part\n\n    >>> print(pure(clifford(\"1+{1}+{1,2}\")))\n    {1}+{1,2}\n    >>> print(pure(clifford(\"{1,2}\")))\n    {1,2}\n    ";
static const char __pyx_k_Put_self_into_a_larger_frame_co[] = "\n        Put self into a larger frame, containing the union of self.frame() and index set ixt.\n        This can be used to make multiplication faster, by multiplying within a common frame.\n\n        >>> clifford(\"2+3{1}\").reframe(index_set({1,2,3}))\n        clifford(\"2+3{1}\")\n        >>> s=index_set({1,2,3});t=index_set({-3,-2,-1});x=random_clifford(s); x.reframe(t).frame() == (s|t);\n        True\n        ";
static const char __pyx_k_Random_multivector_within_a_fra[] = "\n    Random multivector within a frame.\n\n    >>> print(random_clifford(index_set({-3,-1,2})).frame())\n    {-3,-1,2}\n    ";
static const char __pyx_k_Real_part_synonym_for_scalar_pa[] = "\n    Real part: synonym for scalar part.\n\n    >>> real(clifford(\"1+{1}+{1,2}\"))\n    1.0\n    >>> real(clifford(\"{1,2}\"))\n    0.0\n    ";
static const char __pyx_k_Relative_or_absolute_error_usin[] = "\n    Relative or absolute error using the quadratic norm.\n\n    >>> err2=scalar_epsilon*scalar_epsilon\n\n    >>> print(error_squared(clifford(\"{1}\"), clifford(\"1{1}\"), err2))\n    0.0\n    >>> print(error_squared(clifford(\"1{1}-3{2}+4{3}\"), clifford(\"{1}\"), err2))\n    25.0\n    ";
static const char __pyx_k_Remove_all_terms_of_self_with_r[] = "\n        Remove all terms of self with relative size smaller than limit.\n\n        >>> clifford(\"1e8+{1}+1e-8{1,2}\").truncated(1.0e-6)\n        clifford(\"100000000\")\n        >>> clifford(\"1e4+{1}+1e-4{1,2}\").truncated(1.0e-6)\n        clifford(\"10000+{1}\")\n        ";
static const char __pyx_k_Reversion_eg_1_2_2_1_print_reve[] = "\n    Reversion, eg. {1}*{2} -> {2}*{1}\n\n    >>> print(reverse(clifford(\"{1}\")))\n    {1}\n    >>> print(reverse(clifford(\"{2}\") * clifford(\"{1}\")))\n    {1,2}\n    >>> print(reverse(clifford(\"{1}\") * clifford(\"{2}\")))\n    -{1,2}\n    >>> print(reverse(clifford(\"1+{1}+{1,2}\")))\n    1+{1}-{1,2}\n    ";
static const char __pyx_k_Reversion_eg_clifford_1_cliffor[] = "\n        Reversion, eg. clifford(\"{1}\")*clifford(\"{2}\") -> clifford(\"{2}\")*clifford(\"{1}\").\n\n        >>> print(clifford(\"{1}\").reverse())\n        {1}\n        >>> print((clifford(\"{2}\") * clifford(\"{1}\")).reverse())\n        {1,2}\n        >>> print((clifford(\"{1}\") * clifford(\"{2}\")).reverse())\n        -{1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\").reverse())\n        1+{1}-{1,2}\n        ";
static const char __pyx_k_Scalar_part_clifford_1_1_1_2_sc[] = "\n        Scalar part.\n\n        >>> clifford(\"1+{1}+{1,2}\").scalar()\n        1.0\n        >>> clifford(\"{1,2}\").scalar()\n        0.0\n        ";
static const char __pyx_k_Scalar_part_scalar_clifford_1_1[] = "\n    Scalar part.\n\n    >>> scalar(clifford(\"1+{1}+{1,2}\"))\n    1.0\n    >>> scalar(clifford(\"{1,2}\"))\n    0.0\n    ";
static const char __pyx_k_Set_intersection_and_print_inde[] = "\n        Set intersection: and.\n\n        >>> print(index_set({1}) & index_set({2}))\n        {}\n        >>> print(index_set({1,2}) & index_set({2}))\n        {2}\n        ";
static const char __pyx_k_Set_intersection_and_x_index_se[] = "\n        Set intersection: and.\n\n        >>> x = index_set({1}); x &= index_set({2}); print(x)\n        {}\n        >>> x = index_set({1,2}); x &= index_set({2}); print(x)\n        {2}\n        ";
static const char __pyx_k_Set_the_value_of_an_index_set_o[] = "\n        Set the value of an index_set object at index idx to value val.\n\n        >>> s=index_set({1}); s[2] = True; print(s)\n        {1,2}\n        >>> s=index_set({1,2}); s[1] = False; print(s)\n        {2}\n        ";
static const char __pyx_k_Set_union_or_x_index_set_1_x_in[] = "\n        Set union: or.\n\n        >>> x = index_set({1}); x |= index_set({2}); print(x)\n        {1,2}\n        >>> x = index_set({1,2}); x |= index_set({2}); print(x)\n        {1,2}\n        ";
static const char __pyx_k_Sign_of_geometric_product_of_tw[] = "\n        Sign of geometric product of two Clifford basis elements.\n\n        >>> s = index_set({1,2}); t=index_set({-1}); s.sign_of_mult(t)\n        1\n        ";
static const char __pyx_k_Sign_of_geometric_square_of_a_C[] = "\n        Sign of geometric square of a Clifford basis element.\n\n        >>> s = index_set({1,2}); s.sign_of_square()\n        -1\n        ";
static const char __pyx_k_Sine_of_multivector_with_option[] = "\n    Sine of multivector with optional complexifier.\n\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),s))\n    {-1}\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),\"{-2,-1,1}\"))\n    {-1}\n    >>> x=clifford(\"{1,2,3}\"); print(asin(sin(x)))\n    {1,2,3}\n    ";
static const char __pyx_k_Square_root_of_1_which_commutes[] = "\n    Square root of -1 which commutes with all members of the frame of the given multivector.\n\n    >>> print(complexifier(clifford(index_set({1}))))\n    {1,2,3}\n    >>> print(complexifier(clifford(index_set({-1}))))\n    {-1}\n    >>> print(complexifier(index_set({1})))\n    {1,2,3}\n    >>> print(complexifier(index_set({-1})))\n    {-1}\n    ";
static const char __pyx_k_Square_root_of_multivector_with[] = "\n    Square root of multivector with optional complexifier.\n\n    >>> print(sqrt(-1))\n    {-1}\n    >>> print(sqrt(clifford(\"2{-1}\")))\n    1+{-1}\n    >>> j=sqrt(-1,complexifier(index_set({1}))); print(j); print(j*j)\n    {1,2,3}\n    -1\n    >>> j=sqrt(-1,\"{1,2,3}\"); print(j); print(j*j)\n    {1,2,3}\n    -1\n    ";
static const char __pyx_k_Subalgebra_generated_by_all_gen[] = "\n        Subalgebra generated by all generators of terms of given multivector.\n\n        >>> print(clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").frame())\n        {-2,-1,1,2,7}\n        >>> s=clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").frame(); type(s)\n        <class 'PyClical.index_set'>\n        ";
static const char __pyx_k_Subscripting_map_from_index_set[] = "\n        Subscripting: map from index set to scalar coordinate.\n\n        >>> clifford(\"{1}\")[index_set(1)]\n        1.0\n        >>> clifford(\"{1}\")[index_set({1})]\n        1.0\n        >>> clifford(\"{1}\")[index_set({1,2})]\n        0.0\n        >>> clifford(\"2{1,2}\")[index_set({1,2})]\n        2.0\n        ";
static const char __pyx_k_Symmetric_set_difference_exclus[] = "\n        Symmetric set difference: exclusive or.\n\n        >>> print(index_set({1}) ^ index_set({2}))\n        {1,2}\n        >>> print(index_set({1,2}) ^ index_set({2}))\n        {1}\n        ";
static const char __pyx_k_Tangent_of_multivector_with_opt[] = "\n    Tangent of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(tan(x,\"{1,2,3}\"))\n    0.7616{1,2}\n    >>> x=clifford(\"{1,2}\"); print(tan(x))\n    0.7616{1,2}\n    ";
static const char __pyx_k_Test_for_approximate_equality_o[] = "\n    Test for approximate equality of multivectors.\n\n    >>> err2=scalar_epsilon*scalar_epsilon\n\n    >>> print(approx_equal(clifford(\"{1}\"), clifford(\"1{1}\")))\n    True\n    >>> print(approx_equal(clifford(\"1{1}-3{2}+4{3}\"), clifford(\"{1}\")))\n    False\n    >>> print(approx_equal(clifford(\"1{1}-3{2}+4{3}+0.001\"), clifford(\"1{1}-3{2}+4{3}\"), err2, err2))\n    False\n    >>> print(approx_equal(clifford(\"1{1}-3{2}+4{3}+1.0e-30\"), clifford(\"1{1}-3{2}+4{3}\"), err2, err2))\n    True\n    ";
static const char __pyx_k_Tests_for_functions_that_Doctes[] = "\n    Tests for functions that Doctest cannot see.\n\n    For index_set.__cinit__: Construct index_set.\n\n    >>> print(index_set(1))\n    {1}\n    >>> print(index_set({1,2}))\n    {1,2}\n    >>> print(index_set(index_set({1,2})))\n    {1,2}\n    >>> print(index_set({1,2}))\n    {1,2}\n    >>> print(index_set({1,2,1}))\n    {1,2}\n    >>> print(index_set({1,2,1}))\n    {1,2}\n    >>> print(index_set(\"\"))\n    {}\n    >>> print(index_set(\"{\"))\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot initialize index_set object from invalid string '{'.\n    >>> print(index_set(\"{1\"))\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot initialize index_set object from invalid string '{1'.\n    >>> print(index_set(\"{1,2,100}\"))\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot initialize index_set object from invalid string '{1,2,100}'.\n    >>> print(index_set({1,2,100}))\n    Traceback (most recent call last):\n    ...\n    IndexError: Cannot initialize index_set object from invalid {1, 2, 100}.\n    >>> print(index_set([1,2]))\n    Traceback (most recent call last):\n    ...\n    TypeError: Cannot initialize index_set object from <class 'list'>.\n\n    For index_set.__richcmp__: Compare two objects of class index_set.\n\n    >>> index_set(1) == index_set({1})\n    True\n    >>> index_set({1}) != index_set({1})\n    False\n    >>> index_set({1}) != index_set({2})\n    True\n    >>> index_set({1}) == index_set({2})\n    False\n    >>> index_set({1}) < index_set({2})\n    True\n    >>> index_set({1}) <= index_set({2})\n    True\n    >>> index_set({1}) > index_set({2})\n    False\n    >>> index_set({1}) >= index_set({2})\n    False\n    >>> None == index_set({1,2})\n    False\n    >>> None != index_set({1,2})\n    True\n    >>> None < index_set({1,2})\n    False\n    >>> None <= index_set({1,2})\n    False\n    >>> None > index_set({1,2})\n    False\n    >>> None >= index_set({1,2})\n    False\n    >>> ""index_set({1,2}) == None\n    False\n    >>> index_set({1,2}) != None\n    True\n    >>> index_set({1,2}) < None\n    False\n    >>> index_set({1,2}) <= None\n    False\n    >>> index_set({1,2}) > None\n    False\n    >>> index_set({1,2}) >= None\n    False\n    ";
        static const char __pyx_k_The_informal_string_representat[] = "\n        The \342\200\234informal\342\200\235 string representation of self.\n\n        >>> index_set({1,2}).__str__()\n        '{1,2}'\n        >>> str(index_set({1,2}))\n        '{1,2}'\n        ";
        static const char __pyx_k_The_official_string_representat[] = "\n        The \342\200\234official\342\200\235 string representation of self.\n\n        >>> index_set({1,2}).__repr__()\n        'index_set({1,2})'\n        >>> repr(index_set({1,2}))\n        'index_set({1,2})'\n        ";
        static const char __pyx_k_This_comparison_operator_is_not[] = "This comparison operator is not implemented for ";
        static const char __pyx_k_Vector_part_of_multivector_as_a[] = "\n        Vector part of multivector, as a Python list, with respect to frm.\n\n        >>> print(clifford(\"1+2{1}+3{2}+4{1,2}\").vector_part())\n        [2.0, 3.0]\n        >>> print(clifford(\"1+2{1}+3{2}+4{1,2}\").vector_part(index_set({-1,1,2})))\n        [0.0, 2.0, 3.0]\n        ";
        static const char __pyx_k_index_set_sign_of_mult_line_366[] = "index_set.sign_of_mult (line 366)";
        static const char __pyx_k_norm_sum_of_squares_of_coordina[] = "\n    norm == sum of squares of coordinates.\n\n    >>> norm(clifford(\"1+{1}+{1,2}\"))\n    3.0\n    >>> norm(clifford(\"1+{-1}+{1,2}+{1,2,3}\"))\n    4.0\n    ";
        static const char __pyx_k_Cannot_initialize_clifford_objec[] = "Cannot initialize clifford object from";
        static const char __pyx_k_Cannot_initialize_index_set_obje[] = "Cannot initialize index_set object from";
        static const char __pyx_k_Conjugation_reverse_o_involute_2[] = "\n    Conjugation, reverse o involute == involute o reverse.\n\n    >>> print(conj(clifford(\"{1}\")))\n    -{1}\n    >>> print(conj(clifford(\"{2}\") * clifford(\"{1}\")))\n    {1,2}\n    >>> print(conj(clifford(\"{1}\") * clifford(\"{2}\")))\n    -{1,2}\n    >>> print(conj(clifford(\"1+{1}+{1,2}\")))\n    1-{1}-{1,2}\n    ";
        static const char __pyx_k_Odd_part_of_multivector_sum_of_2[] = "\n    Odd part of multivector, sum of odd grade terms.\n\n    >>> print(odd(clifford(\"1+{1}+{1,2}\")))\n    {1}\n    ";
        static const char __pyx_k_Power_self_to_the_m_x_clifford_2[] = "\n        Power: self to the m.\n\n        >>> x=clifford(\"{1}\"); print(x.pow(2))\n        1\n        >>> x=clifford(\"2\"); print(x.pow(2))\n        4\n        >>> x=clifford(\"2+{1}\"); print(x.pow(0))\n        1\n        >>> x=clifford(\"2+{1}\"); print(x.pow(1))\n        2+{1}\n        >>> x=clifford(\"2+{1}\"); print(x.pow(2))\n        5+4{1}\n        >>> print(clifford(\"1+{1}+{1,2}\").pow(3))\n        1+3{1}+3{1,2}\n        >>> i=clifford(\"{1,2}\"); print(exp(pi/2) * i.pow(i))\n        1\n        ";
        static const char __pyx_k_Quadratic_form_rev_x_x_0_print_2[] = "\n    Quadratic form == (rev(x)*x)(0).\n\n    >>> print(quad(clifford(\"1+{1}+{1,2}\")))\n    3.0\n    >>> print(quad(clifford(\"1+{-1}+{1,2}+{1,2,3}\")))\n    2.0\n    ";
        static const char __pyx_k_Transform_left_hand_side_using_2[] = "\n        Transform left hand side, using right hand side as a transformation.\n\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); y|=x; print(y)\n        -{1}\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); y|=exp(x); print(y)\n        -{1}\n        ";
        static const char __pyx_k_clifford_hidden_doctests_line_12[] = "clifford_hidden_doctests (line 1253)";
        static const char __pyx_k_index_set_hidden_doctests_line_4[] = "index_set_hidden_doctests (line 406)";
        static const char __pyx_k_index_set_sign_of_square_line_37[] = "index_set.sign_of_square (line 375)";
        static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
        static const char __pyx_k_Check_if_a_multivector_contains_2[] = "\n        Check if a multivector contains any IEEE NaN values.\n\n        >>> clifford().isnan()\n        False\n        ";
        static const char __pyx_k_Even_part_of_multivector_sum_of_2[] = "\n    Even part of multivector, sum of even grade terms.\n\n    >>> print(even(clifford(\"1+{1}+{1,2}\")))\n    1+{1,2}\n    ";
        static const char __pyx_k_Geometric_multiplicative_invers_2[] = "\n    Geometric multiplicative inverse.\n\n    >>> print(inv(clifford(\"{1}\")))\n    {1}\n    >>> print(inv(clifford(\"{-1}\")))\n    -{-1}\n    >>> print(inv(clifford(\"{-2,-1}\")))\n    -{-2,-1}\n    >>> print(inv(clifford(\"{-1}+{1}\")))\n    nan\n    ";
        static const char __pyx_k_Main_involution_each_i_is_repla_2[] = "\n    Main involution, each {i} is replaced by -{i} in each term, eg. {1}*{2} -> (-{2})*(-{1})\n\n    >>> print(involute(clifford(\"{1}\")))\n    -{1}\n    >>> print(involute(clifford(\"{2}\") * clifford(\"{1}\")))\n    -{1,2}\n    >>> print(involute(clifford(\"{1}\") * clifford(\"{2}\")))\n    {1,2}\n    >>> print(involute(clifford(\"1+{1}+{1,2}\")))\n    1-{1}+{1,2}\n    ";
        static const char __pyx_k_Symmetric_set_difference_exclus_2[] = "\n        Symmetric set difference: exclusive or.\n\n        >>> x = index_set({1}); x ^= index_set({2}); print(x)\n        {1,2}\n        >>> x = index_set({1,2}); x ^= index_set({2}); print(x)\n        {1}\n        ";
        static const char __pyx_k_Tests_for_functions_that_Doctes_2[] = "\n    Tests for functions that Doctest cannot see.\n\n    For clifford.__cinit__: Construct an object of type clifford.\n\n    >>> print(clifford(2))\n    2\n    >>> print(clifford(2.0))\n    2\n    >>> print(clifford(1.0e-1))\n    0.1\n    >>> print(clifford(\"2\"))\n    2\n    >>> print(clifford(\"2{1,2,3}\"))\n    2{1,2,3}\n    >>> print(clifford(clifford(\"2{1,2,3}\")))\n    2{1,2,3}\n    >>> print(clifford(\"-{1}\"))\n    -{1}\n    >>> print(clifford(2,index_set({1,2})))\n    2{1,2}\n    >>> print(clifford([2,3],index_set({1,2})))\n    2{1}+3{2}\n    >>> print(clifford([1,2]))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from <class 'list'>.\n    >>> print(clifford(None))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from <class 'NoneType'>.\n    >>> print(clifford(None,[1,2]))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from (<class 'NoneType'>, <class 'list'>).\n    >>> print(clifford([1,2],[1,2]))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from (<class 'list'>, <class 'list'>).\n    >>> print(clifford(\"\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string ''.\n    >>> print(clifford(\"{\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '{'.\n    >>> print(clifford(\"{1\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '{1'.\n    >>> print(clifford(\"+\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '+'.\n    >>> print(clifford(\"-\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object fro""m invalid string '-'.\n    >>> print(clifford(\"{1}+\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '{1}+'.\n\n    For clifford.__richcmp__: Compare objects of type clifford.\n\n    >>> clifford(\"{1}\") == clifford(\"1{1}\")\n    True\n    >>> clifford(\"{1}\") != clifford(\"1.0{1}\")\n    False\n    >>> clifford(\"{1}\") != clifford(\"1.0\")\n    True\n    >>> clifford(\"{1,2}\") == None\n    False\n    >>> clifford(\"{1,2}\") != None\n    True\n    >>> None == clifford(\"{1,2}\")\n    False\n    >>> None != clifford(\"{1,2}\")\n    True\n    ";
                static const char __pyx_k_The_informal_string_representat_2[] = "\n        The \342\200\234informal\342\200\235 string representation of self.\n\n        >>> clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").__str__()\n        '1+3{-1}+2{1,2}+4{-2,7}'\n        ";
                static const char __pyx_k_The_official_string_representat_2[] = "\n        The \342\200\234official\342\200\235 string representation of self.\n\n        >>> clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").__repr__()\n        'clifford(\"1+3{-1}+2{1,2}+4{-2,7}\")'\n        ";
                static PyObject *__pyx_kp_u_;
                static PyObject *__pyx_kp_u_Abbreviation_for_clifford_index;
                static PyObject *__pyx_kp_u_Abbreviation_for_index_set_q_p;
                static PyObject *__pyx_kp_u_Absolute_value_of_multivector_m;
                static PyObject *__pyx_kp_u_Absolute_value_square_root_of_n;
                static PyObject *__pyx_kp_u_Cannot_initialize_clifford_objec;
                static PyObject *__pyx_kp_u_Cannot_initialize_index_set_obje;
                static PyObject *__pyx_kp_u_Cannot_reframe;
                static PyObject *__pyx_kp_u_Cannot_take_vector_part_of;
                static PyObject *__pyx_kp_u_Cardinality_Number_of_indices_i;
                static PyObject *__pyx_kp_u_Check_if_a_multivector_contains;
                static PyObject *__pyx_kp_u_Check_if_a_multivector_contains_2;
                static PyObject *__pyx_kp_u_Conjugation_reverse_o_involute;
                static PyObject *__pyx_kp_u_Conjugation_reverse_o_involute_2;
                static PyObject *__pyx_kp_u_Contraction_print_clifford_1_cl;
                static PyObject *__pyx_kp_u_Contraction_x_clifford_1_x_clif;
                static PyObject *__pyx_kp_u_Convert_CGA3_null_vector_to_Euc;
                static PyObject *__pyx_kp_u_Convert_CGA3_null_vector_to_sta;
                static PyObject *__pyx_kp_u_Convert_Euclidean_3D_multivecto;
                static PyObject *__pyx_kp_u_Copy_this_clifford_object_x_cli;
                static PyObject *__pyx_kp_u_Copy_this_index_set_object_s_in;
                static PyObject *__pyx_kp_u_Cosine_of_multivector_with_opti;
                static PyObject *__pyx_kp_u_Even_part_of_multivector_sum_of;
                static PyObject *__pyx_kp_u_Even_part_of_multivector_sum_of_2;
                static PyObject *__pyx_kp_u_Exponential_of_multivector_x_cl;
                static PyObject *__pyx_kp_u_Geometric_difference_print_clif;
                static PyObject *__pyx_kp_u_Geometric_difference_x_clifford;
                static PyObject *__pyx_kp_u_Geometric_multiplicative_invers;
                static PyObject *__pyx_kp_u_Geometric_multiplicative_invers_2;
                static PyObject *__pyx_kp_u_Geometric_product_print_cliffor;
                static PyObject *__pyx_kp_u_Geometric_product_x_clifford_2;
                static PyObject *__pyx_kp_u_Geometric_quotient_print_cliffo;
                static PyObject *__pyx_kp_u_Geometric_quotient_x_clifford_1;
                static PyObject *__pyx_kp_u_Geometric_sum_print_clifford_1;
                static PyObject *__pyx_kp_u_Geometric_sum_x_clifford_1_x_cl;
                static PyObject *__pyx_kp_u_Get_the_value_of_an_index_set_o;
                static PyObject *__pyx_kp_u_Hyperbolic_cosine_of_multivecto;
                static PyObject *__pyx_kp_u_Hyperbolic_sine_of_multivector;
                static PyObject *__pyx_kp_u_Hyperbolic_tangent_of_multivect;
                static PyObject *__pyx_kp_u_Imaginary_part_deprecated_alway;
                static PyObject *__pyx_n_s_IndexError;
                static PyObject *__pyx_kp_u_Inner_product_print_clifford_1;
                static PyObject *__pyx_kp_u_Inner_product_x_clifford_1_x_cl;
                static PyObject *__pyx_kp_u_Integer_power_of_multivector_ob;
                static PyObject *__pyx_n_s_Integral;
                static PyObject *__pyx_kp_u_Inverse_cosine_of_multivector_w;
                static PyObject *__pyx_kp_u_Inverse_hyperbolic_cosine_of_mu;
                static PyObject *__pyx_kp_u_Inverse_hyperbolic_sine_of_mult;
                static PyObject *__pyx_kp_u_Inverse_hyperbolic_tangent_of_m;
                static PyObject *__pyx_kp_u_Inverse_sine_of_multivector_wit;
                static PyObject *__pyx_kp_u_Inverse_tangent_of_multivector;
                static PyObject *__pyx_kp_u_Iterate_over_the_indices_of_an;
                static PyObject *__pyx_kp_u_Main_involution_each_i_is_repla;
                static PyObject *__pyx_kp_u_Main_involution_each_i_is_repla_2;
                static PyObject *__pyx_kp_u_Maximum_absolute_value_of_coord;
                static PyObject *__pyx_kp_u_Maximum_member_index_set_1_1_2;
                static PyObject *__pyx_kp_u_Maximum_of_absolute_values_of_c;
                static PyObject *__pyx_kp_u_Maximum_positive_index_or_0_if;
                static PyObject *__pyx_kp_u_Minimum_member_index_set_1_1_2;
                static PyObject *__pyx_kp_u_Minimum_negative_index_or_0_if;
                static PyObject *__pyx_kp_u_Natural_logarithm_of_multivecto;
                static PyObject *__pyx_kp_u_Norm_sum_of_squares_of_coordina;
                static PyObject *__pyx_n_s_NotImplemented;
                static PyObject *__pyx_kp_u_Not_applicable;
                static PyObject *__pyx_kp_u_Not_applicable_for_a_in_cliffor;
                static PyObject *__pyx_kp_u_Number_of_negative_indices_incl;
                static PyObject *__pyx_kp_u_Number_of_positive_indices_incl;
                static PyObject *__pyx_kp_u_Odd_part_of_multivector_sum_of;
                static PyObject *__pyx_kp_u_Odd_part_of_multivector_sum_of_2;
                static PyObject *__pyx_kp_u_Outer_product_power_of_multivec;
                static PyObject *__pyx_kp_u_Outer_product_power_x_clifford;
                static PyObject *__pyx_kp_u_Outer_product_print_clifford_1;
                static PyObject *__pyx_kp_u_Outer_product_x_clifford_1_x_cl;
                static PyObject *__pyx_kp_u_Power_self_to_the_m_x_clifford;
                static PyObject *__pyx_kp_u_Power_self_to_the_m_x_clifford_2;
                static PyObject *__pyx_kp_u_Pure_grade_vector_part_print_cl;
                static PyObject *__pyx_kp_u_Pure_part_print_clifford_1_1_1;
                static PyObject *__pyx_kp_u_Pure_part_print_pure_clifford_1;
                static PyObject *__pyx_kp_u_Put_self_into_a_larger_frame_co;
                static PyObject *__pyx_n_s_PyClical;
                static PyObject *__pyx_kp_s_PyClical_pyx;
                static PyObject *__pyx_kp_u_Quadratic_form_rev_x_x_0_print;
                static PyObject *__pyx_kp_u_Quadratic_form_rev_x_x_0_print_2;
                static PyObject *__pyx_kp_u_Quadratic_norm_error_tolerance;
                static PyObject *__pyx_kp_u_Random_multivector_within_a_fra;
                static PyObject *__pyx_n_s_Real;
                static PyObject *__pyx_kp_u_Real_part_synonym_for_scalar_pa;
                static PyObject *__pyx_kp_u_Relative_or_absolute_error_usin;
                static PyObject *__pyx_kp_u_Remove_all_terms_of_self_with_r;
                static PyObject *__pyx_kp_u_Reversion_eg_1_2_2_1_print_reve;
                static PyObject *__pyx_kp_u_Reversion_eg_clifford_1_cliffor;
                static PyObject *__pyx_n_s_RuntimeError;
                static PyObject *__pyx_kp_u_Scalar_part_clifford_1_1_1_2_sc;
                static PyObject *__pyx_kp_u_Scalar_part_scalar_clifford_1_1;
                static PyObject *__pyx_n_s_Sequence;
                static PyObject *__pyx_kp_u_Set_complement_not_print_index;
                static PyObject *__pyx_kp_u_Set_intersection_and_print_inde;
                static PyObject *__pyx_kp_u_Set_intersection_and_x_index_se;
                static PyObject *__pyx_kp_u_Set_the_value_of_an_index_set_o;
                static PyObject *__pyx_kp_u_Set_union_or_print_index_set_1;
                static PyObject *__pyx_kp_u_Set_union_or_x_index_set_1_x_in;
                static PyObject *__pyx_kp_u_Sign_of_geometric_product_of_tw;
                static PyObject *__pyx_kp_u_Sign_of_geometric_square_of_a_C;
                static PyObject *__pyx_kp_u_Sine_of_multivector_with_option;
                static PyObject *__pyx_kp_u_Square_root_of_1_which_commutes;
                static PyObject *__pyx_kp_u_Square_root_of_multivector_with;
                static PyObject *__pyx_kp_u_Subalgebra_generated_by_all_gen;
                static PyObject *__pyx_kp_u_Subscripting_map_from_index_set;
                static PyObject *__pyx_kp_u_Symmetric_set_difference_exclus;
                static PyObject *__pyx_kp_u_Symmetric_set_difference_exclus_2;
                static PyObject *__pyx_kp_u_Tangent_of_multivector_with_opt;
                static PyObject *__pyx_kp_u_Test_for_approximate_equality_o;
                static PyObject *__pyx_kp_u_Tests_for_functions_that_Doctes;
                static PyObject *__pyx_kp_u_Tests_for_functions_that_Doctes_2;
                static PyObject *__pyx_kp_u_The_informal_string_representat;
                static PyObject *__pyx_kp_u_The_informal_string_representat_2;
                static PyObject *__pyx_kp_u_The_official_string_representat;
                static PyObject *__pyx_kp_u_The_official_string_representat_2;
                static PyObject *__pyx_kp_u_This_comparison_operator_is_not;
                static PyObject *__pyx_kp_u_Transform_left_hand_side_using;
                static PyObject *__pyx_kp_u_Transform_left_hand_side_using_2;
                static PyObject *__pyx_n_s_TypeError;
                static PyObject *__pyx_kp_u_UTF_8;
                static PyObject *__pyx_kp_u_Unary_print_clifford_1_1;
                static PyObject *__pyx_kp_u_Unary_print_clifford_1_1_2;
                static PyObject *__pyx_n_s_ValueError;
                static PyObject *__pyx_kp_u_Vector_part_of_multivector_as_a;
                static PyObject *__pyx_kp_u__2;
                static PyObject *__pyx_kp_u__5;
                static PyObject *__pyx_kp_u__6;
                static PyObject *__pyx_kp_u__7;
                static PyObject *__pyx_kp_u__8;
                static PyObject *__pyx_kp_u__9;
                static PyObject *__pyx_n_s_abc;
                static PyObject *__pyx_kp_u_abs_line_1522;
                static PyObject *__pyx_n_s_acos;
                static PyObject *__pyx_kp_u_acos_line_1668;
                static PyObject *__pyx_n_s_acosh;
                static PyObject *__pyx_kp_u_acosh_line_1705;
                static PyObject *__pyx_kp_u_agc3_line_1893;
                static PyObject *__pyx_kp_u_approx_equal_line_1359;
                static PyObject *__pyx_n_s_args;
                static PyObject *__pyx_kp_u_as_frame;
                static PyObject *__pyx_n_s_asin;
                static PyObject *__pyx_kp_u_asin_line_1747;
                static PyObject *__pyx_n_s_asinh;
                static PyObject *__pyx_kp_u_asinh_line_1782;
                static PyObject *__pyx_n_s_atan;
                static PyObject *__pyx_kp_u_atan_line_1818;
                static PyObject *__pyx_n_s_atanh;
                static PyObject *__pyx_kp_u_atanh_line_1847;
                static PyObject *__pyx_kp_u_cga3_line_1873;
                static PyObject *__pyx_kp_u_cga3std_line_1882;
                static PyObject *__pyx_n_s_cl;
                static PyObject *__pyx_n_s_clifford;
                static PyObject *__pyx_kp_u_clifford___add___line_740;
                static PyObject *__pyx_kp_u_clifford___and___line_836;
                static PyObject *__pyx_kp_u_clifford___call___line_1020;
                static PyObject *__pyx_kp_u_clifford___getitem___line_707;
                static PyObject *__pyx_kp_u_clifford___iadd___line_751;
                static PyObject *__pyx_kp_u_clifford___iand___line_851;
                static PyObject *__pyx_kp_u_clifford___idiv___line_911;
                static PyObject *__pyx_kp_u_clifford___imod___line_821;
                static PyObject *__pyx_kp_u_clifford___imul___line_793;
                static PyObject *__pyx_kp_u_clifford___ior___line_950;
                static PyObject *__pyx_kp_u_clifford___isub___line_771;
                static PyObject *__pyx_kp_u_clifford___iter___line_638;
                static PyObject *__pyx_kp_u_clifford___ixor___line_881;
                static PyObject *__pyx_kp_u_clifford___mod___line_806;
                static PyObject *__pyx_kp_u_clifford___mul___line_780;
                static PyObject *__pyx_kp_u_clifford___neg___line_722;
                static PyObject *__pyx_kp_u_clifford___or___line_939;
                static PyObject *__pyx_kp_u_clifford___pos___line_731;
                static PyObject *__pyx_kp_u_clifford___pow___line_961;
                static PyObject *__pyx_kp_u_clifford___repr___line_1235;
                static PyObject *__pyx_kp_u_clifford___str___line_1244;
                static PyObject *__pyx_kp_u_clifford___sub___line_760;
                static PyObject *__pyx_kp_u_clifford___truediv___line_896;
                static PyObject *__pyx_kp_u_clifford___xor___line_866;
                static PyObject *__pyx_kp_u_clifford_abs_line_1175;
                static PyObject *__pyx_kp_u_clifford_conj_line_1138;
                static PyObject *__pyx_kp_u_clifford_copy_line_556;
                static PyObject *__pyx_kp_u_clifford_even_line_1061;
                static PyObject *__pyx_kp_u_clifford_frame_line_1224;
                static PyObject *__pyx_n_s_clifford_hidden_doctests;
                static PyObject *__pyx_kp_u_clifford_hidden_doctests_line_12;
                static PyObject *__pyx_kp_u_clifford_inv_line_926;
                static PyObject *__pyx_kp_u_clifford_involute_line_1107;
                static PyObject *__pyx_kp_u_clifford_isinf_line_1206;
                static PyObject *__pyx_kp_u_clifford_isnan_line_1215;
                static PyObject *__pyx_kp_u_clifford_max_abs_line_1184;
                static PyObject *__pyx_kp_u_clifford_norm_line_1164;
                static PyObject *__pyx_kp_u_clifford_odd_line_1070;
                static PyObject *__pyx_kp_u_clifford_outer_pow_line_1004;
                static PyObject *__pyx_kp_u_clifford_pow_line_980;
                static PyObject *__pyx_kp_u_clifford_pure_line_1050;
                static PyObject *__pyx_kp_u_clifford_quad_line_1153;
                static PyObject *__pyx_kp_u_clifford_reframe_line_649;
                static PyObject *__pyx_kp_u_clifford_reverse_line_1123;
                static PyObject *__pyx_kp_u_clifford_scalar_line_1039;
                static PyObject *__pyx_kp_u_clifford_truncated_line_1195;
                static PyObject *__pyx_kp_u_clifford_vector_part_line_1079;
                static PyObject *__pyx_n_s_cline_in_traceback;
                static PyObject *__pyx_n_s_close;
                static PyObject *__pyx_n_s_collections;
                static PyObject *__pyx_kp_u_compare_line_492;
                static PyObject *__pyx_kp_u_complexifier_line_1576;
                static PyObject *__pyx_n_s_conj;
                static PyObject *__pyx_kp_u_conj_line_1485;
                static PyObject *__pyx_n_s_copy;
                static PyObject *__pyx_n_s_cos;
                static PyObject *__pyx_kp_u_cos_line_1651;
                static PyObject *__pyx_n_s_cosh;
                static PyObject *__pyx_kp_u_cosh_line_1689;
                static PyObject *__pyx_n_s_doctest;
                static PyObject *__pyx_n_s_e;
                static PyObject *__pyx_kp_u_e_line_1936;
                static PyObject *__pyx_n_s_encode;
                static PyObject *__pyx_kp_u_error_squared_line_1346;
                static PyObject *__pyx_kp_u_error_squared_tol_line_1337;
                static PyObject *__pyx_n_s_even;
                static PyObject *__pyx_kp_u_even_line_1437;
                static PyObject *__pyx_n_s_exp;
                static PyObject *__pyx_kp_u_exp_line_1614;
                static PyObject *__pyx_n_s_fill;
                static PyObject *__pyx_n_s_frm;
                static PyObject *__pyx_kp_u_from;
                static PyObject *__pyx_n_s_getstate;
                static PyObject *__pyx_n_s_grade;
                static PyObject *__pyx_n_s_i;
                static PyObject *__pyx_kp_u_imag_line_1415;
                static PyObject *__pyx_n_s_import;
                static PyObject *__pyx_n_s_index_set;
                static PyObject *__pyx_kp_u_index_set___and___line_271;
                static PyObject *__pyx_kp_u_index_set___getitem___line_191;
                static PyObject *__pyx_kp_u_index_set___iand___line_282;
                static PyObject *__pyx_kp_u_index_set___invert___line_240;
                static PyObject *__pyx_kp_u_index_set___ior___line_304;
                static PyObject *__pyx_n_s_index_set___iter;
                static PyObject *__pyx_kp_u_index_set___iter___line_229;
                static PyObject *__pyx_kp_u_index_set___ixor___line_260;
                static PyObject *__pyx_kp_u_index_set___or___line_293;
                static PyObject *__pyx_kp_u_index_set___repr___line_384;
                static PyObject *__pyx_kp_u_index_set___setitem___line_179;
                static PyObject *__pyx_kp_u_index_set___str___line_395;
                static PyObject *__pyx_kp_u_index_set___xor___line_249;
                static PyObject *__pyx_kp_u_index_set_copy_line_65;
                static PyObject *__pyx_kp_u_index_set_count_line_315;
                static PyObject *__pyx_kp_u_index_set_count_neg_line_324;
                static PyObject *__pyx_kp_u_index_set_count_pos_line_333;
                static PyObject *__pyx_n_s_index_set_hidden_doctests;
                static PyObject *__pyx_kp_u_index_set_hidden_doctests_line_4;
                static PyObject *__pyx_kp_u_index_set_max_line_351;
                static PyObject *__pyx_kp_u_index_set_min_line_342;
                static PyObject *__pyx_kp_u_index_set_sign_of_mult_line_366;
                static PyObject *__pyx_kp_u_index_set_sign_of_square_line_37;
                static PyObject *__pyx_n_s_inv;
                static PyObject *__pyx_kp_u_inv_line_1378;
                static PyObject *__pyx_kp_u_invalid;
                static PyObject *__pyx_kp_u_invalid_string;
                static PyObject *__pyx_n_s_involute;
                static PyObject *__pyx_kp_u_involute_line_1455;
                static PyObject *__pyx_n_s_ist;
                static PyObject *__pyx_n_s_istpq;
                static PyObject *__pyx_kp_u_istpq_line_1949;
                static PyObject *__pyx_n_s_iter;
                static PyObject *__pyx_n_s_ixt;
                static PyObject *__pyx_kp_u_lexicographic_compare_eg_3_4_5;
                static PyObject *__pyx_n_s_lhs;
                static PyObject *__pyx_n_s_log;
                static PyObject *__pyx_kp_u_log_line_1628;
                static PyObject *__pyx_n_s_m;
                static PyObject *__pyx_n_s_main;
                static PyObject *__pyx_n_u_main;
                static PyObject *__pyx_n_s_math;
                static PyObject *__pyx_n_s_max;
                static PyObject *__pyx_kp_u_max_abs_line_1531;
                static PyObject *__pyx_kp_u_max_pos_line_513;
                static PyObject *__pyx_n_s_min;
                static PyObject *__pyx_kp_u_min_neg_line_504;
                static PyObject *__pyx_n_s_name;
                static PyObject *__pyx_n_s_nbar3;
                static PyObject *__pyx_n_s_ninf3;
                static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
                static PyObject *__pyx_n_s_norm;
                static PyObject *__pyx_kp_u_norm_line_1511;
                static PyObject *__pyx_kp_u_norm_sum_of_squares_of_coordina;
                static PyObject *__pyx_n_s_numbers;
                static PyObject *__pyx_n_s_obj;
                static PyObject *__pyx_n_s_odd;
                static PyObject *__pyx_kp_u_odd_line_1446;
                static PyObject *__pyx_n_s_other;
                static PyObject *__pyx_n_s_outer_pow;
                static PyObject *__pyx_kp_u_outer_pow_line_1567;
                static PyObject *__pyx_n_s_p;
                static PyObject *__pyx_n_s_pi;
                static PyObject *__pyx_n_s_pow;
                static PyObject *__pyx_kp_u_pow_line_1543;
                static PyObject *__pyx_n_s_pure;
                static PyObject *__pyx_kp_u_pure_line_1426;
                static PyObject *__pyx_n_s_pyx_vtable;
                static PyObject *__pyx_n_s_q;
                static PyObject *__pyx_n_s_quad;
                static PyObject *__pyx_kp_u_quad_line_1500;
                static PyObject *__pyx_kp_u_random_clifford_line_1864;
                static PyObject *__pyx_n_s_range;
                static PyObject *__pyx_kp_u_real_line_1404;
                static PyObject *__pyx_n_s_reduce;
                static PyObject *__pyx_n_s_reduce_cython;
                static PyObject *__pyx_n_s_reduce_ex;
                static PyObject *__pyx_n_s_reverse;
                static PyObject *__pyx_kp_u_reverse_line_1470;
                static PyObject *__pyx_n_s_rhs;
                static PyObject *__pyx_n_s_scalar;
                static PyObject *__pyx_n_s_scalar_epsilon;
                static PyObject *__pyx_kp_u_scalar_line_1393;
                static PyObject *__pyx_n_s_send;
                static PyObject *__pyx_n_s_setstate;
                static PyObject *__pyx_n_s_setstate_cython;
                static PyObject *__pyx_n_s_sin;
                static PyObject *__pyx_kp_u_sin_line_1728;
                static PyObject *__pyx_n_s_sinh;
                static PyObject *__pyx_kp_u_sinh_line_1768;
                static PyObject *__pyx_n_s_sqrt;
                static PyObject *__pyx_kp_u_sqrt_line_1591;
                static PyObject *__pyx_n_s_tan;
                static PyObject *__pyx_kp_u_tan_line_1801;
                static PyObject *__pyx_n_s_tanh;
                static PyObject *__pyx_kp_u_tanh_line_1835;
                static PyObject *__pyx_n_s_tau;
                static PyObject *__pyx_n_s_test;
                static PyObject *__pyx_n_s_test_2;
                static PyObject *__pyx_n_s_testmod;
                static PyObject *__pyx_n_s_threshold;
                static PyObject *__pyx_n_s_throw;
                static PyObject *__pyx_kp_u_to_frame;
                static PyObject *__pyx_n_s_tol;
                static PyObject *__pyx_kp_u_using;
                static PyObject *__pyx_kp_u_using_invalid;
                static PyObject *__pyx_kp_u_utf_8;
                static PyObject *__pyx_kp_u_value;
                static PyObject *__pyx_n_s_version;
                static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_pf_8PyClical_9index_set_copy(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static int __pyx_pf_8PyClical_9index_set_2__cinit__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static void __pyx_pf_8PyClical_9index_set_4__dealloc__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_6__richcmp__(struct __pyx_obj_8PyClical_index_set *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op); /* proto */
static int __pyx_pf_8PyClical_9index_set_8__setitem__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_10__getitem__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_idx); /* proto */
static int __pyx_pf_8PyClical_9index_set_12__contains__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_idx); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_14__iter__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_17__invert__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_19__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_21__ixor__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_23__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_25__iand__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_27__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_29__ior__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_31count(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_33count_neg(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_35count_pos(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_37min(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_39max(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_41hash_fn(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_43sign_of_mult(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_45sign_of_square(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_47__repr__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_49__str__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_51__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_index_set *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_9index_set_53__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_index_set *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8PyClical_index_set_hidden_doctests(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8PyClical_2compare(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_4min_neg(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_6max_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_copy(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static int __pyx_pf_8PyClical_8clifford_2__cinit__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_ixt); /* proto */
static void __pyx_pf_8PyClical_8clifford_4__dealloc__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static int __pyx_pf_8PyClical_8clifford_6__contains__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_8__iter__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_10reframe(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_ixt); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_12__richcmp__(struct __pyx_obj_8PyClical_clifford *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_14__getitem__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_ixt); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_16__neg__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_18__pos__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_20__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_22__iadd__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_24__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_26__isub__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_28__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_30__imul__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_32__mod__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_34__imod__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_36__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_38__iand__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_40__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_42__ixor__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_44__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
static PyObject *__pyx_pf_8PyClical_8clifford_46__idiv__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
#endif
static PyObject *__pyx_pf_8PyClical_8clifford_48inv(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_50__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_52__ior__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_54__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v_m, CYTHON_UNUSED PyObject *__pyx_v_dummy); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_56pow(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_58outer_pow(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_60__call__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_grade); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_62scalar(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_64pure(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_66even(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_68odd(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_70vector_part(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_frm); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_72involute(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_74reverse(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_76conj(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_78quad(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_80norm(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_82abs(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_84max_abs(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_86truncated(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_limit); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_88isinf(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_90isnan(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_92frame(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_94__repr__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_96__str__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_98__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_100__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8PyClical_8clifford_hidden_doctests(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_8PyClical_10error_squared_tol(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_12error_squared(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_threshold); /* proto */
static PyObject *__pyx_pf_8PyClical_14approx_equal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_threshold, PyObject *__pyx_v_tol); /* proto */
static PyObject *__pyx_pf_8PyClical_16inv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_18scalar(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_20real(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_22imag(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_24pure(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_26even(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_28odd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_30involute(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_32reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_34conj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_36quad(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_38norm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_40abs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_42max_abs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_44pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_8PyClical_46outer_pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_m); /* proto */
static PyObject *__pyx_pf_8PyClical_48complexifier(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_50sqrt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_52exp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_54log(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_56cos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_58acos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_60cosh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_62acosh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_64sin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_66asin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_68sinh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_70asinh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_72tan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_74atan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_76tanh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_78atanh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_8PyClical_80random_clifford(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8PyClical_index_set *__pyx_v_ixt, PyObject *__pyx_v_fill); /* proto */
static PyObject *__pyx_pf_8PyClical_82cga3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_84cga3std(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_86agc3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_88e(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_8PyClical_90istpq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p, PyObject *__pyx_v_q); /* proto */
static PyObject *__pyx_pf_8PyClical_92_test(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_tp_new_8PyClical_index_set(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8PyClical_clifford(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8PyClical___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_4_0;
static PyObject *__pyx_float_8_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__23;
/* Late includes */

/* "PyClical.pyx":40
 * cdef class index_set
 * 
 * cdef inline IndexSet toIndexSet(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Return the C++ IndexSet instance wrapped by index_set(obj).
 */

static CYTHON_INLINE IndexSet __pyx_f_8PyClical_toIndexSet(PyObject *__pyx_v_obj) {
  IndexSet __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("toIndexSet", 0);

  /* "PyClical.pyx":44
 *     Return the C++ IndexSet instance wrapped by index_set(obj).
 *     """
 *     return index_set(obj).instance[0]             # <<<<<<<<<<<<<<
 * 
 * cdef class index_set:
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_index_set), __pyx_v_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = (((struct __pyx_obj_8PyClical_index_set *)__pyx_t_1)->instance[0]);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":40
 * cdef class index_set
 * 
 * cdef inline IndexSet toIndexSet(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Return the C++ IndexSet instance wrapped by index_set(obj).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("PyClical.toIndexSet", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":52
 *     cdef IndexSet *instance # Wrapped instance of C++ class IndexSet.
 * 
 *     cdef inline wrap(index_set self, IndexSet other):             # <<<<<<<<<<<<<<
 *         """
 *         Wrap an instance of the C++ class IndexSet.
 */

static CYTHON_INLINE PyObject *__pyx_f_8PyClical_9index_set_wrap(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, IndexSet __pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wrap", 0);

  /* "PyClical.pyx":56
 *         Wrap an instance of the C++ class IndexSet.
 *         """
 *         self.instance[0] = other             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  (__pyx_v_self->instance[0]) = __pyx_v_other;

  /* "PyClical.pyx":57
 *         """
 *         self.instance[0] = other
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef inline IndexSet unwrap(index_set self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "PyClical.pyx":52
 *     cdef IndexSet *instance # Wrapped instance of C++ class IndexSet.
 * 
 *     cdef inline wrap(index_set self, IndexSet other):             # <<<<<<<<<<<<<<
 *         """
 *         Wrap an instance of the C++ class IndexSet.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":59
 *         return self
 * 
 *     cdef inline IndexSet unwrap(index_set self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the wrapped C++ IndexSet instance.
 */

static CYTHON_INLINE IndexSet __pyx_f_8PyClical_9index_set_unwrap(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  IndexSet __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unwrap", 0);

  /* "PyClical.pyx":63
 *         Return the wrapped C++ IndexSet instance.
 *         """
 *         return self.instance[0]             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy(index_set self):
 */
  __pyx_r = (__pyx_v_self->instance[0]);
  goto __pyx_L0;

  /* "PyClical.pyx":59
 *         return self
 * 
 *     cdef inline IndexSet unwrap(index_set self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the wrapped C++ IndexSet instance.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":65
 *         return self.instance[0]
 * 
 *     cpdef copy(index_set self):             # <<<<<<<<<<<<<<
 *         """
 *         Copy this index_set object.
 */

static PyObject *__pyx_pw_8PyClical_9index_set_1copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_8PyClical_9index_set_copy(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8PyClical_9index_set_1copy)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "PyClical.pyx":72
 *         {1}
 *         """
 *         return index_set(self)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, other = 0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_index_set), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":65
 *         return self.instance[0]
 * 
 *     cpdef copy(index_set self):             # <<<<<<<<<<<<<<
 *         """
 *         Copy this index_set object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyClical.index_set.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_1copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_copy[] = "\n        Copy this index_set object.\n\n        >>> s=index_set(1); t=s.copy(); print(t)\n        {1}\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_1copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_copy(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_copy(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8PyClical_9index_set_copy(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":74
 *         return index_set(self)
 * 
 *     def __cinit__(self, other = 0):             # <<<<<<<<<<<<<<
 *         """
 *         Construct an object of type index_set.
 */

/* Python wrapper */
static int __pyx_pw_8PyClical_9index_set_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8PyClical_9index_set_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_other = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 74, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_other = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 74, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyClical.index_set.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8PyClical_9index_set_2__cinit__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8PyClical_9index_set_2__cinit__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_v_error_msg_prefix = NULL;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_bother = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  IndexSet *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  char *__pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "PyClical.pyx":93
 *         {}
 *         """
 *         error_msg_prefix = "Cannot initialize index_set object from"             # <<<<<<<<<<<<<<
 *         if   isinstance(other, index_set):
 *             self.instance = new IndexSet((<index_set>other).unwrap())
 */
  __Pyx_INCREF(__pyx_kp_u_Cannot_initialize_index_set_obje);
  __pyx_v_error_msg_prefix = __pyx_kp_u_Cannot_initialize_index_set_obje;

  /* "PyClical.pyx":94
 *         """
 *         error_msg_prefix = "Cannot initialize index_set object from"
 *         if   isinstance(other, index_set):             # <<<<<<<<<<<<<<
 *             self.instance = new IndexSet((<index_set>other).unwrap())
 *         elif isinstance(other, numbers.Integral):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8PyClical_index_set); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyClical.pyx":95
 *         error_msg_prefix = "Cannot initialize index_set object from"
 *         if   isinstance(other, index_set):
 *             self.instance = new IndexSet((<index_set>other).unwrap())             # <<<<<<<<<<<<<<
 *         elif isinstance(other, numbers.Integral):
 *             self.instance = new IndexSet(<int>other)
 */
    try {
      __pyx_t_3 = new IndexSet(__pyx_f_8PyClical_9index_set_unwrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_other)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 95, __pyx_L1_error)
    }
    __pyx_v_self->instance = __pyx_t_3;

    /* "PyClical.pyx":94
 *         """
 *         error_msg_prefix = "Cannot initialize index_set object from"
 *         if   isinstance(other, index_set):             # <<<<<<<<<<<<<<
 *             self.instance = new IndexSet((<index_set>other).unwrap())
 *         elif isinstance(other, numbers.Integral):
 */
    goto __pyx_L3;
  }

  /* "PyClical.pyx":96
 *         if   isinstance(other, index_set):
 *             self.instance = new IndexSet((<index_set>other).unwrap())
 *         elif isinstance(other, numbers.Integral):             # <<<<<<<<<<<<<<
 *             self.instance = new IndexSet(<int>other)
 *         elif isinstance(other, (set, frozenset)):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_numbers); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Integral); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_other, __pyx_t_5); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "PyClical.pyx":97
 *             self.instance = new IndexSet((<index_set>other).unwrap())
 *         elif isinstance(other, numbers.Integral):
 *             self.instance = new IndexSet(<int>other)             # <<<<<<<<<<<<<<
 *         elif isinstance(other, (set, frozenset)):
 *             try:
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_other); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L1_error)
    try {
      __pyx_t_3 = new IndexSet(((int)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 97, __pyx_L1_error)
    }
    __pyx_v_self->instance = __pyx_t_3;

    /* "PyClical.pyx":96
 *         if   isinstance(other, index_set):
 *             self.instance = new IndexSet((<index_set>other).unwrap())
 *         elif isinstance(other, numbers.Integral):             # <<<<<<<<<<<<<<
 *             self.instance = new IndexSet(<int>other)
 *         elif isinstance(other, (set, frozenset)):
 */
    goto __pyx_L3;
  }

  /* "PyClical.pyx":98
 *         elif isinstance(other, numbers.Integral):
 *             self.instance = new IndexSet(<int>other)
 *         elif isinstance(other, (set, frozenset)):             # <<<<<<<<<<<<<<
 *             try:
 *                 self.instance = new IndexSet()
 */
  __pyx_t_2 = PySet_Check(__pyx_v_other); 
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = PyFrozenSet_Check(__pyx_v_other); 
  __pyx_t_2 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "PyClical.pyx":99
 *             self.instance = new IndexSet(<int>other)
 *         elif isinstance(other, (set, frozenset)):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.instance = new IndexSet()
 *                 for idx in other:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "PyClical.pyx":100
 *         elif isinstance(other, (set, frozenset)):
 *             try:
 *                 self.instance = new IndexSet()             # <<<<<<<<<<<<<<
 *                 for idx in other:
 *                     self[idx] = True
 */
        __pyx_t_3 = new IndexSet(); 
        __pyx_v_self->instance = __pyx_t_3;

        /* "PyClical.pyx":101
 *             try:
 *                 self.instance = new IndexSet()
 *                 for idx in other:             # <<<<<<<<<<<<<<
 *                     self[idx] = True
 *             except IndexError:
 */
        if (likely(PyList_CheckExact(__pyx_v_other)) || PyTuple_CheckExact(__pyx_v_other)) {
          __pyx_t_5 = __pyx_v_other; __Pyx_INCREF(__pyx_t_5); __pyx_t_11 = 0;
          __pyx_t_12 = NULL;
        } else {
          __pyx_t_11 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_other); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 101, __pyx_L6_error)
        }
        for (;;) {
          if (likely(!__pyx_t_12)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 101, __pyx_L6_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_11); __Pyx_INCREF(__pyx_t_4); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 101, __pyx_L6_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L6_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_12(__pyx_t_5);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 101, __pyx_L6_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "PyClical.pyx":102
 *                 self.instance = new IndexSet()
 *                 for idx in other:
 *                     self[idx] = True             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 raise IndexError(error_msg_prefix + " invalid " + repr(other) + ".")
 */
          if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_v_idx, Py_True) < 0)) __PYX_ERR(0, 102, __pyx_L6_error)

          /* "PyClical.pyx":101
 *             try:
 *                 self.instance = new IndexSet()
 *                 for idx in other:             # <<<<<<<<<<<<<<
 *                     self[idx] = True
 *             except IndexError:
 */
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "PyClical.pyx":99
 *             self.instance = new IndexSet(<int>other)
 *         elif isinstance(other, (set, frozenset)):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.instance = new IndexSet()
 *                 for idx in other:
 */
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L11_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyClical.pyx":103
 *                 for idx in other:
 *                     self[idx] = True
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 raise IndexError(error_msg_prefix + " invalid " + repr(other) + ".")
 *             except (RuntimeError, TypeError):
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("PyClical.index_set.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_13) < 0) __PYX_ERR(0, 103, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_13);

        /* "PyClical.pyx":104
 *                     self[idx] = True
 *             except IndexError:
 *                 raise IndexError(error_msg_prefix + " invalid " + repr(other) + ".")             # <<<<<<<<<<<<<<
 *             except (RuntimeError, TypeError):
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")
 */
        __pyx_t_14 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u_invalid); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 104, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = PyObject_Repr(__pyx_v_other); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 104, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = PyNumber_Add(__pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 104, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = PyNumber_Add(__pyx_t_16, __pyx_kp_u_); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 104, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 104, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_Raise(__pyx_t_16, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __PYX_ERR(0, 104, __pyx_L8_except_error)
      }

      /* "PyClical.pyx":105
 *             except IndexError:
 *                 raise IndexError(error_msg_prefix + " invalid " + repr(other) + ".")
 *             except (RuntimeError, TypeError):             # <<<<<<<<<<<<<<
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")
 *         elif isinstance(other, str):
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("PyClical.index_set.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(0, 105, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_5);

        /* "PyClical.pyx":106
 *                 raise IndexError(error_msg_prefix + " invalid " + repr(other) + ".")
 *             except (RuntimeError, TypeError):
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")             # <<<<<<<<<<<<<<
 *         elif isinstance(other, str):
 *             try:
 */
        __pyx_t_16 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u_invalid); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 106, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_15 = PyObject_Repr(__pyx_v_other); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 106, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_14 = PyNumber_Add(__pyx_t_16, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 106, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = PyNumber_Add(__pyx_t_14, __pyx_kp_u_); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 106, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 106, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_Raise(__pyx_t_14, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __PYX_ERR(0, 106, __pyx_L8_except_error)
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "PyClical.pyx":99
 *             self.instance = new IndexSet(<int>other)
 *         elif isinstance(other, (set, frozenset)):
 *             try:             # <<<<<<<<<<<<<<
 *                 self.instance = new IndexSet()
 *                 for idx in other:
 */
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L11_try_end:;
    }

    /* "PyClical.pyx":98
 *         elif isinstance(other, numbers.Integral):
 *             self.instance = new IndexSet(<int>other)
 *         elif isinstance(other, (set, frozenset)):             # <<<<<<<<<<<<<<
 *             try:
 *                 self.instance = new IndexSet()
 */
    goto __pyx_L3;
  }

  /* "PyClical.pyx":107
 *             except (RuntimeError, TypeError):
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")
 *         elif isinstance(other, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 bother = other.encode("UTF-8")
 */
  __pyx_t_2 = PyUnicode_Check(__pyx_v_other); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "PyClical.pyx":108
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")
 *         elif isinstance(other, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 bother = other.encode("UTF-8")
 *                 self.instance = new IndexSet(<char *>bother)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_8);
      /*try:*/ {

        /* "PyClical.pyx":109
 *         elif isinstance(other, str):
 *             try:
 *                 bother = other.encode("UTF-8")             # <<<<<<<<<<<<<<
 *                 self.instance = new IndexSet(<char *>bother)
 *             except RuntimeError:
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 109, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_5 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_13, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 109, __pyx_L18_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_bother = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "PyClical.pyx":110
 *             try:
 *                 bother = other.encode("UTF-8")
 *                 self.instance = new IndexSet(<char *>bother)             # <<<<<<<<<<<<<<
 *             except RuntimeError:
 *                 raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")
 */
        __pyx_t_17 = __Pyx_PyObject_AsWritableString(__pyx_v_bother); if (unlikely((!__pyx_t_17) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L18_error)
        try {
          __pyx_t_3 = new IndexSet(((char *)__pyx_t_17));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 110, __pyx_L18_error)
        }
        __pyx_v_self->instance = __pyx_t_3;

        /* "PyClical.pyx":108
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")
 *         elif isinstance(other, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 bother = other.encode("UTF-8")
 *                 self.instance = new IndexSet(<char *>bother)
 */
      }
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L23_try_end;
      __pyx_L18_error:;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "PyClical.pyx":111
 *                 bother = other.encode("UTF-8")
 *                 self.instance = new IndexSet(<char *>bother)
 *             except RuntimeError:             # <<<<<<<<<<<<<<
 *                 raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")
 *         else:
 */
      __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
      if (__pyx_t_6) {
        __Pyx_AddTraceback("PyClical.index_set.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_13) < 0) __PYX_ERR(0, 111, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_13);

        /* "PyClical.pyx":112
 *                 self.instance = new IndexSet(<char *>bother)
 *             except RuntimeError:
 *                 raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 */
        __pyx_t_14 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u_invalid_string); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 112, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_15 = PyObject_Repr(__pyx_v_other); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 112, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_16 = PyNumber_Add(__pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 112, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = PyNumber_Add(__pyx_t_16, __pyx_kp_u_); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 112, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 112, __pyx_L20_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_Raise(__pyx_t_16, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __PYX_ERR(0, 112, __pyx_L20_except_error)
      }
      goto __pyx_L20_except_error;
      __pyx_L20_except_error:;

      /* "PyClical.pyx":108
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")
 *         elif isinstance(other, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 bother = other.encode("UTF-8")
 *                 self.instance = new IndexSet(<char *>bother)
 */
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      goto __pyx_L1_error;
      __pyx_L23_try_end:;
    }

    /* "PyClical.pyx":107
 *             except (RuntimeError, TypeError):
 *                 raise ValueError(error_msg_prefix + " invalid " + repr(other) + ".")
 *         elif isinstance(other, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 bother = other.encode("UTF-8")
 */
    goto __pyx_L3;
  }

  /* "PyClical.pyx":114
 *                 raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")
 *         else:
 *             raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u__2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_other))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_t_13, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_t_5, __pyx_kp_u_); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 114, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "PyClical.pyx":74
 *         return index_set(self)
 * 
 *     def __cinit__(self, other = 0):             # <<<<<<<<<<<<<<
 *         """
 *         Construct an object of type index_set.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("PyClical.index_set.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error_msg_prefix);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_bother);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":116
 *             raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clean up by deallocating the instance of C++ class IndexSet.
 */

/* Python wrapper */
static void __pyx_pw_8PyClical_9index_set_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8PyClical_9index_set_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8PyClical_9index_set_4__dealloc__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8PyClical_9index_set_4__dealloc__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "PyClical.pyx":120
 *         Clean up by deallocating the instance of C++ class IndexSet.
 *         """
 *         del self.instance             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(lhs, rhs, int op):
 */
  delete __pyx_v_self->instance;

  /* "PyClical.pyx":116
 *             raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clean up by deallocating the instance of C++ class IndexSet.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "PyClical.pyx":122
 *         del self.instance
 * 
 *     def __richcmp__(lhs, rhs, int op):             # <<<<<<<<<<<<<<
 *         """
 *         Compare two objects of class index_set.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_7__richcmp__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_8PyClical_9index_set_7__richcmp__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_6__richcmp__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_6__richcmp__(struct __pyx_obj_8PyClical_index_set *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op) {
  PyObject *__pyx_v_eq = NULL;
  PyObject *__pyx_v_lt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "PyClical.pyx":143
 *         False
 *         """
 *         if (lhs is None) or (rhs is None):             # <<<<<<<<<<<<<<
 *             eq = bool(lhs is rhs)
 *             if op == 2: # ==
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_lhs) == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_rhs == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyClical.pyx":144
 *         """
 *         if (lhs is None) or (rhs is None):
 *             eq = bool(lhs is rhs)             # <<<<<<<<<<<<<<
 *             if op == 2: # ==
 *                 return eq
 */
    __pyx_t_1 = (((PyObject *)__pyx_v_lhs) == __pyx_v_rhs);
    __pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_eq = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "PyClical.pyx":145
 *         if (lhs is None) or (rhs is None):
 *             eq = bool(lhs is rhs)
 *             if op == 2: # ==             # <<<<<<<<<<<<<<
 *                 return eq
 *             elif op == 3: # !=
 */
    switch (__pyx_v_op) {
      case 2:

      /* "PyClical.pyx":146
 *             eq = bool(lhs is rhs)
 *             if op == 2: # ==
 *                 return eq             # <<<<<<<<<<<<<<
 *             elif op == 3: # !=
 *                 return not eq
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_eq);
      __pyx_r = __pyx_v_eq;
      goto __pyx_L0;

      /* "PyClical.pyx":145
 *         if (lhs is None) or (rhs is None):
 *             eq = bool(lhs is rhs)
 *             if op == 2: # ==             # <<<<<<<<<<<<<<
 *                 return eq
 *             elif op == 3: # !=
 */
      break;
      case 3:

      /* "PyClical.pyx":148
 *                 return eq
 *             elif op == 3: # !=
 *                 return not eq             # <<<<<<<<<<<<<<
 *             else:
 *                 if op == 0: # <
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_eq); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 148, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "PyClical.pyx":147
 *             if op == 2: # ==
 *                 return eq
 *             elif op == 3: # !=             # <<<<<<<<<<<<<<
 *                 return not eq
 *             else:
 */
      break;
      default:

      /* "PyClical.pyx":150
 *                 return not eq
 *             else:
 *                 if op == 0: # <             # <<<<<<<<<<<<<<
 *                     return False
 *                 elif op == 1: # <=
 */
      switch (__pyx_v_op) {
        case 0:

        /* "PyClical.pyx":151
 *             else:
 *                 if op == 0: # <
 *                     return False             # <<<<<<<<<<<<<<
 *                 elif op == 1: # <=
 *                     return eq
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L0;

        /* "PyClical.pyx":150
 *                 return not eq
 *             else:
 *                 if op == 0: # <             # <<<<<<<<<<<<<<
 *                     return False
 *                 elif op == 1: # <=
 */
        break;
        case 1:

        /* "PyClical.pyx":153
 *                     return False
 *                 elif op == 1: # <=
 *                     return eq             # <<<<<<<<<<<<<<
 *                 elif op == 4: # >
 *                     return False
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_eq);
        __pyx_r = __pyx_v_eq;
        goto __pyx_L0;

        /* "PyClical.pyx":152
 *                 if op == 0: # <
 *                     return False
 *                 elif op == 1: # <=             # <<<<<<<<<<<<<<
 *                     return eq
 *                 elif op == 4: # >
 */
        break;
        case 4:

        /* "PyClical.pyx":155
 *                     return eq
 *                 elif op == 4: # >
 *                     return False             # <<<<<<<<<<<<<<
 *                 elif op == 5: # >=
 *                     return eq
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        goto __pyx_L0;

        /* "PyClical.pyx":154
 *                 elif op == 1: # <=
 *                     return eq
 *                 elif op == 4: # >             # <<<<<<<<<<<<<<
 *                     return False
 *                 elif op == 5: # >=
 */
        break;
        case 5:

        /* "PyClical.pyx":157
 *                     return False
 *                 elif op == 5: # >=
 *                     return eq             # <<<<<<<<<<<<<<
 *                 else:
 *                     return NotImplemented
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_eq);
        __pyx_r = __pyx_v_eq;
        goto __pyx_L0;

        /* "PyClical.pyx":156
 *                 elif op == 4: # >
 *                     return False
 *                 elif op == 5: # >=             # <<<<<<<<<<<<<<
 *                     return eq
 *                 else:
 */
        break;
        default:

        /* "PyClical.pyx":159
 *                     return eq
 *                 else:
 *                     return NotImplemented             # <<<<<<<<<<<<<<
 *         else:
 *             eq = bool( toIndexSet(lhs) == toIndexSet(rhs) )
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_builtin_NotImplemented);
        __pyx_r = __pyx_builtin_NotImplemented;
        goto __pyx_L0;
        break;
      }
      break;
    }

    /* "PyClical.pyx":143
 *         False
 *         """
 *         if (lhs is None) or (rhs is None):             # <<<<<<<<<<<<<<
 *             eq = bool(lhs is rhs)
 *             if op == 2: # ==
 */
  }

  /* "PyClical.pyx":161
 *                     return NotImplemented
 *         else:
 *             eq = bool( toIndexSet(lhs) == toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 *             if op == 2: # ==
 *                 return eq
 */
  /*else*/ {
    __pyx_t_1 = (__pyx_f_8PyClical_toIndexSet(((PyObject *)__pyx_v_lhs)) == __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs));
    __pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_eq = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "PyClical.pyx":162
 *         else:
 *             eq = bool( toIndexSet(lhs) == toIndexSet(rhs) )
 *             if op == 2: # ==             # <<<<<<<<<<<<<<
 *                 return eq
 *             elif op == 3: # !=
 */
    switch (__pyx_v_op) {
      case 2:

      /* "PyClical.pyx":163
 *             eq = bool( toIndexSet(lhs) == toIndexSet(rhs) )
 *             if op == 2: # ==
 *                 return eq             # <<<<<<<<<<<<<<
 *             elif op == 3: # !=
 *                 return not eq
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_eq);
      __pyx_r = __pyx_v_eq;
      goto __pyx_L0;

      /* "PyClical.pyx":162
 *         else:
 *             eq = bool( toIndexSet(lhs) == toIndexSet(rhs) )
 *             if op == 2: # ==             # <<<<<<<<<<<<<<
 *                 return eq
 *             elif op == 3: # !=
 */
      break;
      case 3:

      /* "PyClical.pyx":165
 *                 return eq
 *             elif op == 3: # !=
 *                 return not eq             # <<<<<<<<<<<<<<
 *             else:
 *                 lt = bool( toIndexSet(lhs) < toIndexSet(rhs) )
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_eq); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 165, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "PyClical.pyx":164
 *             if op == 2: # ==
 *                 return eq
 *             elif op == 3: # !=             # <<<<<<<<<<<<<<
 *                 return not eq
 *             else:
 */
      break;
      default:

      /* "PyClical.pyx":167
 *                 return not eq
 *             else:
 *                 lt = bool( toIndexSet(lhs) < toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 *                 if op == 0: # <
 *                     return lt
 */
      __pyx_t_1 = (__pyx_f_8PyClical_toIndexSet(((PyObject *)__pyx_v_lhs)) < __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs));
      __pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_lt = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "PyClical.pyx":168
 *             else:
 *                 lt = bool( toIndexSet(lhs) < toIndexSet(rhs) )
 *                 if op == 0: # <             # <<<<<<<<<<<<<<
 *                     return lt
 *                 elif op == 1: # <=
 */
      switch (__pyx_v_op) {
        case 0:

        /* "PyClical.pyx":169
 *                 lt = bool( toIndexSet(lhs) < toIndexSet(rhs) )
 *                 if op == 0: # <
 *                     return lt             # <<<<<<<<<<<<<<
 *                 elif op == 1: # <=
 *                     return lt or eq
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_v_lt);
        __pyx_r = __pyx_v_lt;
        goto __pyx_L0;

        /* "PyClical.pyx":168
 *             else:
 *                 lt = bool( toIndexSet(lhs) < toIndexSet(rhs) )
 *                 if op == 0: # <             # <<<<<<<<<<<<<<
 *                     return lt
 *                 elif op == 1: # <=
 */
        break;
        case 1:

        /* "PyClical.pyx":171
 *                     return lt
 *                 elif op == 1: # <=
 *                     return lt or eq             # <<<<<<<<<<<<<<
 *                 elif op == 4: # >
 *                     return not (lt or eq)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_lt); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 171, __pyx_L1_error)
        if (!__pyx_t_1) {
        } else {
          __Pyx_INCREF(__pyx_v_lt);
          __pyx_t_4 = __pyx_v_lt;
          goto __pyx_L6_bool_binop_done;
        }
        __Pyx_INCREF(__pyx_v_eq);
        __pyx_t_4 = __pyx_v_eq;
        __pyx_L6_bool_binop_done:;
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        goto __pyx_L0;

        /* "PyClical.pyx":170
 *                 if op == 0: # <
 *                     return lt
 *                 elif op == 1: # <=             # <<<<<<<<<<<<<<
 *                     return lt or eq
 *                 elif op == 4: # >
 */
        break;
        case 4:

        /* "PyClical.pyx":173
 *                     return lt or eq
 *                 elif op == 4: # >
 *                     return not (lt or eq)             # <<<<<<<<<<<<<<
 *                 elif op == 5: # >=
 *                     return not lt
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_lt); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 173, __pyx_L1_error)
        if (!__pyx_t_2) {
        } else {
          __pyx_t_1 = __pyx_t_2;
          goto __pyx_L8_bool_binop_done;
        }
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_eq); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 173, __pyx_L1_error)
        __pyx_t_1 = __pyx_t_2;
        __pyx_L8_bool_binop_done:;
        __pyx_t_4 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        goto __pyx_L0;

        /* "PyClical.pyx":172
 *                 elif op == 1: # <=
 *                     return lt or eq
 *                 elif op == 4: # >             # <<<<<<<<<<<<<<
 *                     return not (lt or eq)
 *                 elif op == 5: # >=
 */
        break;
        case 5:

        /* "PyClical.pyx":175
 *                     return not (lt or eq)
 *                 elif op == 5: # >=
 *                     return not lt             # <<<<<<<<<<<<<<
 *                 else:
 *                     return NotImplemented
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_lt); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
        __pyx_t_4 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        goto __pyx_L0;

        /* "PyClical.pyx":174
 *                 elif op == 4: # >
 *                     return not (lt or eq)
 *                 elif op == 5: # >=             # <<<<<<<<<<<<<<
 *                     return not lt
 *                 else:
 */
        break;
        default:

        /* "PyClical.pyx":177
 *                     return not lt
 *                 else:
 *                     return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, idx, val):
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_builtin_NotImplemented);
        __pyx_r = __pyx_builtin_NotImplemented;
        goto __pyx_L0;
        break;
      }
      break;
    }
  }

  /* "PyClical.pyx":122
 *         del self.instance
 * 
 *     def __richcmp__(lhs, rhs, int op):             # <<<<<<<<<<<<<<
 *         """
 *         Compare two objects of class index_set.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyClical.index_set.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_eq);
  __Pyx_XDECREF(__pyx_v_lt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":179
 *                     return NotImplemented
 * 
 *     def __setitem__(self, idx, val):             # <<<<<<<<<<<<<<
 *         """
 *         Set the value of an index_set object at index idx to value val.
 */

/* Python wrapper */
static int __pyx_pw_8PyClical_9index_set_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_val); /*proto*/
static char __pyx_doc_8PyClical_9index_set_8__setitem__[] = "\n        Set the value of an index_set object at index idx to value val.\n\n        >>> s=index_set({1}); s[2] = True; print(s)\n        {1,2}\n        >>> s=index_set({1,2}); s[1] = False; print(s)\n        {2}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_8__setitem__;
#endif
static int __pyx_pw_8PyClical_9index_set_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_8__setitem__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v_idx), ((PyObject *)__pyx_v_val));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8PyClical_9index_set_8__setitem__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_idx, PyObject *__pyx_v_val) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "PyClical.pyx":188
 *         {2}
 *         """
 *         self.instance.set(idx, val)             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_idx); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_val); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L1_error)
  try {
    __pyx_v_self->instance->set(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 188, __pyx_L1_error)
  }

  /* "PyClical.pyx":189
 *         """
 *         self.instance.set(idx, val)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, idx):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":179
 *                     return NotImplemented
 * 
 *     def __setitem__(self, idx, val):             # <<<<<<<<<<<<<<
 *         """
 *         Set the value of an index_set object at index idx to value val.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PyClical.index_set.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":191
 *         return
 * 
 *     def __getitem__(self, idx):             # <<<<<<<<<<<<<<
 *         """
 *         Get the value of an index_set object at an index.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx); /*proto*/
static char __pyx_doc_8PyClical_9index_set_10__getitem__[] = "\n        Get the value of an index_set object at an index.\n\n        >>> index_set({1})[1]\n        True\n        >>> index_set({1})[2]\n        False\n        >>> index_set({2})[-1]\n        False\n        >>> index_set({2})[1]\n        False\n        >>> index_set({2})[2]\n        True\n        >>> index_set({2})[33]\n        False\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_10__getitem__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_10__getitem__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_10__getitem__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "PyClical.pyx":208
 *         False
 *         """
 *         return self.instance.getitem(idx)             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_idx); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->instance->operator[](__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":191
 *         return
 * 
 *     def __getitem__(self, idx):             # <<<<<<<<<<<<<<
 *         """
 *         Get the value of an index_set object at an index.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyClical.index_set.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":210
 *         return self.instance.getitem(idx)
 * 
 *     def __contains__(self, idx):             # <<<<<<<<<<<<<<
 *         """
 *         Check that an index_set object contains the index idx: idx in self.
 */

/* Python wrapper */
static int __pyx_pw_8PyClical_9index_set_13__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx); /*proto*/
static char __pyx_doc_8PyClical_9index_set_12__contains__[] = "\n        Check that an index_set object contains the index idx: idx in self.\n\n        >>> 1 in index_set({1})\n        True\n        >>> 2 in index_set({1})\n        False\n        >>> -1 in index_set({2})\n        False\n        >>> 1 in index_set({2})\n        False\n        >>> 2 in index_set({2})\n        True\n        >>> 33 in index_set({2})\n        False\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_12__contains__;
#endif
static int __pyx_pw_8PyClical_9index_set_13__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_idx) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_12__contains__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8PyClical_9index_set_12__contains__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_idx) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);

  /* "PyClical.pyx":227
 *         False
 *         """
 *         return self.instance.getitem(idx)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_idx); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_r = __pyx_v_self->instance->operator[](__pyx_t_1);
  goto __pyx_L0;

  /* "PyClical.pyx":210
 *         return self.instance.getitem(idx)
 * 
 *     def __contains__(self, idx):             # <<<<<<<<<<<<<<
 *         """
 *         Check that an index_set object contains the index idx: idx in self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PyClical.index_set.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_8PyClical_9index_set_16generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "PyClical.pyx":229
 *         return self.instance.getitem(idx)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over the indices of an index_set.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_15__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8PyClical_9index_set_14__iter__[] = "\n        Iterate over the indices of an index_set.\n\n        >>> for i in index_set({-3,4,7}):print(i, end=\",\")\n        -3,4,7,\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_14__iter__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_15__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_14__iter__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_14__iter__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *)__pyx_tp_new_8PyClical___pyx_scope_struct____iter__(__pyx_ptype_8PyClical___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 229, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_8PyClical_9index_set_16generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_index_set___iter, __pyx_n_s_PyClical); if (unlikely(!gen)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("PyClical.index_set.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_8PyClical_9index_set_16generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *__pyx_cur_scope = ((struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 229, __pyx_L1_error)

  /* "PyClical.pyx":236
 *         -3,4,7,
 *         """
 *         for idx in range(self.min(), self.max()+1):             # <<<<<<<<<<<<<<
 *             if idx in self:
 *                 yield idx
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_max); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 236, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 236, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 236, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 236, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_idx);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_idx, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "PyClical.pyx":237
 *         """
 *         for idx in range(self.min(), self.max()+1):
 *             if idx in self:             # <<<<<<<<<<<<<<
 *                 yield idx
 * 
 */
    __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_cur_scope->__pyx_v_idx, ((PyObject *)__pyx_cur_scope->__pyx_v_self), Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 237, __pyx_L1_error)
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {

      /* "PyClical.pyx":238
 *         for idx in range(self.min(), self.max()+1):
 *             if idx in self:
 *                 yield idx             # <<<<<<<<<<<<<<
 * 
 *     def __invert__(self):
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_idx);
      __pyx_r = __pyx_cur_scope->__pyx_v_idx;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_6;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_6 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 238, __pyx_L1_error)

      /* "PyClical.pyx":237
 *         """
 *         for idx in range(self.min(), self.max()+1):
 *             if idx in self:             # <<<<<<<<<<<<<<
 *                 yield idx
 * 
 */
    }

    /* "PyClical.pyx":236
 *         -3,4,7,
 *         """
 *         for idx in range(self.min(), self.max()+1):             # <<<<<<<<<<<<<<
 *             if idx in self:
 *                 yield idx
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "PyClical.pyx":229
 *         return self.instance.getitem(idx)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Iterate over the indices of an index_set.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":240
 *                 yield idx
 * 
 *     def __invert__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set complement: not.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_18__invert__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8PyClical_9index_set_17__invert__[] = "\n        Set complement: not.\n\n        >>> print(~index_set({-16,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}))\n        {-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_17__invert__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_18__invert__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__invert__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_17__invert__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_17__invert__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__invert__", 0);

  /* "PyClical.pyx":247
 *         {-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32}
 *         """
 *         return index_set().wrap( self.instance.invert() )             # <<<<<<<<<<<<<<
 * 
 *     def __xor__(lhs, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_index_set)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8PyClical_9index_set_wrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_t_1), __pyx_v_self->instance->operator~()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":240
 *                 yield idx
 * 
 *     def __invert__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Set complement: not.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyClical.index_set.__invert__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":249
 *         return index_set().wrap( self.instance.invert() )
 * 
 *     def __xor__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Symmetric set difference: exclusive or.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_20__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_8PyClical_9index_set_19__xor__[] = "\n        Symmetric set difference: exclusive or.\n\n        >>> print(index_set({1}) ^ index_set({2}))\n        {1,2}\n        >>> print(index_set({1,2}) ^ index_set({2}))\n        {1}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_19__xor__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_20__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__xor__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_19__xor__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_19__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__xor__", 0);

  /* "PyClical.pyx":258
 *         {1}
 *         """
 *         return index_set().wrap( toIndexSet(lhs) ^ toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __ixor__(self, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_index_set)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8PyClical_9index_set_wrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_t_1), (__pyx_f_8PyClical_toIndexSet(__pyx_v_lhs) ^ __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":249
 *         return index_set().wrap( self.instance.invert() )
 * 
 *     def __xor__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Symmetric set difference: exclusive or.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyClical.index_set.__xor__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":260
 *         return index_set().wrap( toIndexSet(lhs) ^ toIndexSet(rhs) )
 * 
 *     def __ixor__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Symmetric set difference: exclusive or.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_22__ixor__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_8PyClical_9index_set_21__ixor__[] = "\n        Symmetric set difference: exclusive or.\n\n        >>> x = index_set({1}); x ^= index_set({2}); print(x)\n        {1,2}\n        >>> x = index_set({1,2}); x ^= index_set({2}); print(x)\n        {1}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_21__ixor__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_22__ixor__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ixor__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_21__ixor__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_21__ixor__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ixor__", 0);

  /* "PyClical.pyx":269
 *         {1}
 *         """
 *         return self.wrap( self.unwrap() ^ toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __and__(lhs, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8PyClical_9index_set_wrap(__pyx_v_self, (__pyx_f_8PyClical_9index_set_unwrap(__pyx_v_self) ^ __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":260
 *         return index_set().wrap( toIndexSet(lhs) ^ toIndexSet(rhs) )
 * 
 *     def __ixor__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Symmetric set difference: exclusive or.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.__ixor__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":271
 *         return self.wrap( self.unwrap() ^ toIndexSet(rhs) )
 * 
 *     def __and__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set intersection: and.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_24__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_8PyClical_9index_set_23__and__[] = "\n        Set intersection: and.\n\n        >>> print(index_set({1}) & index_set({2}))\n        {}\n        >>> print(index_set({1,2}) & index_set({2}))\n        {2}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_23__and__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_24__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_23__and__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_23__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__and__", 0);

  /* "PyClical.pyx":280
 *         {2}
 *         """
 *         return index_set().wrap( toIndexSet(lhs) & toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __iand__(self, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_index_set)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8PyClical_9index_set_wrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_t_1), (__pyx_f_8PyClical_toIndexSet(__pyx_v_lhs) & __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":271
 *         return self.wrap( self.unwrap() ^ toIndexSet(rhs) )
 * 
 *     def __and__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set intersection: and.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyClical.index_set.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":282
 *         return index_set().wrap( toIndexSet(lhs) & toIndexSet(rhs) )
 * 
 *     def __iand__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set intersection: and.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_26__iand__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_8PyClical_9index_set_25__iand__[] = "\n        Set intersection: and.\n\n        >>> x = index_set({1}); x &= index_set({2}); print(x)\n        {}\n        >>> x = index_set({1,2}); x &= index_set({2}); print(x)\n        {2}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_25__iand__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_26__iand__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iand__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_25__iand__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_25__iand__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iand__", 0);

  /* "PyClical.pyx":291
 *         {2}
 *         """
 *         return self.wrap( self.unwrap() & toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __or__(lhs, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8PyClical_9index_set_wrap(__pyx_v_self, (__pyx_f_8PyClical_9index_set_unwrap(__pyx_v_self) & __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":282
 *         return index_set().wrap( toIndexSet(lhs) & toIndexSet(rhs) )
 * 
 *     def __iand__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set intersection: and.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.__iand__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":293
 *         return self.wrap( self.unwrap() & toIndexSet(rhs) )
 * 
 *     def __or__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set union: or.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_28__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_8PyClical_9index_set_27__or__[] = "\n        Set union: or.\n\n        >>> print(index_set({1}) | index_set({2}))\n        {1,2}\n        >>> print(index_set({1,2}) | index_set({2}))\n        {1,2}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_27__or__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_28__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_27__or__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_27__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "PyClical.pyx":302
 *         {1,2}
 *         """
 *         return index_set().wrap( toIndexSet(lhs) | toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __ior__(self, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_index_set)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8PyClical_9index_set_wrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_t_1), (__pyx_f_8PyClical_toIndexSet(__pyx_v_lhs) | __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":293
 *         return self.wrap( self.unwrap() & toIndexSet(rhs) )
 * 
 *     def __or__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set union: or.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyClical.index_set.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":304
 *         return index_set().wrap( toIndexSet(lhs) | toIndexSet(rhs) )
 * 
 *     def __ior__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set union: or.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_30__ior__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_8PyClical_9index_set_29__ior__[] = "\n        Set union: or.\n\n        >>> x = index_set({1}); x |= index_set({2}); print(x)\n        {1,2}\n        >>> x = index_set({1,2}); x |= index_set({2}); print(x)\n        {1,2}\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_29__ior__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_30__ior__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ior__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_29__ior__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_29__ior__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ior__", 0);

  /* "PyClical.pyx":313
 *         {1,2}
 *         """
 *         return self.wrap( self.unwrap() | toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def count(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8PyClical_9index_set_wrap(__pyx_v_self, (__pyx_f_8PyClical_9index_set_unwrap(__pyx_v_self) | __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":304
 *         return index_set().wrap( toIndexSet(lhs) | toIndexSet(rhs) )
 * 
 *     def __ior__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Set union: or.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.__ior__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":315
 *         return self.wrap( self.unwrap() | toIndexSet(rhs) )
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         """
 *         Cardinality: Number of indices included in set.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_32count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_31count[] = "\n        Cardinality: Number of indices included in set.\n\n        >>> index_set({-1,1,2}).count()\n        3\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_32count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_31count(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_31count(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);

  /* "PyClical.pyx":322
 *         3
 *         """
 *         return self.instance.count()             # <<<<<<<<<<<<<<
 * 
 *     def count_neg(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->count()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":315
 *         return self.wrap( self.unwrap() | toIndexSet(rhs) )
 * 
 *     def count(self):             # <<<<<<<<<<<<<<
 *         """
 *         Cardinality: Number of indices included in set.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":324
 *         return self.instance.count()
 * 
 *     def count_neg(self):             # <<<<<<<<<<<<<<
 *         """
 *         Number of negative indices included in set.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_34count_neg(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_33count_neg[] = "\n        Number of negative indices included in set.\n\n        >>> index_set({-1,1,2}).count_neg()\n        1\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_34count_neg(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_neg (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_33count_neg(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_33count_neg(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_neg", 0);

  /* "PyClical.pyx":331
 *         1
 *         """
 *         return self.instance.count_neg()             # <<<<<<<<<<<<<<
 * 
 *     def count_pos(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->count_neg()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":324
 *         return self.instance.count()
 * 
 *     def count_neg(self):             # <<<<<<<<<<<<<<
 *         """
 *         Number of negative indices included in set.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.count_neg", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":333
 *         return self.instance.count_neg()
 * 
 *     def count_pos(self):             # <<<<<<<<<<<<<<
 *         """
 *         Number of positive indices included in set.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_36count_pos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_35count_pos[] = "\n        Number of positive indices included in set.\n\n        >>> index_set({-1,1,2}).count_pos()\n        2\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_36count_pos(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_pos (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_35count_pos(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_35count_pos(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_pos", 0);

  /* "PyClical.pyx":340
 *         2
 *         """
 *         return self.instance.count_pos()             # <<<<<<<<<<<<<<
 * 
 *     def min(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->count_pos()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":333
 *         return self.instance.count_neg()
 * 
 *     def count_pos(self):             # <<<<<<<<<<<<<<
 *         """
 *         Number of positive indices included in set.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.count_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":342
 *         return self.instance.count_pos()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """
 *         Minimum member.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_38min(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_37min[] = "\n        Minimum member.\n\n        >>> index_set({-1,1,2}).min()\n        -1\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_38min(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("min (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_37min(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_37min(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("min", 0);

  /* "PyClical.pyx":349
 *         -1
 *         """
 *         return self.instance.min()             # <<<<<<<<<<<<<<
 * 
 *     def max(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->min()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":342
 *         return self.instance.count_pos()
 * 
 *     def min(self):             # <<<<<<<<<<<<<<
 *         """
 *         Minimum member.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.min", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":351
 *         return self.instance.min()
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """
 *         Maximum member.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_40max(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_39max[] = "\n        Maximum member.\n\n        >>> index_set({-1,1,2}).max()\n        2\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_40max(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("max (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_39max(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_39max(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("max", 0);

  /* "PyClical.pyx":358
 *         2
 *         """
 *         return self.instance.max()             # <<<<<<<<<<<<<<
 * 
 *     def hash_fn(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->max()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":351
 *         return self.instance.min()
 * 
 *     def max(self):             # <<<<<<<<<<<<<<
 *         """
 *         Maximum member.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":360
 *         return self.instance.max()
 * 
 *     def hash_fn(self):             # <<<<<<<<<<<<<<
 *         """
 *         Hash function.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_42hash_fn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_41hash_fn[] = "\n        Hash function.\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_42hash_fn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hash_fn (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_41hash_fn(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_41hash_fn(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hash_fn", 0);

  /* "PyClical.pyx":364
 *         Hash function.
 *         """
 *         return self.instance.hash_fn()             # <<<<<<<<<<<<<<
 * 
 *     def sign_of_mult(self, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->hash_fn()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":360
 *         return self.instance.max()
 * 
 *     def hash_fn(self):             # <<<<<<<<<<<<<<
 *         """
 *         Hash function.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.hash_fn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":366
 *         return self.instance.hash_fn()
 * 
 *     def sign_of_mult(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Sign of geometric product of two Clifford basis elements.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_44sign_of_mult(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static char __pyx_doc_8PyClical_9index_set_43sign_of_mult[] = "\n        Sign of geometric product of two Clifford basis elements.\n\n        >>> s = index_set({1,2}); t=index_set({-1}); s.sign_of_mult(t)\n        1\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_44sign_of_mult(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sign_of_mult (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_43sign_of_mult(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_43sign_of_mult(struct __pyx_obj_8PyClical_index_set *__pyx_v_self, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sign_of_mult", 0);

  /* "PyClical.pyx":373
 *         1
 *         """
 *         return self.instance.sign_of_mult(toIndexSet(rhs))             # <<<<<<<<<<<<<<
 * 
 *     def sign_of_square(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->sign_of_mult(__pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":366
 *         return self.instance.hash_fn()
 * 
 *     def sign_of_mult(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Sign of geometric product of two Clifford basis elements.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.sign_of_mult", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":375
 *         return self.instance.sign_of_mult(toIndexSet(rhs))
 * 
 *     def sign_of_square(self):             # <<<<<<<<<<<<<<
 *         """
 *         Sign of geometric square of a Clifford basis element.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_46sign_of_square(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_9index_set_45sign_of_square[] = "\n        Sign of geometric square of a Clifford basis element.\n\n        >>> s = index_set({1,2}); s.sign_of_square()\n        -1\n        ";
static PyObject *__pyx_pw_8PyClical_9index_set_46sign_of_square(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sign_of_square (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_45sign_of_square(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_45sign_of_square(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sign_of_square", 0);

  /* "PyClical.pyx":382
 *         -1
 *         """
 *         return self.instance.sign_of_square()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->instance->sign_of_square()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":375
 *         return self.instance.sign_of_mult(toIndexSet(rhs))
 * 
 *     def sign_of_square(self):             # <<<<<<<<<<<<<<
 *         """
 *         Sign of geometric square of a Clifford basis element.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.sign_of_square", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":384
 *         return self.instance.sign_of_square()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The official string representation of self.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_48__repr__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8PyClical_9index_set_47__repr__[] = "\n        The \342\200\234official\342\200\235 string representation of self.\n\n        >>> index_set({1,2}).__repr__()\n        'index_set({1,2})'\n        >>> repr(index_set({1,2}))\n        'index_set({1,2})'\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_47__repr__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_48__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_47__repr__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_47__repr__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "PyClical.pyx":393
 *         'index_set({1,2})'
 *         """
 *         return index_set_to_repr( self.unwrap() ).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(index_set_to_repr(__pyx_f_8PyClical_9index_set_unwrap(__pyx_v_self)), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":384
 *         return self.instance.sign_of_square()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The official string representation of self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":395
 *         return index_set_to_repr( self.unwrap() ).decode()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The informal string representation of self.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_50__str__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_8PyClical_9index_set_49__str__[] = "\n        The \342\200\234informal\342\200\235 string representation of self.\n\n        >>> index_set({1,2}).__str__()\n        '{1,2}'\n        >>> str(index_set({1,2}))\n        '{1,2}'\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_8PyClical_9index_set_49__str__;
#endif
static PyObject *__pyx_pw_8PyClical_9index_set_50__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_49__str__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_49__str__(struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "PyClical.pyx":404
 *         '{1,2}'
 *         """
 *         return index_set_to_str( self.unwrap() ).decode()             # <<<<<<<<<<<<<<
 * 
 * def index_set_hidden_doctests():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(index_set_to_str(__pyx_f_8PyClical_9index_set_unwrap(__pyx_v_self)), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyClical.pyx":395
 *         return index_set_to_repr( self.unwrap() ).decode()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The informal string representation of self.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_52__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8PyClical_9index_set_52__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_51__reduce_cython__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_51__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_index_set *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_9index_set_54__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8PyClical_9index_set_54__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8PyClical_9index_set_53__setstate_cython__(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8PyClical_9index_set_53__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_index_set *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyClical.index_set.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyClical.pyx":406
 *         return index_set_to_str( self.unwrap() ).decode()
 * 
 * def index_set_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8PyClical_1index_set_hidden_doctests(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8PyClical_index_set_hidden_doctests[] = "\n    Tests for functions that Doctest cannot see.\n\n    For index_set.__cinit__: Construct index_set.\n\n    >>> print(index_set(1))\n    {1}\n    >>> print(index_set({1,2}))\n    {1,2}\n    >>> print(index_set(index_set({1,2})))\n    {1,2}\n    >>> print(index_set({1,2}))\n    {1,2}\n    >>> print(index_set({1,2,1}))\n    {1,2}\n    >>> print(index_set({1,2,1}))\n    {1,2}\n    >>> print(index_set(\"\"))\n    {}\n    >>> print(index_set(\"{\"))\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot initialize index_set object from invalid string '{'.\n    >>> print(index_set(\"{1\"))\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot initialize index_set object from invalid string '{1'.\n    >>> print(index_set(\"{1,2,100}\"))\n    Traceback (most recent call last):\n    ...\n    ValueError: Cannot initialize index_set object from invalid string '{1,2,100}'.\n    >>> print(index_set({1,2,100}))\n    Traceback (most recent call last):\n    ...\n    IndexError: Cannot initialize index_set object from invalid {1, 2, 100}.\n    >>> print(index_set([1,2]))\n    Traceback (most recent call last):\n    ...\n    TypeError: Cannot initialize index_set object from <class 'list'>.\n\n    For index_set.__richcmp__: Compare two objects of class index_set.\n\n    >>> index_set(1) == index_set({1})\n    True\n    >>> index_set({1}) != index_set({1})\n    False\n    >>> index_set({1}) != index_set({2})\n    True\n    >>> index_set({1}) == index_set({2})\n    False\n    >>> index_set({1}) < index_set({2})\n    True\n    >>> index_set({1}) <= index_set({2})\n    True\n    >>> index_set({1}) > index_set({2})\n    False\n    >>> index_set({1}) >= index_set({2})\n    False\n    >>> None == index_set({1,2})\n    False\n    >>> None != index_set({1,2})\n    True\n    >>> None < index_set({1,2})\n    False\n    >>> None <= index_set({1,2})\n    False\n    >>> None > index_set({1,2})\n    False\n    >>> None >= index_set({1,2})\n    False\n    >>> ""index_set({1,2}) == None\n    False\n    >>> index_set({1,2}) != None\n    True\n    >>> index_set({1,2}) < None\n    False\n    >>> index_set({1,2}) <= None\n    False\n    >>> index_set({1,2}) > None\n    False\n    >>> index_set({1,2}) >= None\n    False\n    ";
        static PyMethodDef __pyx_mdef_8PyClical_1index_set_hidden_doctests = {"index_set_hidden_doctests", (PyCFunction)__pyx_pw_8PyClical_1index_set_hidden_doctests, METH_NOARGS, __pyx_doc_8PyClical_index_set_hidden_doctests};
        static PyObject *__pyx_pw_8PyClical_1index_set_hidden_doctests(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("index_set_hidden_doctests (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_index_set_hidden_doctests(__pyx_self);

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_index_set_hidden_doctests(CYTHON_UNUSED PyObject *__pyx_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("index_set_hidden_doctests", 0);

          /* "PyClical.pyx":490
 *     False
 *     """
 *     return             # <<<<<<<<<<<<<<
 * 
 * cpdef inline compare(lhs,rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = Py_None; __Pyx_INCREF(Py_None);
          goto __pyx_L0;

          /* "PyClical.pyx":406
 *         return index_set_to_str( self.unwrap() ).decode()
 * 
 * def index_set_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */

          /* function exit code */
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":492
 *     return
 * 
 * cpdef inline compare(lhs,rhs):             # <<<<<<<<<<<<<<
 *     """
 *     "lexicographic compare" eg. {3,4,5} is less than {3,7,8};
 */

        static PyObject *__pyx_pw_8PyClical_3compare(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
        static CYTHON_INLINE PyObject *__pyx_f_8PyClical_compare(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED int __pyx_skip_dispatch) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("compare", 0);

          /* "PyClical.pyx":502
 *     1
 *     """
 *     return glucat.compare( toIndexSet(lhs), toIndexSet(rhs) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline min_neg(obj):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyInt_From_int(compare(__pyx_f_8PyClical_toIndexSet(__pyx_v_lhs), __pyx_f_8PyClical_toIndexSet(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":492
 *     return
 * 
 * cpdef inline compare(lhs,rhs):             # <<<<<<<<<<<<<<
 *     """
 *     "lexicographic compare" eg. {3,4,5} is less than {3,7,8};
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = 0;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_3compare(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
        static char __pyx_doc_8PyClical_2compare[] = "\n    \"lexicographic compare\" eg. {3,4,5} is less than {3,7,8};\n    -1 if a<b, +1 if a>b, 0 if a==b.\n\n    >>> compare(index_set({1,2}),index_set({-1,3}))\n    -1\n    >>> compare(index_set({-1,4}),index_set({-1,3}))\n    1\n    ";
        static PyObject *__pyx_pw_8PyClical_3compare(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
          PyObject *__pyx_v_lhs = 0;
          PyObject *__pyx_v_rhs = 0;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("compare (wrapper)", 0);
          {
            static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lhs,&__pyx_n_s_rhs,0};
            PyObject* values[2] = {0,0};
            if (unlikely(__pyx_kwds)) {
              Py_ssize_t kw_args;
              const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
              switch (pos_args) {
                case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                CYTHON_FALLTHROUGH;
                case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                CYTHON_FALLTHROUGH;
                case  0: break;
                default: goto __pyx_L5_argtuple_error;
              }
              kw_args = PyDict_Size(__pyx_kwds);
              switch (pos_args) {
                case  0:
                if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lhs)) != 0)) kw_args--;
                else goto __pyx_L5_argtuple_error;
                CYTHON_FALLTHROUGH;
                case  1:
                if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rhs)) != 0)) kw_args--;
                else {
                  __Pyx_RaiseArgtupleInvalid("compare", 1, 2, 2, 1); __PYX_ERR(0, 492, __pyx_L3_error)
                }
              }
              if (unlikely(kw_args > 0)) {
                if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compare") < 0)) __PYX_ERR(0, 492, __pyx_L3_error)
              }
            } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
              goto __pyx_L5_argtuple_error;
            } else {
              values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
              values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
            }
            __pyx_v_lhs = values[0];
            __pyx_v_rhs = values[1];
          }
          goto __pyx_L4_argument_unpacking_done;
          __pyx_L5_argtuple_error:;
          __Pyx_RaiseArgtupleInvalid("compare", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 492, __pyx_L3_error)
          __pyx_L3_error:;
          __Pyx_AddTraceback("PyClical.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __Pyx_RefNannyFinishContext();
          return NULL;
          __pyx_L4_argument_unpacking_done:;
          __pyx_r = __pyx_pf_8PyClical_2compare(__pyx_self, __pyx_v_lhs, __pyx_v_rhs);

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_2compare(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("compare", 0);
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_compare(__pyx_v_lhs, __pyx_v_rhs, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.compare", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":504
 *     return glucat.compare( toIndexSet(lhs), toIndexSet(rhs) )
 * 
 * cpdef inline min_neg(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Minimum negative index, or 0 if none.
 */

        static PyObject *__pyx_pw_8PyClical_5min_neg(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
        static CYTHON_INLINE PyObject *__pyx_f_8PyClical_min_neg(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("min_neg", 0);

          /* "PyClical.pyx":511
 *     0
 *     """
 *     return glucat.min_neg( toIndexSet(obj) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline max_pos(obj):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyInt_From_int(min_neg(__pyx_f_8PyClical_toIndexSet(__pyx_v_obj))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":504
 *     return glucat.compare( toIndexSet(lhs), toIndexSet(rhs) )
 * 
 * cpdef inline min_neg(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Minimum negative index, or 0 if none.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.min_neg", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = 0;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_5min_neg(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
        static char __pyx_doc_8PyClical_4min_neg[] = "\n    Minimum negative index, or 0 if none.\n\n    >>> min_neg(index_set({1,2}))\n    0\n    ";
        static PyObject *__pyx_pw_8PyClical_5min_neg(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("min_neg (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_4min_neg(__pyx_self, ((PyObject *)__pyx_v_obj));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_4min_neg(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("min_neg", 0);
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_min_neg(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.min_neg", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":513
 *     return glucat.min_neg( toIndexSet(obj) )
 * 
 * cpdef inline max_pos(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Maximum positive index, or 0 if none.
 */

        static PyObject *__pyx_pw_8PyClical_7max_pos(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
        static CYTHON_INLINE PyObject *__pyx_f_8PyClical_max_pos(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("max_pos", 0);

          /* "PyClical.pyx":520
 *     2
 *     """
 *     return glucat.max_pos( toIndexSet(obj) )             # <<<<<<<<<<<<<<
 * 
 * cdef inline vector[scalar_t] list_to_vector(lst):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyInt_From_int(max_pos(__pyx_f_8PyClical_toIndexSet(__pyx_v_obj))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":513
 *     return glucat.min_neg( toIndexSet(obj) )
 * 
 * cpdef inline max_pos(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Maximum positive index, or 0 if none.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.max_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = 0;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_7max_pos(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
        static char __pyx_doc_8PyClical_6max_pos[] = "\n    Maximum positive index, or 0 if none.\n\n    >>> max_pos(index_set({1,2}))\n    2\n    ";
        static PyObject *__pyx_pw_8PyClical_7max_pos(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("max_pos (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_6max_pos(__pyx_self, ((PyObject *)__pyx_v_obj));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_6max_pos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("max_pos", 0);
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_max_pos(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.max_pos", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":522
 *     return glucat.max_pos( toIndexSet(obj) )
 * 
 * cdef inline vector[scalar_t] list_to_vector(lst):             # <<<<<<<<<<<<<<
 *      """
 *      Create a C++ std:vector[scalar_t] from an iterable Python object.
 */

        static CYTHON_INLINE std::vector<scalar_t>  __pyx_f_8PyClical_list_to_vector(PyObject *__pyx_v_lst) {
          std::vector<scalar_t>  __pyx_v_v;
          PyObject *__pyx_v_s = NULL;
          std::vector<scalar_t>  __pyx_r;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          Py_ssize_t __pyx_t_2;
          PyObject *(*__pyx_t_3)(PyObject *);
          PyObject *__pyx_t_4 = NULL;
          scalar_t __pyx_t_5;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("list_to_vector", 0);

          /* "PyClical.pyx":527
 *      """
 *      cdef vector[scalar_t] v
 *      for s in lst:             # <<<<<<<<<<<<<<
 *          v.push_back(<scalar_t>s)
 *      return v
 */
          if (likely(PyList_CheckExact(__pyx_v_lst)) || PyTuple_CheckExact(__pyx_v_lst)) {
            __pyx_t_1 = __pyx_v_lst; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
            __pyx_t_3 = NULL;
          } else {
            __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_lst); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
          }
          for (;;) {
            if (likely(!__pyx_t_3)) {
              if (likely(PyList_CheckExact(__pyx_t_1))) {
                if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
                #else
                __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              } else {
                if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
                #else
                __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_4);
                #endif
              }
            } else {
              __pyx_t_4 = __pyx_t_3(__pyx_t_1);
              if (unlikely(!__pyx_t_4)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 527, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_4);
            }
            __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "PyClical.pyx":528
 *      cdef vector[scalar_t] v
 *      for s in lst:
 *          v.push_back(<scalar_t>s)             # <<<<<<<<<<<<<<
 *      return v
 * 
 */
            __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_s); if (unlikely((__pyx_t_5 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L1_error)
            try {
              __pyx_v_v.push_back(((scalar_t)__pyx_t_5));
            } catch(...) {
              __Pyx_CppExn2PyErr();
              __PYX_ERR(0, 528, __pyx_L1_error)
            }

            /* "PyClical.pyx":527
 *      """
 *      cdef vector[scalar_t] v
 *      for s in lst:             # <<<<<<<<<<<<<<
 *          v.push_back(<scalar_t>s)
 *      return v
 */
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "PyClical.pyx":529
 *      for s in lst:
 *          v.push_back(<scalar_t>s)
 *      return v             # <<<<<<<<<<<<<<
 * 
 * # Forward reference.
 */
          __pyx_r = __pyx_v_v;
          goto __pyx_L0;

          /* "PyClical.pyx":522
 *     return glucat.max_pos( toIndexSet(obj) )
 * 
 * cdef inline vector[scalar_t] list_to_vector(lst):             # <<<<<<<<<<<<<<
 *      """
 *      Create a C++ std:vector[scalar_t] from an iterable Python object.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_4);
          __Pyx_WriteUnraisable("PyClical.list_to_vector", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
          __Pyx_pretend_to_initialize(&__pyx_r);
          __pyx_L0:;
          __Pyx_XDECREF(__pyx_v_s);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":534
 * cdef class clifford
 * 
 * cdef inline Clifford toClifford(obj):             # <<<<<<<<<<<<<<
 *     return clifford(obj).instance[0]
 * 
 */

        static CYTHON_INLINE Clifford __pyx_f_8PyClical_toClifford(PyObject *__pyx_v_obj) {
          Clifford __pyx_r;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("toClifford", 0);

          /* "PyClical.pyx":535
 * 
 * cdef inline Clifford toClifford(obj):
 *     return clifford(obj).instance[0]             # <<<<<<<<<<<<<<
 * 
 * cdef class clifford:
 */
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = (((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1)->instance[0]);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":534
 * cdef class clifford
 * 
 * cdef inline Clifford toClifford(obj):             # <<<<<<<<<<<<<<
 *     return clifford(obj).instance[0]
 * 
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_WriteUnraisable("PyClical.toClifford", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
          __Pyx_pretend_to_initialize(&__pyx_r);
          __pyx_L0:;
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":543
 *     cdef Clifford *instance # Wrapped instance of C++ class Clifford.
 * 
 *     cdef inline wrap(clifford self, Clifford other):             # <<<<<<<<<<<<<<
 *         """
 *         Wrap an instance of the C++ class Clifford.
 */

        static CYTHON_INLINE PyObject *__pyx_f_8PyClical_8clifford_wrap(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, Clifford __pyx_v_other) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("wrap", 0);

          /* "PyClical.pyx":547
 *         Wrap an instance of the C++ class Clifford.
 *         """
 *         self.instance[0] = other             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
          (__pyx_v_self->instance[0]) = __pyx_v_other;

          /* "PyClical.pyx":548
 *         """
 *         self.instance[0] = other
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef inline Clifford unwrap(clifford self):
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(((PyObject *)__pyx_v_self));
          __pyx_r = ((PyObject *)__pyx_v_self);
          goto __pyx_L0;

          /* "PyClical.pyx":543
 *     cdef Clifford *instance # Wrapped instance of C++ class Clifford.
 * 
 *     cdef inline wrap(clifford self, Clifford other):             # <<<<<<<<<<<<<<
 *         """
 *         Wrap an instance of the C++ class Clifford.
 */

          /* function exit code */
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":550
 *         return self
 * 
 *     cdef inline Clifford unwrap(clifford self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the wrapped C++ Clifford instance.
 */

        static CYTHON_INLINE Clifford __pyx_f_8PyClical_8clifford_unwrap(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          Clifford __pyx_r;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("unwrap", 0);

          /* "PyClical.pyx":554
 *         Return the wrapped C++ Clifford instance.
 *         """
 *         return self.instance[0]             # <<<<<<<<<<<<<<
 * 
 *     cpdef copy(clifford self):
 */
          __pyx_r = (__pyx_v_self->instance[0]);
          goto __pyx_L0;

          /* "PyClical.pyx":550
 *         return self
 * 
 *     cdef inline Clifford unwrap(clifford self):             # <<<<<<<<<<<<<<
 *         """
 *         Return the wrapped C++ Clifford instance.
 */

          /* function exit code */
          __pyx_L0:;
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":556
 *         return self.instance[0]
 * 
 *     cpdef copy(clifford self):             # <<<<<<<<<<<<<<
 *         """
 *         Copy this clifford object.
 */

        static PyObject *__pyx_pw_8PyClical_8clifford_1copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static PyObject *__pyx_f_8PyClical_8clifford_copy(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, int __pyx_skip_dispatch) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          PyObject *__pyx_t_3 = NULL;
          PyObject *__pyx_t_4 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("copy", 0);
          /* Check if called by wrapper */
          if (unlikely(__pyx_skip_dispatch)) ;
          /* Check if overridden in Python */
          else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
            #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
            static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
            if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
              PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
              #endif
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_8PyClical_8clifford_1copy)) {
                __Pyx_XDECREF(__pyx_r);
                __Pyx_INCREF(__pyx_t_1);
                __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_4)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_4);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                  }
                }
                __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_r = __pyx_t_2;
                __pyx_t_2 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                goto __pyx_L0;
              }
              #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
              __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
              __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
              if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
                __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
              }
              #endif
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
            }
            #endif
          }

          /* "PyClical.pyx":563
 *         {2}
 *         """
 *         return clifford(self)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, other = 0, ixt = None):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":556
 *         return self.instance[0]
 * 
 *     cpdef copy(clifford self):             # <<<<<<<<<<<<<<
 *         """
 *         Copy this clifford object.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_XDECREF(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_4);
          __Pyx_AddTraceback("PyClical.clifford.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = 0;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_1copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_copy[] = "\n        Copy this clifford object.\n\n        >>> x=clifford(\"1{2}\"); y=x.copy(); print(y)\n        {2}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_1copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("copy (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_copy(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_copy(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("copy", 0);
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_copy(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":565
 *         return clifford(self)
 * 
 *     def __cinit__(self, other = 0, ixt = None):             # <<<<<<<<<<<<<<
 *         """
 *         Construct an object of type clifford.
 */

        /* Python wrapper */
        static int __pyx_pw_8PyClical_8clifford_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
        static int __pyx_pw_8PyClical_8clifford_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
          PyObject *__pyx_v_other = 0;
          PyObject *__pyx_v_ixt = 0;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          int __pyx_r;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
          {
            static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_other,&__pyx_n_s_ixt,0};
            PyObject* values[2] = {0,0};
            values[0] = ((PyObject *)__pyx_int_0);
            values[1] = ((PyObject *)Py_None);
            if (unlikely(__pyx_kwds)) {
              Py_ssize_t kw_args;
              const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
              switch (pos_args) {
                case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                CYTHON_FALLTHROUGH;
                case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                CYTHON_FALLTHROUGH;
                case  0: break;
                default: goto __pyx_L5_argtuple_error;
              }
              kw_args = PyDict_Size(__pyx_kwds);
              switch (pos_args) {
                case  0:
                if (kw_args > 0) {
                  PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other);
                  if (value) { values[0] = value; kw_args--; }
                }
                CYTHON_FALLTHROUGH;
                case  1:
                if (kw_args > 0) {
                  PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ixt);
                  if (value) { values[1] = value; kw_args--; }
                }
              }
              if (unlikely(kw_args > 0)) {
                if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 565, __pyx_L3_error)
              }
            } else {
              switch (PyTuple_GET_SIZE(__pyx_args)) {
                case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                CYTHON_FALLTHROUGH;
                case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                CYTHON_FALLTHROUGH;
                case  0: break;
                default: goto __pyx_L5_argtuple_error;
              }
            }
            __pyx_v_other = values[0];
            __pyx_v_ixt = values[1];
          }
          goto __pyx_L4_argument_unpacking_done;
          __pyx_L5_argtuple_error:;
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 565, __pyx_L3_error)
          __pyx_L3_error:;
          __Pyx_AddTraceback("PyClical.clifford.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __Pyx_RefNannyFinishContext();
          return -1;
          __pyx_L4_argument_unpacking_done:;
          __pyx_r = __pyx_pf_8PyClical_8clifford_2__cinit__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), __pyx_v_other, __pyx_v_ixt);

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static int __pyx_pf_8PyClical_8clifford_2__cinit__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_ixt) {
          PyObject *__pyx_v_error_msg_prefix = NULL;
          PyObject *__pyx_v_bother = NULL;
          PyObject *__pyx_v_err = NULL;
          int __pyx_r;
          __Pyx_RefNannyDeclarations
          int __pyx_t_1;
          int __pyx_t_2;
          PyObject *__pyx_t_3 = NULL;
          PyObject *__pyx_t_4 = NULL;
          PyObject *__pyx_t_5 = NULL;
          Clifford *__pyx_t_6;
          PyObject *__pyx_t_7 = NULL;
          PyObject *__pyx_t_8 = NULL;
          scalar_t __pyx_t_9;
          PyObject *__pyx_t_10 = NULL;
          PyObject *__pyx_t_11 = NULL;
          PyObject *__pyx_t_12 = NULL;
          PyObject *__pyx_t_13 = NULL;
          char *__pyx_t_14;
          int __pyx_t_15;
          PyObject *__pyx_t_16 = NULL;
          PyObject *__pyx_t_17 = NULL;
          PyObject *__pyx_t_18 = NULL;
          int __pyx_t_19;
          char const *__pyx_t_20;
          PyObject *__pyx_t_21 = NULL;
          PyObject *__pyx_t_22 = NULL;
          PyObject *__pyx_t_23 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__cinit__", 0);

          /* "PyClical.pyx":588
 *         2{1}+3{2}
 *         """
 *         error_msg_prefix = "Cannot initialize clifford object from"             # <<<<<<<<<<<<<<
 *         if ixt is None:
 *             try:
 */
          __Pyx_INCREF(__pyx_kp_u_Cannot_initialize_clifford_objec);
          __pyx_v_error_msg_prefix = __pyx_kp_u_Cannot_initialize_clifford_objec;

          /* "PyClical.pyx":589
 *         """
 *         error_msg_prefix = "Cannot initialize clifford object from"
 *         if ixt is None:             # <<<<<<<<<<<<<<
 *             try:
 *                 if   isinstance(other, clifford):
 */
          __pyx_t_1 = (__pyx_v_ixt == Py_None);
          __pyx_t_2 = (__pyx_t_1 != 0);
          if (__pyx_t_2) {

            /* "PyClical.pyx":590
 *         error_msg_prefix = "Cannot initialize clifford object from"
 *         if ixt is None:
 *             try:             # <<<<<<<<<<<<<<
 *                 if   isinstance(other, clifford):
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 */
            {
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
              __Pyx_XGOTREF(__pyx_t_3);
              __Pyx_XGOTREF(__pyx_t_4);
              __Pyx_XGOTREF(__pyx_t_5);
              /*try:*/ {

                /* "PyClical.pyx":591
 *         if ixt is None:
 *             try:
 *                 if   isinstance(other, clifford):             # <<<<<<<<<<<<<<
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 *                 elif isinstance(other, index_set):
 */
                __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8PyClical_clifford); 
                __pyx_t_1 = (__pyx_t_2 != 0);
                if (__pyx_t_1) {

                  /* "PyClical.pyx":592
 *             try:
 *                 if   isinstance(other, clifford):
 *                     self.instance = new Clifford((<clifford>other).unwrap())             # <<<<<<<<<<<<<<
 *                 elif isinstance(other, index_set):
 *                     self.instance = new Clifford((<index_set>other).unwrap(), <scalar_t>1.0)
 */
                  try {
                    __pyx_t_6 = new Clifford(__pyx_f_8PyClical_8clifford_unwrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_other)));
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 592, __pyx_L4_error)
                  }
                  __pyx_v_self->instance = __pyx_t_6;

                  /* "PyClical.pyx":591
 *         if ixt is None:
 *             try:
 *                 if   isinstance(other, clifford):             # <<<<<<<<<<<<<<
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 *                 elif isinstance(other, index_set):
 */
                  goto __pyx_L10;
                }

                /* "PyClical.pyx":593
 *                 if   isinstance(other, clifford):
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 *                 elif isinstance(other, index_set):             # <<<<<<<<<<<<<<
 *                     self.instance = new Clifford((<index_set>other).unwrap(), <scalar_t>1.0)
 *                 elif isinstance(other, numbers.Real):
 */
                __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_8PyClical_index_set); 
                __pyx_t_2 = (__pyx_t_1 != 0);
                if (__pyx_t_2) {

                  /* "PyClical.pyx":594
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 *                 elif isinstance(other, index_set):
 *                     self.instance = new Clifford((<index_set>other).unwrap(), <scalar_t>1.0)             # <<<<<<<<<<<<<<
 *                 elif isinstance(other, numbers.Real):
 *                     self.instance = new Clifford(<scalar_t>other)
 */
                  try {
                    __pyx_t_6 = new Clifford(__pyx_f_8PyClical_9index_set_unwrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_other)), ((scalar_t)1.0));
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 594, __pyx_L4_error)
                  }
                  __pyx_v_self->instance = __pyx_t_6;

                  /* "PyClical.pyx":593
 *                 if   isinstance(other, clifford):
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 *                 elif isinstance(other, index_set):             # <<<<<<<<<<<<<<
 *                     self.instance = new Clifford((<index_set>other).unwrap(), <scalar_t>1.0)
 *                 elif isinstance(other, numbers.Real):
 */
                  goto __pyx_L10;
                }

                /* "PyClical.pyx":595
 *                 elif isinstance(other, index_set):
 *                     self.instance = new Clifford((<index_set>other).unwrap(), <scalar_t>1.0)
 *                 elif isinstance(other, numbers.Real):             # <<<<<<<<<<<<<<
 *                     self.instance = new Clifford(<scalar_t>other)
 *                 elif isinstance(other, str):
 */
                __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numbers); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 595, __pyx_L4_error)
                __Pyx_GOTREF(__pyx_t_7);
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Real); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 595, __pyx_L4_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                __pyx_t_2 = PyObject_IsInstance(__pyx_v_other, __pyx_t_8); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 595, __pyx_L4_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_1 = (__pyx_t_2 != 0);
                if (__pyx_t_1) {

                  /* "PyClical.pyx":596
 *                     self.instance = new Clifford((<index_set>other).unwrap(), <scalar_t>1.0)
 *                 elif isinstance(other, numbers.Real):
 *                     self.instance = new Clifford(<scalar_t>other)             # <<<<<<<<<<<<<<
 *                 elif isinstance(other, str):
 *                     try:
 */
                  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_other); if (unlikely((__pyx_t_9 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L4_error)
                  try {
                    __pyx_t_6 = new Clifford(((scalar_t)__pyx_t_9));
                  } catch(...) {
                    __Pyx_CppExn2PyErr();
                    __PYX_ERR(0, 596, __pyx_L4_error)
                  }
                  __pyx_v_self->instance = __pyx_t_6;

                  /* "PyClical.pyx":595
 *                 elif isinstance(other, index_set):
 *                     self.instance = new Clifford((<index_set>other).unwrap(), <scalar_t>1.0)
 *                 elif isinstance(other, numbers.Real):             # <<<<<<<<<<<<<<
 *                     self.instance = new Clifford(<scalar_t>other)
 *                 elif isinstance(other, str):
 */
                  goto __pyx_L10;
                }

                /* "PyClical.pyx":597
 *                 elif isinstance(other, numbers.Real):
 *                     self.instance = new Clifford(<scalar_t>other)
 *                 elif isinstance(other, str):             # <<<<<<<<<<<<<<
 *                     try:
 *                         bother = other.encode("UTF-8")
 */
                __pyx_t_1 = PyUnicode_Check(__pyx_v_other); 
                __pyx_t_2 = (__pyx_t_1 != 0);
                if (likely(__pyx_t_2)) {

                  /* "PyClical.pyx":598
 *                     self.instance = new Clifford(<scalar_t>other)
 *                 elif isinstance(other, str):
 *                     try:             # <<<<<<<<<<<<<<
 *                         bother = other.encode("UTF-8")
 *                         self.instance = new Clifford(<char *>bother)
 */
                  {
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
                    __Pyx_XGOTREF(__pyx_t_10);
                    __Pyx_XGOTREF(__pyx_t_11);
                    __Pyx_XGOTREF(__pyx_t_12);
                    /*try:*/ {

                      /* "PyClical.pyx":599
 *                 elif isinstance(other, str):
 *                     try:
 *                         bother = other.encode("UTF-8")             # <<<<<<<<<<<<<<
 *                         self.instance = new Clifford(<char *>bother)
 *                     except RuntimeError:
 */
                      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_encode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 599, __pyx_L11_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __pyx_t_13 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
                        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_7);
                        if (likely(__pyx_t_13)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
                          __Pyx_INCREF(__pyx_t_13);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_7, function);
                        }
                      }
                      __pyx_t_8 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_13, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_kp_u_UTF_8);
                      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 599, __pyx_L11_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                      __pyx_v_bother = __pyx_t_8;
                      __pyx_t_8 = 0;

                      /* "PyClical.pyx":600
 *                     try:
 *                         bother = other.encode("UTF-8")
 *                         self.instance = new Clifford(<char *>bother)             # <<<<<<<<<<<<<<
 *                     except RuntimeError:
 *                         raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")
 */
                      __pyx_t_14 = __Pyx_PyObject_AsWritableString(__pyx_v_bother); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L11_error)
                      try {
                        __pyx_t_6 = new Clifford(((char *)__pyx_t_14));
                      } catch(...) {
                        __Pyx_CppExn2PyErr();
                        __PYX_ERR(0, 600, __pyx_L11_error)
                      }
                      __pyx_v_self->instance = __pyx_t_6;

                      /* "PyClical.pyx":598
 *                     self.instance = new Clifford(<scalar_t>other)
 *                 elif isinstance(other, str):
 *                     try:             # <<<<<<<<<<<<<<
 *                         bother = other.encode("UTF-8")
 *                         self.instance = new Clifford(<char *>bother)
 */
                    }
                    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
                    goto __pyx_L16_try_end;
                    __pyx_L11_error:;
                    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
                    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

                    /* "PyClical.pyx":601
 *                         bother = other.encode("UTF-8")
 *                         self.instance = new Clifford(<char *>bother)
 *                     except RuntimeError:             # <<<<<<<<<<<<<<
 *                         raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")
 *                 else:
 */
                    __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
                    if (__pyx_t_15) {
                      __Pyx_AddTraceback("PyClical.clifford.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
                      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_13) < 0) __PYX_ERR(0, 601, __pyx_L13_except_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      __Pyx_GOTREF(__pyx_t_7);
                      __Pyx_GOTREF(__pyx_t_13);

                      /* "PyClical.pyx":602
 *                         self.instance = new Clifford(<char *>bother)
 *                     except RuntimeError:
 *                         raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 */
                      __pyx_t_16 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u_invalid_string); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 602, __pyx_L13_except_error)
                      __Pyx_GOTREF(__pyx_t_16);
                      __pyx_t_17 = PyObject_Repr(__pyx_v_other); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 602, __pyx_L13_except_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __pyx_t_18 = PyNumber_Add(__pyx_t_16, __pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 602, __pyx_L13_except_error)
                      __Pyx_GOTREF(__pyx_t_18);
                      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      __pyx_t_17 = PyNumber_Add(__pyx_t_18, __pyx_kp_u_); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 602, __pyx_L13_except_error)
                      __Pyx_GOTREF(__pyx_t_17);
                      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                      __pyx_t_18 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 602, __pyx_L13_except_error)
                      __Pyx_GOTREF(__pyx_t_18);
                      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                      __Pyx_Raise(__pyx_t_18, 0, 0, 0);
                      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                      __PYX_ERR(0, 602, __pyx_L13_except_error)
                    }
                    goto __pyx_L13_except_error;
                    __pyx_L13_except_error:;

                    /* "PyClical.pyx":598
 *                     self.instance = new Clifford(<scalar_t>other)
 *                 elif isinstance(other, str):
 *                     try:             # <<<<<<<<<<<<<<
 *                         bother = other.encode("UTF-8")
 *                         self.instance = new Clifford(<char *>bother)
 */
                    __Pyx_XGIVEREF(__pyx_t_10);
                    __Pyx_XGIVEREF(__pyx_t_11);
                    __Pyx_XGIVEREF(__pyx_t_12);
                    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
                    goto __pyx_L4_error;
                    __pyx_L16_try_end:;
                  }

                  /* "PyClical.pyx":597
 *                 elif isinstance(other, numbers.Real):
 *                     self.instance = new Clifford(<scalar_t>other)
 *                 elif isinstance(other, str):             # <<<<<<<<<<<<<<
 *                     try:
 *                         bother = other.encode("UTF-8")
 */
                  goto __pyx_L10;
                }

                /* "PyClical.pyx":604
 *                         raise ValueError(error_msg_prefix + " invalid string " + repr(other) + ".")
 *                 else:
 *                     raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")             # <<<<<<<<<<<<<<
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " " + str(type(other))
 */
                /*else*/ {
                  __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u__2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 604, __pyx_L4_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_other))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L4_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_13, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 604, __pyx_L4_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_t_8, __pyx_kp_u_); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 604, __pyx_L4_error)
                  __Pyx_GOTREF(__pyx_t_7);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 604, __pyx_L4_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                  __Pyx_Raise(__pyx_t_8, 0, 0, 0);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                  __PYX_ERR(0, 604, __pyx_L4_error)
                }
                __pyx_L10:;

                /* "PyClical.pyx":590
 *         error_msg_prefix = "Cannot initialize clifford object from"
 *         if ixt is None:
 *             try:             # <<<<<<<<<<<<<<
 *                 if   isinstance(other, clifford):
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 */
              }
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              goto __pyx_L9_try_end;
              __pyx_L4_error:;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "PyClical.pyx":605
 *                 else:
 *                     raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 *             except RuntimeError as err:             # <<<<<<<<<<<<<<
 *                 raise ValueError(error_msg_prefix + " " + str(type(other))
 *                                                   + " value " + repr(other) + ":"
 */
              __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
              if (__pyx_t_15) {
                __Pyx_AddTraceback("PyClical.clifford.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_13) < 0) __PYX_ERR(0, 605, __pyx_L6_except_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_GOTREF(__pyx_t_7);
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_7);
                __pyx_v_err = __pyx_t_7;
                /*try:*/ {

                  /* "PyClical.pyx":606
 *                     raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " " + str(type(other))             # <<<<<<<<<<<<<<
 *                                                   + " value " + repr(other) + ":"
 *                                                   + "\n\t" + str(err))
 */
                  __pyx_t_18 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u__2); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 606, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_18);
                  __pyx_t_17 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_other))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 606, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __pyx_t_16 = __Pyx_PyUnicode_Concat(__pyx_t_18, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 606, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

                  /* "PyClical.pyx":607
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " " + str(type(other))
 *                                                   + " value " + repr(other) + ":"             # <<<<<<<<<<<<<<
 *                                                   + "\n\t" + str(err))
 *         elif isinstance(ixt, index_set):
 */
                  __pyx_t_17 = __Pyx_PyUnicode_Concat(__pyx_t_16, __pyx_kp_u_value); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 607, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __pyx_t_16 = PyObject_Repr(__pyx_v_other); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 607, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __pyx_t_18 = PyNumber_Add(__pyx_t_17, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 607, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_18);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __pyx_t_16 = PyNumber_Add(__pyx_t_18, __pyx_kp_u__5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 607, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

                  /* "PyClical.pyx":608
 *                 raise ValueError(error_msg_prefix + " " + str(type(other))
 *                                                   + " value " + repr(other) + ":"
 *                                                   + "\n\t" + str(err))             # <<<<<<<<<<<<<<
 *         elif isinstance(ixt, index_set):
 *             if   isinstance(other, numbers.Real):
 */
                  __pyx_t_18 = PyNumber_Add(__pyx_t_16, __pyx_kp_u__6); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 608, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_18);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __pyx_t_16 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_err); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 608, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __pyx_t_17 = PyNumber_Add(__pyx_t_18, __pyx_t_16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 608, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_17);
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

                  /* "PyClical.pyx":606
 *                     raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " " + str(type(other))             # <<<<<<<<<<<<<<
 *                                                   + " value " + repr(other) + ":"
 *                                                   + "\n\t" + str(err))
 */
                  __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 606, __pyx_L24_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                  __Pyx_Raise(__pyx_t_16, 0, 0, 0);
                  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  __PYX_ERR(0, 606, __pyx_L24_error)
                }

                /* "PyClical.pyx":605
 *                 else:
 *                     raise TypeError(error_msg_prefix + " " + str(type(other)) + ".")
 *             except RuntimeError as err:             # <<<<<<<<<<<<<<
 *                 raise ValueError(error_msg_prefix + " " + str(type(other))
 *                                                   + " value " + repr(other) + ":"
 */
                /*finally:*/ {
                  __pyx_L24_error:;
                  /*exception exit:*/{
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
                    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                    if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
                    if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
                    __Pyx_XGOTREF(__pyx_t_12);
                    __Pyx_XGOTREF(__pyx_t_11);
                    __Pyx_XGOTREF(__pyx_t_10);
                    __Pyx_XGOTREF(__pyx_t_21);
                    __Pyx_XGOTREF(__pyx_t_22);
                    __Pyx_XGOTREF(__pyx_t_23);
                    __pyx_t_15 = __pyx_lineno; __pyx_t_19 = __pyx_clineno; __pyx_t_20 = __pyx_filename;
                    {
                      __Pyx_DECREF(__pyx_v_err);
                      __pyx_v_err = NULL;
                    }
                    if (PY_MAJOR_VERSION >= 3) {
                      __Pyx_XGIVEREF(__pyx_t_21);
                      __Pyx_XGIVEREF(__pyx_t_22);
                      __Pyx_XGIVEREF(__pyx_t_23);
                      __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
                    }
                    __Pyx_XGIVEREF(__pyx_t_12);
                    __Pyx_XGIVEREF(__pyx_t_11);
                    __Pyx_XGIVEREF(__pyx_t_10);
                    __Pyx_ErrRestore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
                    __pyx_t_12 = 0; __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
                    __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_19; __pyx_filename = __pyx_t_20;
                    goto __pyx_L6_except_error;
                  }
                }
              }
              goto __pyx_L6_except_error;
              __pyx_L6_except_error:;

              /* "PyClical.pyx":590
 *         error_msg_prefix = "Cannot initialize clifford object from"
 *         if ixt is None:
 *             try:             # <<<<<<<<<<<<<<
 *                 if   isinstance(other, clifford):
 *                     self.instance = new Clifford((<clifford>other).unwrap())
 */
              __Pyx_XGIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_5);
              __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
              goto __pyx_L1_error;
              __pyx_L9_try_end:;
            }

            /* "PyClical.pyx":589
 *         """
 *         error_msg_prefix = "Cannot initialize clifford object from"
 *         if ixt is None:             # <<<<<<<<<<<<<<
 *             try:
 *                 if   isinstance(other, clifford):
 */
            goto __pyx_L3;
          }

          /* "PyClical.pyx":609
 *                                                   + " value " + repr(other) + ":"
 *                                                   + "\n\t" + str(err))
 *         elif isinstance(ixt, index_set):             # <<<<<<<<<<<<<<
 *             if   isinstance(other, numbers.Real):
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)
 */
          __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_ixt, __pyx_ptype_8PyClical_index_set); 
          __pyx_t_1 = (__pyx_t_2 != 0);
          if (likely(__pyx_t_1)) {

            /* "PyClical.pyx":610
 *                                                   + "\n\t" + str(err))
 *         elif isinstance(ixt, index_set):
 *             if   isinstance(other, numbers.Real):             # <<<<<<<<<<<<<<
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)
 *             elif isinstance(other, collections.abc.Sequence):
 */
            __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_numbers); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_Real); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_1 = PyObject_IsInstance(__pyx_v_other, __pyx_t_7); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 610, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_2 = (__pyx_t_1 != 0);
            if (__pyx_t_2) {

              /* "PyClical.pyx":611
 *         elif isinstance(ixt, index_set):
 *             if   isinstance(other, numbers.Real):
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)             # <<<<<<<<<<<<<<
 *             elif isinstance(other, collections.abc.Sequence):
 *                 self.instance = new Clifford(list_to_vector(other), (<index_set>ixt).unwrap())
 */
              __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_other); if (unlikely((__pyx_t_9 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 611, __pyx_L1_error)
              try {
                __pyx_t_6 = new Clifford(__pyx_f_8PyClical_9index_set_unwrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_ixt)), ((scalar_t)__pyx_t_9));
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 611, __pyx_L1_error)
              }
              __pyx_v_self->instance = __pyx_t_6;

              /* "PyClical.pyx":610
 *                                                   + "\n\t" + str(err))
 *         elif isinstance(ixt, index_set):
 *             if   isinstance(other, numbers.Real):             # <<<<<<<<<<<<<<
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)
 *             elif isinstance(other, collections.abc.Sequence):
 */
              goto __pyx_L30;
            }

            /* "PyClical.pyx":612
 *             if   isinstance(other, numbers.Real):
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)
 *             elif isinstance(other, collections.abc.Sequence):             # <<<<<<<<<<<<<<
 *                 self.instance = new Clifford(list_to_vector(other), (<index_set>ixt).unwrap())
 *             else:
 */
            __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_collections); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 612, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_abc); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 612, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 612, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_2 = PyObject_IsInstance(__pyx_v_other, __pyx_t_7); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 612, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_1 = (__pyx_t_2 != 0);
            if (likely(__pyx_t_1)) {

              /* "PyClical.pyx":613
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)
 *             elif isinstance(other, collections.abc.Sequence):
 *                 self.instance = new Clifford(list_to_vector(other), (<index_set>ixt).unwrap())             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError(error_msg_prefix + " (" + str(type(other))
 */
              try {
                __pyx_t_6 = new Clifford(__pyx_f_8PyClical_list_to_vector(__pyx_v_other), __pyx_f_8PyClical_9index_set_unwrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_ixt)));
              } catch(...) {
                __Pyx_CppExn2PyErr();
                __PYX_ERR(0, 613, __pyx_L1_error)
              }
              __pyx_v_self->instance = __pyx_t_6;

              /* "PyClical.pyx":612
 *             if   isinstance(other, numbers.Real):
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)
 *             elif isinstance(other, collections.abc.Sequence):             # <<<<<<<<<<<<<<
 *                 self.instance = new Clifford(list_to_vector(other), (<index_set>ixt).unwrap())
 *             else:
 */
              goto __pyx_L30;
            }

            /* "PyClical.pyx":615
 *                 self.instance = new Clifford(list_to_vector(other), (<index_set>ixt).unwrap())
 *             else:
 *                 raise TypeError(error_msg_prefix + " (" + str(type(other))             # <<<<<<<<<<<<<<
 *                                                  + ", " + repr(ixt) + ").")
 *         else:
 */
            /*else*/ {
              __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u__7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 615, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __pyx_t_13 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_other))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 615, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_7, __pyx_t_13); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 615, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

              /* "PyClical.pyx":616
 *             else:
 *                 raise TypeError(error_msg_prefix + " (" + str(type(other))
 *                                                  + ", " + repr(ixt) + ").")             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError(error_msg_prefix + " (" + str(type(other))
 */
              __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_t_8, __pyx_kp_u__8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 616, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = PyObject_Repr(__pyx_v_ixt); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 616, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_7 = PyNumber_Add(__pyx_t_13, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 616, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = PyNumber_Add(__pyx_t_7, __pyx_kp_u__9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 616, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

              /* "PyClical.pyx":615
 *                 self.instance = new Clifford(list_to_vector(other), (<index_set>ixt).unwrap())
 *             else:
 *                 raise TypeError(error_msg_prefix + " (" + str(type(other))             # <<<<<<<<<<<<<<
 *                                                  + ", " + repr(ixt) + ").")
 *         else:
 */
              __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 615, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_Raise(__pyx_t_7, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              __PYX_ERR(0, 615, __pyx_L1_error)
            }
            __pyx_L30:;

            /* "PyClical.pyx":609
 *                                                   + " value " + repr(other) + ":"
 *                                                   + "\n\t" + str(err))
 *         elif isinstance(ixt, index_set):             # <<<<<<<<<<<<<<
 *             if   isinstance(other, numbers.Real):
 *                 self.instance = new Clifford((<index_set>ixt).unwrap(), <scalar_t>other)
 */
            goto __pyx_L3;
          }

          /* "PyClical.pyx":618
 *                                                  + ", " + repr(ixt) + ").")
 *         else:
 *             raise TypeError(error_msg_prefix + " (" + str(type(other))             # <<<<<<<<<<<<<<
 *                                              + ", " + str(type(ixt)) + ").")
 * 
 */
          /*else*/ {
            __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u__7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_8 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_other))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "PyClical.pyx":619
 *         else:
 *             raise TypeError(error_msg_prefix + " (" + str(type(other))
 *                                              + ", " + str(type(ixt)) + ").")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
            __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_13, __pyx_kp_u__8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 619, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_ixt))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 619, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_t_8, __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 619, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_t_7, __pyx_kp_u__9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 619, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "PyClical.pyx":618
 *                                                  + ", " + repr(ixt) + ").")
 *         else:
 *             raise TypeError(error_msg_prefix + " (" + str(type(other))             # <<<<<<<<<<<<<<
 *                                              + ", " + str(type(ixt)) + ").")
 * 
 */
            __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_13); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_Raise(__pyx_t_7, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __PYX_ERR(0, 618, __pyx_L1_error)
          }
          __pyx_L3:;

          /* "PyClical.pyx":565
 *         return clifford(self)
 * 
 *     def __cinit__(self, other = 0, ixt = None):             # <<<<<<<<<<<<<<
 *         """
 *         Construct an object of type clifford.
 */

          /* function exit code */
          __pyx_r = 0;
          goto __pyx_L0;
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_16);
          __Pyx_XDECREF(__pyx_t_17);
          __Pyx_XDECREF(__pyx_t_18);
          __Pyx_AddTraceback("PyClical.clifford.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = -1;
          __pyx_L0:;
          __Pyx_XDECREF(__pyx_v_error_msg_prefix);
          __Pyx_XDECREF(__pyx_v_bother);
          __Pyx_XDECREF(__pyx_v_err);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":621
 *                                              + ", " + str(type(ixt)) + ").")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clean up by deallocating the instance of C++ class Clifford.
 */

        /* Python wrapper */
        static void __pyx_pw_8PyClical_8clifford_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
        static void __pyx_pw_8PyClical_8clifford_5__dealloc__(PyObject *__pyx_v_self) {
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
          __pyx_pf_8PyClical_8clifford_4__dealloc__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
        }

        static void __pyx_pf_8PyClical_8clifford_4__dealloc__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__dealloc__", 0);

          /* "PyClical.pyx":625
 *         Clean up by deallocating the instance of C++ class Clifford.
 *         """
 *         del self.instance             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, x):
 */
          delete __pyx_v_self->instance;

          /* "PyClical.pyx":621
 *                                              + ", " + str(type(ixt)) + ").")
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Clean up by deallocating the instance of C++ class Clifford.
 */

          /* function exit code */
          __Pyx_RefNannyFinishContext();
        }

        /* "PyClical.pyx":627
 *         del self.instance
 * 
 *     def __contains__(self, x):             # <<<<<<<<<<<<<<
 *         """
 *         Not applicable.
 */

        /* Python wrapper */
        static int __pyx_pw_8PyClical_8clifford_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_x); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_6__contains__[] = "\n        Not applicable.\n\n        >>> x=clifford(index_set({-3,4,7})); -3 in x\n        Traceback (most recent call last):\n          ...\n        TypeError: Not applicable.\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_6__contains__;
        #endif
        static int __pyx_pw_8PyClical_8clifford_7__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_x) {
          int __pyx_r;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_6__contains__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_x));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static int __pyx_pf_8PyClical_8clifford_6__contains__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_x) {
          int __pyx_r;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__contains__", 0);

          /* "PyClical.pyx":636
 *         TypeError: Not applicable.
 *         """
 *         raise TypeError("Not applicable.")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 636, __pyx_L1_error)

          /* "PyClical.pyx":627
 *         del self.instance
 * 
 *     def __contains__(self, x):             # <<<<<<<<<<<<<<
 *         """
 *         Not applicable.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = -1;
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":638
 *         raise TypeError("Not applicable.")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Not applicable.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_9__iter__(PyObject *__pyx_v_self); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_8__iter__[] = "\n        Not applicable.\n\n        >>> for a in clifford(index_set({-3,4,7})):print(a, end=\",\")\n        Traceback (most recent call last):\n          ...\n        TypeError: Not applicable.\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_8__iter__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_9__iter__(PyObject *__pyx_v_self) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_8__iter__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_8__iter__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__iter__", 0);

          /* "PyClical.pyx":647
 *         TypeError: Not applicable.
 *         """
 *         raise TypeError("Not applicable.")             # <<<<<<<<<<<<<<
 * 
 *     def reframe(self, ixt):
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(0, 647, __pyx_L1_error)

          /* "PyClical.pyx":638
 *         raise TypeError("Not applicable.")
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Not applicable.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":649
 *         raise TypeError("Not applicable.")
 * 
 *     def reframe(self, ixt):             # <<<<<<<<<<<<<<
 *         """
 *         Put self into a larger frame, containing the union of self.frame() and index set ixt.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_11reframe(PyObject *__pyx_v_self, PyObject *__pyx_v_ixt); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_10reframe[] = "\n        Put self into a larger frame, containing the union of self.frame() and index set ixt.\n        This can be used to make multiplication faster, by multiplying within a common frame.\n\n        >>> clifford(\"2+3{1}\").reframe(index_set({1,2,3}))\n        clifford(\"2+3{1}\")\n        >>> s=index_set({1,2,3});t=index_set({-3,-2,-1});x=random_clifford(s); x.reframe(t).frame() == (s|t);\n        True\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_11reframe(PyObject *__pyx_v_self, PyObject *__pyx_v_ixt) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("reframe (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_10reframe(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_ixt));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_10reframe(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_ixt) {
          PyObject *__pyx_v_error_msg_prefix = NULL;
          struct __pyx_obj_8PyClical_clifford *__pyx_v_result = NULL;
          PyObject *__pyx_v_err = NULL;
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          int __pyx_t_1;
          int __pyx_t_2;
          PyObject *__pyx_t_3 = NULL;
          PyObject *__pyx_t_4 = NULL;
          PyObject *__pyx_t_5 = NULL;
          PyObject *__pyx_t_6 = NULL;
          Clifford *__pyx_t_7;
          int __pyx_t_8;
          PyObject *__pyx_t_9 = NULL;
          PyObject *__pyx_t_10 = NULL;
          PyObject *__pyx_t_11 = NULL;
          PyObject *__pyx_t_12 = NULL;
          PyObject *__pyx_t_13 = NULL;
          int __pyx_t_14;
          char const *__pyx_t_15;
          PyObject *__pyx_t_16 = NULL;
          PyObject *__pyx_t_17 = NULL;
          PyObject *__pyx_t_18 = NULL;
          PyObject *__pyx_t_19 = NULL;
          PyObject *__pyx_t_20 = NULL;
          PyObject *__pyx_t_21 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("reframe", 0);

          /* "PyClical.pyx":659
 *         True
 *         """
 *         error_msg_prefix = "Cannot reframe"             # <<<<<<<<<<<<<<
 *         if isinstance(ixt, index_set):
 *             try:
 */
          __Pyx_INCREF(__pyx_kp_u_Cannot_reframe);
          __pyx_v_error_msg_prefix = __pyx_kp_u_Cannot_reframe;

          /* "PyClical.pyx":660
 *         """
 *         error_msg_prefix = "Cannot reframe"
 *         if isinstance(ixt, index_set):             # <<<<<<<<<<<<<<
 *             try:
 *                 result = clifford()
 */
          __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_ixt, __pyx_ptype_8PyClical_index_set); 
          __pyx_t_2 = (__pyx_t_1 != 0);
          if (likely(__pyx_t_2)) {

            /* "PyClical.pyx":661
 *         error_msg_prefix = "Cannot reframe"
 *         if isinstance(ixt, index_set):
 *             try:             # <<<<<<<<<<<<<<
 *                 result = clifford()
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 */
            {
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
              __Pyx_XGOTREF(__pyx_t_3);
              __Pyx_XGOTREF(__pyx_t_4);
              __Pyx_XGOTREF(__pyx_t_5);
              /*try:*/ {

                /* "PyClical.pyx":662
 *         if isinstance(ixt, index_set):
 *             try:
 *                 result = clifford()             # <<<<<<<<<<<<<<
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 *             except RuntimeError as err:
 */
                __pyx_t_6 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 662, __pyx_L4_error)
                __Pyx_GOTREF(__pyx_t_6);
                __pyx_v_result = ((struct __pyx_obj_8PyClical_clifford *)__pyx_t_6);
                __pyx_t_6 = 0;

                /* "PyClical.pyx":663
 *             try:
 *                 result = clifford()
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())             # <<<<<<<<<<<<<<
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " from " + str(self) + " to frame "
 */
                try {
                  __pyx_t_7 = new Clifford(__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self), __pyx_f_8PyClical_9index_set_unwrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_ixt)));
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 663, __pyx_L4_error)
                }
                __pyx_v_result->instance = __pyx_t_7;

                /* "PyClical.pyx":661
 *         error_msg_prefix = "Cannot reframe"
 *         if isinstance(ixt, index_set):
 *             try:             # <<<<<<<<<<<<<<
 *                 result = clifford()
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 */
              }
              __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
              goto __pyx_L9_try_end;
              __pyx_L4_error:;
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "PyClical.pyx":664
 *                 result = clifford()
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 *             except RuntimeError as err:             # <<<<<<<<<<<<<<
 *                 raise ValueError(error_msg_prefix + " from " + str(self) + " to frame "
 *                                                              + str(ixt) + ":"
 */
              __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
              if (__pyx_t_8) {
                __Pyx_AddTraceback("PyClical.clifford.reframe", __pyx_clineno, __pyx_lineno, __pyx_filename);
                if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(0, 664, __pyx_L6_except_error)
                __Pyx_GOTREF(__pyx_t_6);
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_9);
                __pyx_v_err = __pyx_t_9;
                /*try:*/ {

                  /* "PyClical.pyx":665
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " from " + str(self) + " to frame "             # <<<<<<<<<<<<<<
 *                                                              + str(ixt) + ":"
 *                                                              + "\n\t" + str(err))
 */
                  __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u_from); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 665, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __pyx_t_12 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 665, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_12);
                  __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 665, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                  __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_t_13, __pyx_kp_u_to_frame); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 665, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_12);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                  /* "PyClical.pyx":666
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " from " + str(self) + " to frame "
 *                                                              + str(ixt) + ":"             # <<<<<<<<<<<<<<
 *                                                              + "\n\t" + str(err))
 *         else:
 */
                  __pyx_t_13 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_ixt); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 666, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 666, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_t_11, __pyx_kp_u__5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 666, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

                  /* "PyClical.pyx":667
 *                 raise ValueError(error_msg_prefix + " from " + str(self) + " to frame "
 *                                                              + str(ixt) + ":"
 *                                                              + "\n\t" + str(err))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError(error_msg_prefix + " using (" + str(type(ixt)) + ").")
 */
                  __pyx_t_11 = __Pyx_PyUnicode_Concat(__pyx_t_13, __pyx_kp_u__6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 667, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __pyx_t_13 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_err); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 667, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_t_11, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 667, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_12);
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

                  /* "PyClical.pyx":665
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 *             except RuntimeError as err:
 *                 raise ValueError(error_msg_prefix + " from " + str(self) + " to frame "             # <<<<<<<<<<<<<<
 *                                                              + str(ixt) + ":"
 *                                                              + "\n\t" + str(err))
 */
                  __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 665, __pyx_L15_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
                  __Pyx_Raise(__pyx_t_13, 0, 0, 0);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __PYX_ERR(0, 665, __pyx_L15_error)
                }

                /* "PyClical.pyx":664
 *                 result = clifford()
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 *             except RuntimeError as err:             # <<<<<<<<<<<<<<
 *                 raise ValueError(error_msg_prefix + " from " + str(self) + " to frame "
 *                                                              + str(ixt) + ":"
 */
                /*finally:*/ {
                  __pyx_L15_error:;
                  /*exception exit:*/{
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
                    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
                    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                    if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
                    if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
                    __Pyx_XGOTREF(__pyx_t_16);
                    __Pyx_XGOTREF(__pyx_t_17);
                    __Pyx_XGOTREF(__pyx_t_18);
                    __Pyx_XGOTREF(__pyx_t_19);
                    __Pyx_XGOTREF(__pyx_t_20);
                    __Pyx_XGOTREF(__pyx_t_21);
                    __pyx_t_8 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
                    {
                      __Pyx_DECREF(__pyx_v_err);
                      __pyx_v_err = NULL;
                    }
                    if (PY_MAJOR_VERSION >= 3) {
                      __Pyx_XGIVEREF(__pyx_t_19);
                      __Pyx_XGIVEREF(__pyx_t_20);
                      __Pyx_XGIVEREF(__pyx_t_21);
                      __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
                    }
                    __Pyx_XGIVEREF(__pyx_t_16);
                    __Pyx_XGIVEREF(__pyx_t_17);
                    __Pyx_XGIVEREF(__pyx_t_18);
                    __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
                    __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
                    __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
                    goto __pyx_L6_except_error;
                  }
                }
              }
              goto __pyx_L6_except_error;
              __pyx_L6_except_error:;

              /* "PyClical.pyx":661
 *         error_msg_prefix = "Cannot reframe"
 *         if isinstance(ixt, index_set):
 *             try:             # <<<<<<<<<<<<<<
 *                 result = clifford()
 *                 result.instance = new Clifford(self.unwrap(), (<index_set>ixt).unwrap())
 */
              __Pyx_XGIVEREF(__pyx_t_3);
              __Pyx_XGIVEREF(__pyx_t_4);
              __Pyx_XGIVEREF(__pyx_t_5);
              __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
              goto __pyx_L1_error;
              __pyx_L9_try_end:;
            }

            /* "PyClical.pyx":660
 *         """
 *         error_msg_prefix = "Cannot reframe"
 *         if isinstance(ixt, index_set):             # <<<<<<<<<<<<<<
 *             try:
 *                 result = clifford()
 */
            goto __pyx_L3;
          }

          /* "PyClical.pyx":669
 *                                                              + "\n\t" + str(err))
 *         else:
 *             raise TypeError(error_msg_prefix + " using (" + str(type(ixt)) + ").")             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
          /*else*/ {
            __pyx_t_10 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_kp_u_using); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_ixt))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyUnicode_Concat(__pyx_t_6, __pyx_kp_u__9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 669, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_Raise(__pyx_t_6, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __PYX_ERR(0, 669, __pyx_L1_error)
          }
          __pyx_L3:;

          /* "PyClical.pyx":670
 *         else:
 *             raise TypeError(error_msg_prefix + " using (" + str(type(ixt)) + ").")
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(lhs, rhs, int op):
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(((PyObject *)__pyx_v_result));
          __pyx_r = ((PyObject *)__pyx_v_result);
          goto __pyx_L0;

          /* "PyClical.pyx":649
 *         raise TypeError("Not applicable.")
 * 
 *     def reframe(self, ixt):             # <<<<<<<<<<<<<<
 *         """
 *         Put self into a larger frame, containing the union of self.frame() and index set ixt.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_13);
          __Pyx_AddTraceback("PyClical.clifford.reframe", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XDECREF(__pyx_v_error_msg_prefix);
          __Pyx_XDECREF((PyObject *)__pyx_v_result);
          __Pyx_XDECREF(__pyx_v_err);
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":672
 *         return result
 * 
 *     def __richcmp__(lhs, rhs, int op):             # <<<<<<<<<<<<<<
 *         """
 *         Compare objects of type clifford.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_13__richcmp__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op); /*proto*/
        static PyObject *__pyx_pw_8PyClical_8clifford_13__richcmp__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_12__richcmp__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs), ((int)__pyx_v_op));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_12__richcmp__(struct __pyx_obj_8PyClical_clifford *__pyx_v_lhs, PyObject *__pyx_v_rhs, int __pyx_v_op) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          int __pyx_t_1;
          int __pyx_t_2;
          int __pyx_t_3;
          PyObject *__pyx_t_4 = NULL;
          PyObject *__pyx_t_5 = NULL;
          PyObject *__pyx_t_6 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__richcmp__", 0);

          /* "PyClical.pyx":691
 *         True
 *         """
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             if (lhs is None) or (rhs is None):
 *                 return bool(lhs is rhs)
 */
          __pyx_t_1 = ((__pyx_v_op == 2) != 0);
          if (__pyx_t_1) {

            /* "PyClical.pyx":692
 *         """
 *         if op == 2: # ==
 *             if (lhs is None) or (rhs is None):             # <<<<<<<<<<<<<<
 *                 return bool(lhs is rhs)
 *             else:
 */
            __pyx_t_2 = (((PyObject *)__pyx_v_lhs) == Py_None);
            __pyx_t_3 = (__pyx_t_2 != 0);
            if (!__pyx_t_3) {
            } else {
              __pyx_t_1 = __pyx_t_3;
              goto __pyx_L5_bool_binop_done;
            }
            __pyx_t_3 = (__pyx_v_rhs == Py_None);
            __pyx_t_2 = (__pyx_t_3 != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L5_bool_binop_done:;
            if (__pyx_t_1) {

              /* "PyClical.pyx":693
 *         if op == 2: # ==
 *             if (lhs is None) or (rhs is None):
 *                 return bool(lhs is rhs)             # <<<<<<<<<<<<<<
 *             else:
 *                 return bool( toClifford(lhs) == toClifford(rhs) )
 */
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_1 = (((PyObject *)__pyx_v_lhs) == __pyx_v_rhs);
              __pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 693, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_r = __pyx_t_4;
              __pyx_t_4 = 0;
              goto __pyx_L0;

              /* "PyClical.pyx":692
 *         """
 *         if op == 2: # ==
 *             if (lhs is None) or (rhs is None):             # <<<<<<<<<<<<<<
 *                 return bool(lhs is rhs)
 *             else:
 */
            }

            /* "PyClical.pyx":695
 *                 return bool(lhs is rhs)
 *             else:
 *                 return bool( toClifford(lhs) == toClifford(rhs) )             # <<<<<<<<<<<<<<
 *         elif op == 3: # !=
 *             if (lhs is None) or (rhs is None):
 */
            /*else*/ {
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_1 = (__pyx_f_8PyClical_toClifford(((PyObject *)__pyx_v_lhs)) == __pyx_f_8PyClical_toClifford(__pyx_v_rhs));
              __pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 695, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_r = __pyx_t_4;
              __pyx_t_4 = 0;
              goto __pyx_L0;
            }

            /* "PyClical.pyx":691
 *         True
 *         """
 *         if op == 2: # ==             # <<<<<<<<<<<<<<
 *             if (lhs is None) or (rhs is None):
 *                 return bool(lhs is rhs)
 */
          }

          /* "PyClical.pyx":696
 *             else:
 *                 return bool( toClifford(lhs) == toClifford(rhs) )
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             if (lhs is None) or (rhs is None):
 *                 return not bool(lhs is rhs)
 */
          __pyx_t_1 = ((__pyx_v_op == 3) != 0);
          if (__pyx_t_1) {

            /* "PyClical.pyx":697
 *                 return bool( toClifford(lhs) == toClifford(rhs) )
 *         elif op == 3: # !=
 *             if (lhs is None) or (rhs is None):             # <<<<<<<<<<<<<<
 *                 return not bool(lhs is rhs)
 *             else:
 */
            __pyx_t_2 = (((PyObject *)__pyx_v_lhs) == Py_None);
            __pyx_t_3 = (__pyx_t_2 != 0);
            if (!__pyx_t_3) {
            } else {
              __pyx_t_1 = __pyx_t_3;
              goto __pyx_L8_bool_binop_done;
            }
            __pyx_t_3 = (__pyx_v_rhs == Py_None);
            __pyx_t_2 = (__pyx_t_3 != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L8_bool_binop_done:;
            if (__pyx_t_1) {

              /* "PyClical.pyx":698
 *         elif op == 3: # !=
 *             if (lhs is None) or (rhs is None):
 *                 return not bool(lhs is rhs)             # <<<<<<<<<<<<<<
 *             else:
 *                 return bool( toClifford(lhs) != toClifford(rhs) )
 */
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_1 = (((PyObject *)__pyx_v_lhs) == __pyx_v_rhs);
              __pyx_t_4 = __Pyx_PyBool_FromLong((!((!(!__pyx_t_1)) != 0))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 698, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_r = __pyx_t_4;
              __pyx_t_4 = 0;
              goto __pyx_L0;

              /* "PyClical.pyx":697
 *                 return bool( toClifford(lhs) == toClifford(rhs) )
 *         elif op == 3: # !=
 *             if (lhs is None) or (rhs is None):             # <<<<<<<<<<<<<<
 *                 return not bool(lhs is rhs)
 *             else:
 */
            }

            /* "PyClical.pyx":700
 *                 return not bool(lhs is rhs)
 *             else:
 *                 return bool( toClifford(lhs) != toClifford(rhs) )             # <<<<<<<<<<<<<<
 *         elif isinstance(lhs, clifford) or isinstance(rhs, clifford):
 *             raise TypeError("This comparison operator is not implemented for "
 */
            /*else*/ {
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_1 = (__pyx_f_8PyClical_toClifford(((PyObject *)__pyx_v_lhs)) != __pyx_f_8PyClical_toClifford(__pyx_v_rhs));
              __pyx_t_4 = __Pyx_PyBool_FromLong((!(!__pyx_t_1))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 700, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_r = __pyx_t_4;
              __pyx_t_4 = 0;
              goto __pyx_L0;
            }

            /* "PyClical.pyx":696
 *             else:
 *                 return bool( toClifford(lhs) == toClifford(rhs) )
 *         elif op == 3: # !=             # <<<<<<<<<<<<<<
 *             if (lhs is None) or (rhs is None):
 *                 return not bool(lhs is rhs)
 */
          }

          /* "PyClical.pyx":701
 *             else:
 *                 return bool( toClifford(lhs) != toClifford(rhs) )
 *         elif isinstance(lhs, clifford) or isinstance(rhs, clifford):             # <<<<<<<<<<<<<<
 *             raise TypeError("This comparison operator is not implemented for "
 *                             + str(type(lhs)) + ", " + str(type(rhs)) + ".")
 */
          __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_lhs), __pyx_ptype_8PyClical_clifford); 
          __pyx_t_3 = (__pyx_t_2 != 0);
          if (!__pyx_t_3) {
          } else {
            __pyx_t_1 = __pyx_t_3;
            goto __pyx_L10_bool_binop_done;
          }
          __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_8PyClical_clifford); 
          __pyx_t_2 = (__pyx_t_3 != 0);
          __pyx_t_1 = __pyx_t_2;
          __pyx_L10_bool_binop_done:;
          if (unlikely(__pyx_t_1)) {

            /* "PyClical.pyx":703
 *         elif isinstance(lhs, clifford) or isinstance(rhs, clifford):
 *             raise TypeError("This comparison operator is not implemented for "
 *                             + str(type(lhs)) + ", " + str(type(rhs)) + ".")             # <<<<<<<<<<<<<<
 *         else:
 *             return NotImplemented
 */
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_lhs)))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_kp_u_This_comparison_operator_is_not, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_t_5, __pyx_kp_u__8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)Py_TYPE(__pyx_v_rhs))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __pyx_t_5 = __Pyx_PyUnicode_Concat(__pyx_t_6, __pyx_kp_u_); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 703, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "PyClical.pyx":702
 *                 return bool( toClifford(lhs) != toClifford(rhs) )
 *         elif isinstance(lhs, clifford) or isinstance(rhs, clifford):
 *             raise TypeError("This comparison operator is not implemented for "             # <<<<<<<<<<<<<<
 *                             + str(type(lhs)) + ", " + str(type(rhs)) + ".")
 *         else:
 */
            __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 702, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_Raise(__pyx_t_6, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __PYX_ERR(0, 702, __pyx_L1_error)

            /* "PyClical.pyx":701
 *             else:
 *                 return bool( toClifford(lhs) != toClifford(rhs) )
 *         elif isinstance(lhs, clifford) or isinstance(rhs, clifford):             # <<<<<<<<<<<<<<
 *             raise TypeError("This comparison operator is not implemented for "
 *                             + str(type(lhs)) + ", " + str(type(rhs)) + ".")
 */
          }

          /* "PyClical.pyx":705
 *                             + str(type(lhs)) + ", " + str(type(rhs)) + ".")
 *         else:
 *             return NotImplemented             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, ixt):
 */
          /*else*/ {
            __Pyx_XDECREF(__pyx_r);
            __Pyx_INCREF(__pyx_builtin_NotImplemented);
            __pyx_r = __pyx_builtin_NotImplemented;
            goto __pyx_L0;
          }

          /* "PyClical.pyx":672
 *         return result
 * 
 *     def __richcmp__(lhs, rhs, int op):             # <<<<<<<<<<<<<<
 *         """
 *         Compare objects of type clifford.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_6);
          __Pyx_AddTraceback("PyClical.clifford.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":707
 *             return NotImplemented
 * 
 *     def __getitem__(self, ixt):             # <<<<<<<<<<<<<<
 *         """
 *         Subscripting: map from index set to scalar coordinate.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_ixt); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_14__getitem__[] = "\n        Subscripting: map from index set to scalar coordinate.\n\n        >>> clifford(\"{1}\")[index_set(1)]\n        1.0\n        >>> clifford(\"{1}\")[index_set({1})]\n        1.0\n        >>> clifford(\"{1}\")[index_set({1,2})]\n        0.0\n        >>> clifford(\"2{1,2}\")[index_set({1,2})]\n        2.0\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_14__getitem__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_15__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_ixt) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_14__getitem__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_ixt));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_14__getitem__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_ixt) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__getitem__", 0);

          /* "PyClical.pyx":720
 *         2.0
 *         """
 *         return self.instance.getitem(toIndexSet(ixt))             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->instance->operator[](__pyx_f_8PyClical_toIndexSet(__pyx_v_ixt))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":707
 *             return NotImplemented
 * 
 *     def __getitem__(self, ixt):             # <<<<<<<<<<<<<<
 *         """
 *         Subscripting: map from index set to scalar coordinate.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":722
 *         return self.instance.getitem(toIndexSet(ixt))
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Unary -.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_17__neg__(PyObject *__pyx_v_self); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_16__neg__[] = "\n        Unary -.\n\n        >>> print(-clifford(\"{1}\"))\n        -{1}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_16__neg__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_17__neg__(PyObject *__pyx_v_self) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__neg__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_16__neg__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_16__neg__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__neg__", 0);

          /* "PyClical.pyx":729
 *         -{1}
 *         """
 *         return clifford().wrap( self.instance.neg() )             # <<<<<<<<<<<<<<
 * 
 *     def __pos__(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->operator-()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 729, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":722
 *         return self.instance.getitem(toIndexSet(ixt))
 * 
 *     def __neg__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Unary -.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__neg__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":731
 *         return clifford().wrap( self.instance.neg() )
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Unary +.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_19__pos__(PyObject *__pyx_v_self); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_18__pos__[] = "\n        Unary +.\n\n        >>> print(+clifford(\"{1}\"))\n        {1}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_18__pos__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_19__pos__(PyObject *__pyx_v_self) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__pos__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_18__pos__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_18__pos__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__pos__", 0);

          /* "PyClical.pyx":738
 *         {1}
 *         """
 *         return clifford(self)             # <<<<<<<<<<<<<<
 * 
 *     def __add__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":731
 *         return clifford().wrap( self.instance.neg() )
 * 
 *     def __pos__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Unary +.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__pos__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":740
 *         return clifford(self)
 * 
 *     def __add__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric sum.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_21__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_20__add__[] = "\n        Geometric sum.\n\n        >>> print(clifford(1) + clifford(\"{2}\"))\n        1+{2}\n        >>> print(clifford(\"{1}\") + clifford(\"{2}\"))\n        {1}+{2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_20__add__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_21__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_20__add__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_20__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__add__", 0);

          /* "PyClical.pyx":749
 *         {1}+{2}
 *         """
 *         return clifford().wrap( toClifford(lhs) + toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __iadd__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 749, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) + __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 749, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":740
 *         return clifford(self)
 * 
 *     def __add__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric sum.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":751
 *         return clifford().wrap( toClifford(lhs) + toClifford(rhs) )
 * 
 *     def __iadd__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric sum.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_23__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_22__iadd__[] = "\n        Geometric sum.\n\n        >>> x = clifford(1); x += clifford(\"{2}\"); print(x)\n        1+{2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_22__iadd__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_23__iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__iadd__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_22__iadd__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_22__iadd__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__iadd__", 0);

          /* "PyClical.pyx":758
 *         1+{2}
 *         """
 *         return self.wrap( self.unwrap() + toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) + __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":751
 *         return clifford().wrap( toClifford(lhs) + toClifford(rhs) )
 * 
 *     def __iadd__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric sum.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__iadd__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":760
 *         return self.wrap( self.unwrap() + toClifford(rhs) )
 * 
 *     def __sub__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric difference.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_25__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_24__sub__[] = "\n        Geometric difference.\n\n        >>> print(clifford(1) - clifford(\"{2}\"))\n        1-{2}\n        >>> print(clifford(\"{1}\") - clifford(\"{2}\"))\n        {1}-{2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_24__sub__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_25__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_24__sub__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_24__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__sub__", 0);

          /* "PyClical.pyx":769
 *         {1}-{2}
 *         """
 *         return clifford().wrap( toClifford(lhs) - toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __isub__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) - __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 769, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":760
 *         return self.wrap( self.unwrap() + toClifford(rhs) )
 * 
 *     def __sub__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric difference.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":771
 *         return clifford().wrap( toClifford(lhs) - toClifford(rhs) )
 * 
 *     def __isub__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric difference.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_27__isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_26__isub__[] = "\n        Geometric difference.\n\n        >>> x = clifford(1); x -= clifford(\"{2}\"); print(x)\n        1-{2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_26__isub__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_27__isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__isub__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_26__isub__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_26__isub__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__isub__", 0);

          /* "PyClical.pyx":778
 *         1-{2}
 *         """
 *         return self.wrap( self.unwrap() - toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) - __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":771
 *         return clifford().wrap( toClifford(lhs) - toClifford(rhs) )
 * 
 *     def __isub__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric difference.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__isub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":780
 *         return self.wrap( self.unwrap() - toClifford(rhs) )
 * 
 *     def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric product.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_29__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_28__mul__[] = "\n        Geometric product.\n\n        >>> print(clifford(\"{1}\") * clifford(\"{2}\"))\n        {1,2}\n        >>> print(clifford(2) * clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") * clifford(\"{1,2}\"))\n        {2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_28__mul__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_29__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_28__mul__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_28__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__mul__", 0);

          /* "PyClical.pyx":791
 *         {2}
 *         """
 *         return clifford().wrap( toClifford(lhs) * toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __imul__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) * __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 791, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":780
 *         return self.wrap( self.unwrap() - toClifford(rhs) )
 * 
 *     def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric product.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":793
 *         return clifford().wrap( toClifford(lhs) * toClifford(rhs) )
 * 
 *     def __imul__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric product.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_31__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_30__imul__[] = "\n        Geometric product.\n\n        >>> x = clifford(2); x *= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x *= clifford(\"{2}\"); print(x)\n        {1,2}\n        >>> x = clifford(\"{1}\"); x *= clifford(\"{1,2}\"); print(x)\n        {2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_30__imul__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_31__imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__imul__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_30__imul__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_30__imul__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__imul__", 0);

          /* "PyClical.pyx":804
 *         {2}
 *         """
 *         return self.wrap( self.unwrap() * toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __mod__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) * __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":793
 *         return clifford().wrap( toClifford(lhs) * toClifford(rhs) )
 * 
 *     def __imul__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric product.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__imul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":806
 *         return self.wrap( self.unwrap() * toClifford(rhs) )
 * 
 *     def __mod__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Contraction.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_33__mod__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_32__mod__[] = "\n        Contraction.\n\n        >>> print(clifford(\"{1}\") % clifford(\"{2}\"))\n        0\n        >>> print(clifford(2) % clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") % clifford(\"{1}\"))\n        1\n        >>> print(clifford(\"{1}\") % clifford(\"{1,2}\"))\n        {2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_32__mod__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_33__mod__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__mod__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_32__mod__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_32__mod__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__mod__", 0);

          /* "PyClical.pyx":819
 *         {2}
 *         """
 *         return clifford().wrap( toClifford(lhs) % toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __imod__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) % __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":806
 *         return self.wrap( self.unwrap() * toClifford(rhs) )
 * 
 *     def __mod__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Contraction.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__mod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":821
 *         return clifford().wrap( toClifford(lhs) % toClifford(rhs) )
 * 
 *     def __imod__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Contraction.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_35__imod__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_34__imod__[] = "\n        Contraction.\n\n        >>> x = clifford(\"{1}\"); x %= clifford(\"{2}\"); print(x)\n        0\n        >>> x = clifford(2); x %= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x %= clifford(\"{1}\"); print(x)\n        1\n        >>> x = clifford(\"{1}\"); x %= clifford(\"{1,2}\"); print(x)\n        {2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_34__imod__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_35__imod__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__imod__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_34__imod__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_34__imod__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__imod__", 0);

          /* "PyClical.pyx":834
 *         {2}
 *         """
 *         return self.wrap( self.unwrap() % toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __and__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) % __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":821
 *         return clifford().wrap( toClifford(lhs) % toClifford(rhs) )
 * 
 *     def __imod__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Contraction.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__imod__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":836
 *         return self.wrap( self.unwrap() % toClifford(rhs) )
 * 
 *     def __and__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Inner product.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_37__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_36__and__[] = "\n        Inner product.\n\n        >>> print(clifford(\"{1}\") & clifford(\"{2}\"))\n        0\n        >>> print(clifford(2) & clifford(\"{2}\"))\n        0\n        >>> print(clifford(\"{1}\") & clifford(\"{1}\"))\n        1\n        >>> print(clifford(\"{1}\") & clifford(\"{1,2}\"))\n        {2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_36__and__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_37__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_36__and__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_36__and__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__and__", 0);

          /* "PyClical.pyx":849
 *         {2}
 *         """
 *         return clifford().wrap( toClifford(lhs) & toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __iand__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) & __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":836
 *         return self.wrap( self.unwrap() % toClifford(rhs) )
 * 
 *     def __and__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Inner product.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":851
 *         return clifford().wrap( toClifford(lhs) & toClifford(rhs) )
 * 
 *     def __iand__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Inner product.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_39__iand__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_38__iand__[] = "\n        Inner product.\n\n        >>> x = clifford(\"{1}\"); x &= clifford(\"{2}\"); print(x)\n        0\n        >>> x = clifford(2); x &= clifford(\"{2}\"); print(x)\n        0\n        >>> x = clifford(\"{1}\"); x &= clifford(\"{1}\"); print(x)\n        1\n        >>> x = clifford(\"{1}\"); x &= clifford(\"{1,2}\"); print(x)\n        {2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_38__iand__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_39__iand__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__iand__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_38__iand__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_38__iand__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__iand__", 0);

          /* "PyClical.pyx":864
 *         {2}
 *         """
 *         return self.wrap( self.unwrap() & toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __xor__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) & __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":851
 *         return clifford().wrap( toClifford(lhs) & toClifford(rhs) )
 * 
 *     def __iand__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Inner product.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__iand__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":866
 *         return self.wrap( self.unwrap() & toClifford(rhs) )
 * 
 *     def __xor__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Outer product.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_41__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_40__xor__[] = "\n        Outer product.\n\n        >>> print(clifford(\"{1}\") ^ clifford(\"{2}\"))\n        {1,2}\n        >>> print(clifford(2) ^ clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") ^ clifford(\"{1}\"))\n        0\n        >>> print(clifford(\"{1}\") ^ clifford(\"{1,2}\"))\n        0\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_40__xor__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_41__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__xor__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_40__xor__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_40__xor__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__xor__", 0);

          /* "PyClical.pyx":879
 *         0
 *         """
 *         return clifford().wrap( toClifford(lhs) ^ toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __ixor__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) ^ __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":866
 *         return self.wrap( self.unwrap() & toClifford(rhs) )
 * 
 *     def __xor__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Outer product.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__xor__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":881
 *         return clifford().wrap( toClifford(lhs) ^ toClifford(rhs) )
 * 
 *     def __ixor__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Outer product.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_43__ixor__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_42__ixor__[] = "\n        Outer product.\n\n        >>> x = clifford(\"{1}\"); x ^= clifford(\"{2}\"); print(x)\n        {1,2}\n        >>> x = clifford(2); x ^= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x ^= clifford(\"{1}\"); print(x)\n        0\n        >>> x = clifford(\"{1}\"); x ^= clifford(\"{1,2}\"); print(x)\n        0\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_42__ixor__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_43__ixor__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__ixor__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_42__ixor__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_42__ixor__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__ixor__", 0);

          /* "PyClical.pyx":894
 *         0
 *         """
 *         return self.wrap( self.unwrap() ^ toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __truediv__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) ^ __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":881
 *         return clifford().wrap( toClifford(lhs) ^ toClifford(rhs) )
 * 
 *     def __ixor__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Outer product.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__ixor__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":896
 *         return self.wrap( self.unwrap() ^ toClifford(rhs) )
 * 
 *     def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric quotient.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_45__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_44__truediv__[] = "\n        Geometric quotient.\n\n        >>> print(clifford(\"{1}\") / clifford(\"{2}\"))\n        {1,2}\n        >>> print(clifford(2) / clifford(\"{2}\"))\n        2{2}\n        >>> print(clifford(\"{1}\") / clifford(\"{1}\"))\n        1\n        >>> print(clifford(\"{1}\") / clifford(\"{1,2}\"))\n        -{2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_44__truediv__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_45__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_44__truediv__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_44__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__truediv__", 0);

          /* "PyClical.pyx":909
 *         -{2}
 *         """
 *         return clifford().wrap( toClifford(lhs) / toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __idiv__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) / __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 909, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":896
 *         return self.wrap( self.unwrap() ^ toClifford(rhs) )
 * 
 *     def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric quotient.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":911
 *         return clifford().wrap( toClifford(lhs) / toClifford(rhs) )
 * 
 *     def __idiv__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric quotient.
 */

        /* Python wrapper */
        #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
        static PyObject *__pyx_pw_8PyClical_8clifford_47__idiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_46__idiv__[] = "\n        Geometric quotient.\n\n        >>> x = clifford(\"{1}\"); x /= clifford(\"{2}\"); print(x)\n        {1,2}\n        >>> x = clifford(2); x /= clifford(\"{2}\"); print(x)\n        2{2}\n        >>> x = clifford(\"{1}\"); x /= clifford(\"{1}\"); print(x)\n        1\n        >>> x = clifford(\"{1}\"); x /= clifford(\"{1,2}\"); print(x)\n        -{2}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_46__idiv__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_47__idiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__idiv__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_46__idiv__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }
        #endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

        #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
        static PyObject *__pyx_pf_8PyClical_8clifford_46__idiv__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__idiv__", 0);

          /* "PyClical.pyx":924
 *         -{2}
 *         """
 *         return self.wrap( self.unwrap() / toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def inv(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) / __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 924, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":911
 *         return clifford().wrap( toClifford(lhs) / toClifford(rhs) )
 * 
 *     def __idiv__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric quotient.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__idiv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }
        #endif /*!(#if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000))*/

        /* "PyClical.pyx":926
 *         return self.wrap( self.unwrap() / toClifford(rhs) )
 * 
 *     def inv(self):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric multiplicative inverse.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_49inv(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_48inv[] = "\n        Geometric multiplicative inverse.\n\n        >>> x = clifford(\"{1}\"); print(x.inv())\n        {1}\n        >>> x = clifford(2); print(x.inv())\n        0.5\n        >>> x = clifford(\"{1,2}\"); print(x.inv())\n        -{1,2}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_49inv(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("inv (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_48inv(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_48inv(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("inv", 0);

          /* "PyClical.pyx":937
 *         -{1,2}
 *         """
 *         return clifford().wrap( self.instance.inv() )             # <<<<<<<<<<<<<<
 * 
 *     def __or__(lhs, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->inv()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":926
 *         return self.wrap( self.unwrap() / toClifford(rhs) )
 * 
 *     def inv(self):             # <<<<<<<<<<<<<<
 *         """
 *         Geometric multiplicative inverse.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.inv", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":939
 *         return clifford().wrap( self.instance.inv() )
 * 
 *     def __or__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Transform left hand side, using right hand side as a transformation.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_51__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_50__or__[] = "\n        Transform left hand side, using right hand side as a transformation.\n\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); print(y|x)\n        -{1}\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); print(y|exp(x))\n        -{1}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_50__or__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_51__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_50__or__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_50__or__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__or__", 0);

          /* "PyClical.pyx":948
 *         -{1}
 *         """
 *         return clifford().wrap( toClifford(lhs) | toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __ior__(self, rhs):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), (__pyx_f_8PyClical_toClifford(__pyx_v_lhs) | __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":939
 *         return clifford().wrap( self.instance.inv() )
 * 
 *     def __or__(lhs, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Transform left hand side, using right hand side as a transformation.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":950
 *         return clifford().wrap( toClifford(lhs) | toClifford(rhs) )
 * 
 *     def __ior__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Transform left hand side, using right hand side as a transformation.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_53__ior__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_52__ior__[] = "\n        Transform left hand side, using right hand side as a transformation.\n\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); y|=x; print(y)\n        -{1}\n        >>> x=clifford(\"{1,2}\") * pi/2; y=clifford(\"{1}\"); y|=exp(x); print(y)\n        -{1}\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_52__ior__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_53__ior__(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__ior__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_52__ior__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_rhs));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_52__ior__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_rhs) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__ior__", 0);

          /* "PyClical.pyx":959
 *         -{1}
 *         """
 *         return self.wrap( self.unwrap() | toClifford(rhs) )             # <<<<<<<<<<<<<<
 * 
 *     def __pow__(self, m, dummy):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(__pyx_v_self, (__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self) | __pyx_f_8PyClical_toClifford(__pyx_v_rhs))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 959, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":950
 *         return clifford().wrap( toClifford(lhs) | toClifford(rhs) )
 * 
 *     def __ior__(self, rhs):             # <<<<<<<<<<<<<<
 *         """
 *         Transform left hand side, using right hand side as a transformation.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__ior__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":961
 *         return self.wrap( self.unwrap() | toClifford(rhs) )
 * 
 *     def __pow__(self, m, dummy):             # <<<<<<<<<<<<<<
 *         """
 *         Power: self to the m.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_55__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v_m, PyObject *__pyx_v_dummy); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_54__pow__[] = "\n        Power: self to the m.\n\n        >>> x=clifford(\"{1}\"); print(x ** 2)\n        1\n        >>> x=clifford(\"2\"); print(x ** 2)\n        4\n        >>> x=clifford(\"2+{1}\"); print(x ** 0)\n        1\n        >>> x=clifford(\"2+{1}\"); print(x ** 1)\n        2+{1}\n        >>> x=clifford(\"2+{1}\"); print(x ** 2)\n        5+4{1}\n        >>> i=clifford(\"{1,2}\"); print(exp(pi/2) * (i ** i))\n        1\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_54__pow__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_55__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v_m, PyObject *__pyx_v_dummy) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_54__pow__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_m), ((PyObject *)__pyx_v_dummy));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_54__pow__(PyObject *__pyx_v_self, PyObject *__pyx_v_m, CYTHON_UNUSED PyObject *__pyx_v_dummy) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__pow__", 0);

          /* "PyClical.pyx":978
 *         1
 *         """
 *         return pow(self, m)             # <<<<<<<<<<<<<<
 * 
 *     def pow(self, m):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __pyx_f_8PyClical_pow(__pyx_v_self, __pyx_v_m, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":961
 *         return self.wrap( self.unwrap() | toClifford(rhs) )
 * 
 *     def __pow__(self, m, dummy):             # <<<<<<<<<<<<<<
 *         """
 *         Power: self to the m.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":980
 *         return pow(self, m)
 * 
 *     def pow(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Power: self to the m.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_57pow(PyObject *__pyx_v_self, PyObject *__pyx_v_m); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_56pow[] = "\n        Power: self to the m.\n\n        >>> x=clifford(\"{1}\"); print(x.pow(2))\n        1\n        >>> x=clifford(\"2\"); print(x.pow(2))\n        4\n        >>> x=clifford(\"2+{1}\"); print(x.pow(0))\n        1\n        >>> x=clifford(\"2+{1}\"); print(x.pow(1))\n        2+{1}\n        >>> x=clifford(\"2+{1}\"); print(x.pow(2))\n        5+4{1}\n        >>> print(clifford(\"1+{1}+{1,2}\").pow(3))\n        1+3{1}+3{1,2}\n        >>> i=clifford(\"{1,2}\"); print(exp(pi/2) * i.pow(i))\n        1\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_57pow(PyObject *__pyx_v_self, PyObject *__pyx_v_m) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("pow (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_56pow(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_m));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_56pow(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_m) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_t_3;
          int __pyx_t_4;
          int __pyx_t_5;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("pow", 0);

          /* "PyClical.pyx":999
 *         1
 *         """
 *         if isinstance(m, numbers.Integral):             # <<<<<<<<<<<<<<
 *             return clifford().wrap( self.instance.pow(m) )
 *         else:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numbers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Integral); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_3 = PyObject_IsInstance(__pyx_v_m, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 999, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_4 = (__pyx_t_3 != 0);
          if (__pyx_t_4) {

            /* "PyClical.pyx":1000
 *         """
 *         if isinstance(m, numbers.Integral):
 *             return clifford().wrap( self.instance.pow(m) )             # <<<<<<<<<<<<<<
 *         else:
 *             return exp(m * log(self))
 */
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_m); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1000, __pyx_L1_error)
            __pyx_t_1 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_2), __pyx_v_self->instance->pow(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_r = __pyx_t_1;
            __pyx_t_1 = 0;
            goto __pyx_L0;

            /* "PyClical.pyx":999
 *         1
 *         """
 *         if isinstance(m, numbers.Integral):             # <<<<<<<<<<<<<<
 *             return clifford().wrap( self.instance.pow(m) )
 *         else:
 */
          }

          /* "PyClical.pyx":1002
 *             return clifford().wrap( self.instance.pow(m) )
 *         else:
 *             return exp(m * log(self))             # <<<<<<<<<<<<<<
 * 
 *     def outer_pow(self, m):
 */
          /*else*/ {
            __Pyx_XDECREF(__pyx_r);
            __pyx_t_1 = __pyx_f_8PyClical_log(((PyObject *)__pyx_v_self), 0, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1002, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_2 = PyNumber_Multiply(__pyx_v_m, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1002, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __pyx_f_8PyClical_exp(__pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1002, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_r = __pyx_t_1;
            __pyx_t_1 = 0;
            goto __pyx_L0;
          }

          /* "PyClical.pyx":980
 *         return pow(self, m)
 * 
 *     def pow(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Power: self to the m.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1004
 *             return exp(m * log(self))
 * 
 *     def outer_pow(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Outer product power.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_59outer_pow(PyObject *__pyx_v_self, PyObject *__pyx_v_m); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_58outer_pow[] = "\n        Outer product power.\n\n        >>> x=clifford(\"2+{1}\"); print(x.outer_pow(0))\n        1\n        >>> x=clifford(\"2+{1}\"); print(x.outer_pow(1))\n        2+{1}\n        >>> x=clifford(\"2+{1}\"); print(x.outer_pow(2))\n        4+4{1}\n        >>> print(clifford(\"1+{1}+{1,2}\").outer_pow(3))\n        1+3{1}+3{1,2}\n\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_59outer_pow(PyObject *__pyx_v_self, PyObject *__pyx_v_m) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("outer_pow (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_58outer_pow(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_m));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_58outer_pow(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_m) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_t_2;
          PyObject *__pyx_t_3 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("outer_pow", 0);

          /* "PyClical.pyx":1018
 * 
 *         """
 *         return clifford().wrap( self.instance.outer_pow(m) )             # <<<<<<<<<<<<<<
 * 
 *     def __call__(self, grade):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1018, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_m); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L1_error)
          __pyx_t_3 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->outer_pow(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1018, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_3;
          __pyx_t_3 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1004
 *             return exp(m * log(self))
 * 
 *     def outer_pow(self, m):             # <<<<<<<<<<<<<<
 *         """
 *         Outer product power.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_3);
          __Pyx_AddTraceback("PyClical.clifford.outer_pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1020
 *         return clifford().wrap( self.instance.outer_pow(m) )
 * 
 *     def __call__(self, grade):             # <<<<<<<<<<<<<<
 *         """
 *         Pure grade-vector part.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_61__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_60__call__[] = "\n        Pure grade-vector part.\n\n        >>> print(clifford(\"{1}\")(1))\n        {1}\n        >>> print(clifford(\"{1}\")(0))\n        0\n        >>> print(clifford(\"1+{1}+{1,2}\")(0))\n        1\n        >>> print(clifford(\"1+{1}+{1,2}\")(1))\n        {1}\n        >>> print(clifford(\"1+{1}+{1,2}\")(2))\n        {1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\")(3))\n        0\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_60__call__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_61__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
          PyObject *__pyx_v_grade = 0;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
          {
            static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_grade,0};
            PyObject* values[1] = {0};
            if (unlikely(__pyx_kwds)) {
              Py_ssize_t kw_args;
              const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
              switch (pos_args) {
                case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                CYTHON_FALLTHROUGH;
                case  0: break;
                default: goto __pyx_L5_argtuple_error;
              }
              kw_args = PyDict_Size(__pyx_kwds);
              switch (pos_args) {
                case  0:
                if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grade)) != 0)) kw_args--;
                else goto __pyx_L5_argtuple_error;
              }
              if (unlikely(kw_args > 0)) {
                if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 1020, __pyx_L3_error)
              }
            } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
              goto __pyx_L5_argtuple_error;
            } else {
              values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
            }
            __pyx_v_grade = values[0];
          }
          goto __pyx_L4_argument_unpacking_done;
          __pyx_L5_argtuple_error:;
          __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1020, __pyx_L3_error)
          __pyx_L3_error:;
          __Pyx_AddTraceback("PyClical.clifford.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __Pyx_RefNannyFinishContext();
          return NULL;
          __pyx_L4_argument_unpacking_done:;
          __pyx_r = __pyx_pf_8PyClical_8clifford_60__call__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), __pyx_v_grade);

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_60__call__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_grade) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_t_2;
          PyObject *__pyx_t_3 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__call__", 0);

          /* "PyClical.pyx":1037
 *         0
 *         """
 *         return clifford().wrap( self.instance.call(grade) )             # <<<<<<<<<<<<<<
 * 
 *     def scalar(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_grade); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
          __pyx_t_3 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->operator()(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_3;
          __pyx_t_3 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1020
 *         return clifford().wrap( self.instance.outer_pow(m) )
 * 
 *     def __call__(self, grade):             # <<<<<<<<<<<<<<
 *         """
 *         Pure grade-vector part.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_3);
          __Pyx_AddTraceback("PyClical.clifford.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1039
 *         return clifford().wrap( self.instance.call(grade) )
 * 
 *     def scalar(self):             # <<<<<<<<<<<<<<
 *         """
 *         Scalar part.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_63scalar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_62scalar[] = "\n        Scalar part.\n\n        >>> clifford(\"1+{1}+{1,2}\").scalar()\n        1.0\n        >>> clifford(\"{1,2}\").scalar()\n        0.0\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_63scalar(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("scalar (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_62scalar(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_62scalar(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("scalar", 0);

          /* "PyClical.pyx":1048
 *         0.0
 *         """
 *         return self.instance.scalar()             # <<<<<<<<<<<<<<
 * 
 *     def pure(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->instance->scalar()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1039
 *         return clifford().wrap( self.instance.call(grade) )
 * 
 *     def scalar(self):             # <<<<<<<<<<<<<<
 *         """
 *         Scalar part.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1050
 *         return self.instance.scalar()
 * 
 *     def pure(self):             # <<<<<<<<<<<<<<
 *         """
 *         Pure part.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_65pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_64pure[] = "\n        Pure part.\n\n        >>> print(clifford(\"1+{1}+{1,2}\").pure())\n        {1}+{1,2}\n        >>> print(clifford(\"{1,2}\").pure())\n        {1,2}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_65pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("pure (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_64pure(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_64pure(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("pure", 0);

          /* "PyClical.pyx":1059
 *         {1,2}
 *         """
 *         return clifford().wrap( self.instance.pure() )             # <<<<<<<<<<<<<<
 * 
 *     def even(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->pure()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1059, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1050
 *         return self.instance.scalar()
 * 
 *     def pure(self):             # <<<<<<<<<<<<<<
 *         """
 *         Pure part.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.pure", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1061
 *         return clifford().wrap( self.instance.pure() )
 * 
 *     def even(self):             # <<<<<<<<<<<<<<
 *         """
 *         Even part of multivector, sum of even grade terms.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_67even(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_66even[] = "\n        Even part of multivector, sum of even grade terms.\n\n        >>> print(clifford(\"1+{1}+{1,2}\").even())\n        1+{1,2}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_67even(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("even (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_66even(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_66even(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("even", 0);

          /* "PyClical.pyx":1068
 *         1+{1,2}
 *         """
 *         return clifford().wrap( self.instance.even() )             # <<<<<<<<<<<<<<
 * 
 *     def odd(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->even()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1061
 *         return clifford().wrap( self.instance.pure() )
 * 
 *     def even(self):             # <<<<<<<<<<<<<<
 *         """
 *         Even part of multivector, sum of even grade terms.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.even", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1070
 *         return clifford().wrap( self.instance.even() )
 * 
 *     def odd(self):             # <<<<<<<<<<<<<<
 *         """
 *         Odd part of multivector, sum of odd grade terms.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_69odd(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_68odd[] = "\n        Odd part of multivector, sum of odd grade terms.\n\n        >>> print(clifford(\"1+{1}+{1,2}\").odd())\n        {1}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_69odd(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("odd (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_68odd(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_68odd(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("odd", 0);

          /* "PyClical.pyx":1077
 *         {1}
 *         """
 *         return clifford().wrap( self.instance.odd() )             # <<<<<<<<<<<<<<
 * 
 *     def vector_part(self, frm = None):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->odd()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1077, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1070
 *         return clifford().wrap( self.instance.even() )
 * 
 *     def odd(self):             # <<<<<<<<<<<<<<
 *         """
 *         Odd part of multivector, sum of odd grade terms.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.odd", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1079
 *         return clifford().wrap( self.instance.odd() )
 * 
 *     def vector_part(self, frm = None):             # <<<<<<<<<<<<<<
 *         """
 *         Vector part of multivector, as a Python list, with respect to frm.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_71vector_part(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_70vector_part[] = "\n        Vector part of multivector, as a Python list, with respect to frm.\n\n        >>> print(clifford(\"1+2{1}+3{2}+4{1,2}\").vector_part())\n        [2.0, 3.0]\n        >>> print(clifford(\"1+2{1}+3{2}+4{1,2}\").vector_part(index_set({-1,1,2})))\n        [0.0, 2.0, 3.0]\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_71vector_part(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
          PyObject *__pyx_v_frm = 0;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("vector_part (wrapper)", 0);
          {
            static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frm,0};
            PyObject* values[1] = {0};
            values[0] = ((PyObject *)Py_None);
            if (unlikely(__pyx_kwds)) {
              Py_ssize_t kw_args;
              const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
              switch (pos_args) {
                case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                CYTHON_FALLTHROUGH;
                case  0: break;
                default: goto __pyx_L5_argtuple_error;
              }
              kw_args = PyDict_Size(__pyx_kwds);
              switch (pos_args) {
                case  0:
                if (kw_args > 0) {
                  PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frm);
                  if (value) { values[0] = value; kw_args--; }
                }
              }
              if (unlikely(kw_args > 0)) {
                if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "vector_part") < 0)) __PYX_ERR(0, 1079, __pyx_L3_error)
              }
            } else {
              switch (PyTuple_GET_SIZE(__pyx_args)) {
                case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                CYTHON_FALLTHROUGH;
                case  0: break;
                default: goto __pyx_L5_argtuple_error;
              }
            }
            __pyx_v_frm = values[0];
          }
          goto __pyx_L4_argument_unpacking_done;
          __pyx_L5_argtuple_error:;
          __Pyx_RaiseArgtupleInvalid("vector_part", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1079, __pyx_L3_error)
          __pyx_L3_error:;
          __Pyx_AddTraceback("PyClical.clifford.vector_part", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __Pyx_RefNannyFinishContext();
          return NULL;
          __pyx_L4_argument_unpacking_done:;
          __pyx_r = __pyx_pf_8PyClical_8clifford_70vector_part(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), __pyx_v_frm);

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_70vector_part(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_frm) {
          PyObject *__pyx_v_error_msg_prefix = NULL;
          std::vector<scalar_t>  __pyx_v_vec;
          int __pyx_v_n;
          int __pyx_v_i;
          PyObject *__pyx_v_lst = NULL;
          PyObject *__pyx_v_err = NULL;
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          PyObject *__pyx_t_3 = NULL;
          int __pyx_t_4;
          int __pyx_t_5;
          std::vector<scalar_t>  __pyx_t_6;
          PyObject *__pyx_t_7 = NULL;
          int __pyx_t_8;
          int __pyx_t_9;
          int __pyx_t_10;
          PyObject *__pyx_t_11 = NULL;
          PyObject *__pyx_t_12 = NULL;
          PyObject *__pyx_t_13 = NULL;
          PyObject *__pyx_t_14 = NULL;
          PyObject *__pyx_t_15 = NULL;
          char const *__pyx_t_16;
          PyObject *__pyx_t_17 = NULL;
          PyObject *__pyx_t_18 = NULL;
          PyObject *__pyx_t_19 = NULL;
          PyObject *__pyx_t_20 = NULL;
          PyObject *__pyx_t_21 = NULL;
          PyObject *__pyx_t_22 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("vector_part", 0);

          /* "PyClical.pyx":1088
 *         [0.0, 2.0, 3.0]
 *         """
 *         error_msg_prefix = "Cannot take vector part of "             # <<<<<<<<<<<<<<
 *         cdef vector[scalar_t] vec
 *         cdef int n
 */
          __Pyx_INCREF(__pyx_kp_u_Cannot_take_vector_part_of);
          __pyx_v_error_msg_prefix = __pyx_kp_u_Cannot_take_vector_part_of;

          /* "PyClical.pyx":1092
 *         cdef int n
 *         cdef int i
 *         try:             # <<<<<<<<<<<<<<
 *             if frm is None:
 *                 vec = self.instance.vector_part()
 */
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
            __Pyx_XGOTREF(__pyx_t_1);
            __Pyx_XGOTREF(__pyx_t_2);
            __Pyx_XGOTREF(__pyx_t_3);
            /*try:*/ {

              /* "PyClical.pyx":1093
 *         cdef int i
 *         try:
 *             if frm is None:             # <<<<<<<<<<<<<<
 *                 vec = self.instance.vector_part()
 *             else:
 */
              __pyx_t_4 = (__pyx_v_frm == Py_None);
              __pyx_t_5 = (__pyx_t_4 != 0);
              if (__pyx_t_5) {

                /* "PyClical.pyx":1094
 *         try:
 *             if frm is None:
 *                 vec = self.instance.vector_part()             # <<<<<<<<<<<<<<
 *             else:
 *                 vec = self.instance.vector_part((<index_set>frm).unwrap())
 */
                __pyx_t_6 = __pyx_v_self->instance->vector_part(); 
                __pyx_v_vec = __pyx_t_6;

                /* "PyClical.pyx":1093
 *         cdef int i
 *         try:
 *             if frm is None:             # <<<<<<<<<<<<<<
 *                 vec = self.instance.vector_part()
 *             else:
 */
                goto __pyx_L9;
              }

              /* "PyClical.pyx":1096
 *                 vec = self.instance.vector_part()
 *             else:
 *                 vec = self.instance.vector_part((<index_set>frm).unwrap())             # <<<<<<<<<<<<<<
 *             n = vec.size()
 *             lst = [0.0]*n
 */
              /*else*/ {
                try {
                  __pyx_t_6 = __pyx_v_self->instance->vector_part(__pyx_f_8PyClical_9index_set_unwrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_v_frm)));
                } catch(...) {
                  __Pyx_CppExn2PyErr();
                  __PYX_ERR(0, 1096, __pyx_L3_error)
                }
                __pyx_v_vec = __pyx_t_6;
              }
              __pyx_L9:;

              /* "PyClical.pyx":1097
 *             else:
 *                 vec = self.instance.vector_part((<index_set>frm).unwrap())
 *             n = vec.size()             # <<<<<<<<<<<<<<
 *             lst = [0.0]*n
 *             for i in xrange(n):
 */
              __pyx_v_n = __pyx_v_vec.size();

              /* "PyClical.pyx":1098
 *                 vec = self.instance.vector_part((<index_set>frm).unwrap())
 *             n = vec.size()
 *             lst = [0.0]*n             # <<<<<<<<<<<<<<
 *             for i in xrange(n):
 *                 lst[i] = vec[i]
 */
              __pyx_t_7 = PyList_New(1 * ((__pyx_v_n<0) ? 0:__pyx_v_n)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1098, __pyx_L3_error)
              __Pyx_GOTREF(__pyx_t_7);
              { Py_ssize_t __pyx_temp;
                for (__pyx_temp=0; __pyx_temp < __pyx_v_n; __pyx_temp++) {
                  __Pyx_INCREF(__pyx_float_0_0);
                  __Pyx_GIVEREF(__pyx_float_0_0);
                  PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_float_0_0);
                }
              }
              __pyx_v_lst = ((PyObject*)__pyx_t_7);
              __pyx_t_7 = 0;

              /* "PyClical.pyx":1099
 *             n = vec.size()
 *             lst = [0.0]*n
 *             for i in xrange(n):             # <<<<<<<<<<<<<<
 *                 lst[i] = vec[i]
 *             return lst
 */
              __pyx_t_8 = __pyx_v_n;
              __pyx_t_9 = __pyx_t_8;
              for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
                __pyx_v_i = __pyx_t_10;

                /* "PyClical.pyx":1100
 *             lst = [0.0]*n
 *             for i in xrange(n):
 *                 lst[i] = vec[i]             # <<<<<<<<<<<<<<
 *             return lst
 *         except RuntimeError as err:
 */
                __pyx_t_7 = PyFloat_FromDouble((__pyx_v_vec[__pyx_v_i])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1100, __pyx_L3_error)
                __Pyx_GOTREF(__pyx_t_7);
                if (unlikely(__Pyx_SetItemInt(__pyx_v_lst, __pyx_v_i, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 1, 1, 1) < 0)) __PYX_ERR(0, 1100, __pyx_L3_error)
                __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
              }

              /* "PyClical.pyx":1101
 *             for i in xrange(n):
 *                 lst[i] = vec[i]
 *             return lst             # <<<<<<<<<<<<<<
 *         except RuntimeError as err:
 *             raise ValueError(error_msg_prefix + str(self) + " using invalid "
 */
              __Pyx_XDECREF(__pyx_r);
              __Pyx_INCREF(__pyx_v_lst);
              __pyx_r = __pyx_v_lst;
              goto __pyx_L7_try_return;

              /* "PyClical.pyx":1092
 *         cdef int n
 *         cdef int i
 *         try:             # <<<<<<<<<<<<<<
 *             if frm is None:
 *                 vec = self.instance.vector_part()
 */
            }
            __pyx_L3_error:;
            __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

            /* "PyClical.pyx":1102
 *                 lst[i] = vec[i]
 *             return lst
 *         except RuntimeError as err:             # <<<<<<<<<<<<<<
 *             raise ValueError(error_msg_prefix + str(self) + " using invalid "
 *                                               + repr(frm) + " as frame:\n\t"
 */
            __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
            if (__pyx_t_8) {
              __Pyx_AddTraceback("PyClical.clifford.vector_part", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 1102, __pyx_L5_except_error)
              __Pyx_GOTREF(__pyx_t_7);
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_11);
              __pyx_v_err = __pyx_t_11;
              /*try:*/ {

                /* "PyClical.pyx":1103
 *             return lst
 *         except RuntimeError as err:
 *             raise ValueError(error_msg_prefix + str(self) + " using invalid "             # <<<<<<<<<<<<<<
 *                                               + repr(frm) + " as frame:\n\t"
 *                                               + str(err))
 */
                __pyx_t_13 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1103, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_14 = __Pyx_PyUnicode_Concat(__pyx_v_error_msg_prefix, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1103, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __pyx_t_13 = __Pyx_PyUnicode_Concat(__pyx_t_14, __pyx_kp_u_using_invalid); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1103, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

                /* "PyClical.pyx":1104
 *         except RuntimeError as err:
 *             raise ValueError(error_msg_prefix + str(self) + " using invalid "
 *                                               + repr(frm) + " as frame:\n\t"             # <<<<<<<<<<<<<<
 *                                               + str(err))
 * 
 */
                __pyx_t_14 = PyObject_Repr(__pyx_v_frm); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1104, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_14);
                __pyx_t_15 = PyNumber_Add(__pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1104, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __pyx_t_14 = PyNumber_Add(__pyx_t_15, __pyx_kp_u_as_frame); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1104, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_14);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                /* "PyClical.pyx":1105
 *             raise ValueError(error_msg_prefix + str(self) + " using invalid "
 *                                               + repr(frm) + " as frame:\n\t"
 *                                               + str(err))             # <<<<<<<<<<<<<<
 * 
 *     def involute(self):
 */
                __pyx_t_15 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_err); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1105, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_13 = PyNumber_Add(__pyx_t_14, __pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1105, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

                /* "PyClical.pyx":1103
 *             return lst
 *         except RuntimeError as err:
 *             raise ValueError(error_msg_prefix + str(self) + " using invalid "             # <<<<<<<<<<<<<<
 *                                               + repr(frm) + " as frame:\n\t"
 *                                               + str(err))
 */
                __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1103, __pyx_L17_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_Raise(__pyx_t_15, 0, 0, 0);
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __PYX_ERR(0, 1103, __pyx_L17_error)
              }

              /* "PyClical.pyx":1102
 *                 lst[i] = vec[i]
 *             return lst
 *         except RuntimeError as err:             # <<<<<<<<<<<<<<
 *             raise ValueError(error_msg_prefix + str(self) + " using invalid "
 *                                               + repr(frm) + " as frame:\n\t"
 */
              /*finally:*/ {
                __pyx_L17_error:;
                /*exception exit:*/{
                  __Pyx_PyThreadState_declare
                  __Pyx_PyThreadState_assign
                  __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
                  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
                  if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
                  if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
                  __Pyx_XGOTREF(__pyx_t_17);
                  __Pyx_XGOTREF(__pyx_t_18);
                  __Pyx_XGOTREF(__pyx_t_19);
                  __Pyx_XGOTREF(__pyx_t_20);
                  __Pyx_XGOTREF(__pyx_t_21);
                  __Pyx_XGOTREF(__pyx_t_22);
                  __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_16 = __pyx_filename;
                  {
                    __Pyx_DECREF(__pyx_v_err);
                    __pyx_v_err = NULL;
                  }
                  if (PY_MAJOR_VERSION >= 3) {
                    __Pyx_XGIVEREF(__pyx_t_20);
                    __Pyx_XGIVEREF(__pyx_t_21);
                    __Pyx_XGIVEREF(__pyx_t_22);
                    __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_21, __pyx_t_22);
                  }
                  __Pyx_XGIVEREF(__pyx_t_17);
                  __Pyx_XGIVEREF(__pyx_t_18);
                  __Pyx_XGIVEREF(__pyx_t_19);
                  __Pyx_ErrRestore(__pyx_t_17, __pyx_t_18, __pyx_t_19);
                  __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0;
                  __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_16;
                  goto __pyx_L5_except_error;
                }
              }
            }
            goto __pyx_L5_except_error;
            __pyx_L5_except_error:;

            /* "PyClical.pyx":1092
 *         cdef int n
 *         cdef int i
 *         try:             # <<<<<<<<<<<<<<
 *             if frm is None:
 *                 vec = self.instance.vector_part()
 */
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
            goto __pyx_L1_error;
            __pyx_L7_try_return:;
            __Pyx_XGIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
            goto __pyx_L0;
          }

          /* "PyClical.pyx":1079
 *         return clifford().wrap( self.instance.odd() )
 * 
 *     def vector_part(self, frm = None):             # <<<<<<<<<<<<<<
 *         """
 *         Vector part of multivector, as a Python list, with respect to frm.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_14);
          __Pyx_XDECREF(__pyx_t_15);
          __Pyx_AddTraceback("PyClical.clifford.vector_part", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XDECREF(__pyx_v_error_msg_prefix);
          __Pyx_XDECREF(__pyx_v_lst);
          __Pyx_XDECREF(__pyx_v_err);
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1107
 *                                               + str(err))
 * 
 *     def involute(self):             # <<<<<<<<<<<<<<
 *         """
 *         Main involution, each {i} is replaced by -{i} in each term,
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_73involute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_72involute[] = "\n        Main involution, each {i} is replaced by -{i} in each term,\n        eg. clifford(\"{1}\") -> -clifford(\"{1}\").\n\n        >>> print(clifford(\"{1}\").involute())\n        -{1}\n        >>> print((clifford(\"{2}\") * clifford(\"{1}\")).involute())\n        -{1,2}\n        >>> print((clifford(\"{1}\") * clifford(\"{2}\")).involute())\n        {1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\").involute())\n        1-{1}+{1,2}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_73involute(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("involute (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_72involute(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_72involute(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("involute", 0);

          /* "PyClical.pyx":1121
 *         1-{1}+{1,2}
 *         """
 *         return clifford().wrap( self.instance.involute() )             # <<<<<<<<<<<<<<
 * 
 *     def reverse(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1121, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->involute()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1107
 *                                               + str(err))
 * 
 *     def involute(self):             # <<<<<<<<<<<<<<
 *         """
 *         Main involution, each {i} is replaced by -{i} in each term,
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.involute", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1123
 *         return clifford().wrap( self.instance.involute() )
 * 
 *     def reverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reversion, eg. clifford("{1}")*clifford("{2}") -> clifford("{2}")*clifford("{1}").
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_75reverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_74reverse[] = "\n        Reversion, eg. clifford(\"{1}\")*clifford(\"{2}\") -> clifford(\"{2}\")*clifford(\"{1}\").\n\n        >>> print(clifford(\"{1}\").reverse())\n        {1}\n        >>> print((clifford(\"{2}\") * clifford(\"{1}\")).reverse())\n        {1,2}\n        >>> print((clifford(\"{1}\") * clifford(\"{2}\")).reverse())\n        -{1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\").reverse())\n        1+{1}-{1,2}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_75reverse(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("reverse (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_74reverse(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_74reverse(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("reverse", 0);

          /* "PyClical.pyx":1136
 *         1+{1}-{1,2}
 *         """
 *         return clifford().wrap( self.instance.reverse() )             # <<<<<<<<<<<<<<
 * 
 *     def conj(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->reverse()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1123
 *         return clifford().wrap( self.instance.involute() )
 * 
 *     def reverse(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reversion, eg. clifford("{1}")*clifford("{2}") -> clifford("{2}")*clifford("{1}").
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1138
 *         return clifford().wrap( self.instance.reverse() )
 * 
 *     def conj(self):             # <<<<<<<<<<<<<<
 *         """
 *         Conjugation, reverse o involute == involute o reverse.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_77conj(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_76conj[] = "\n        Conjugation, reverse o involute == involute o reverse.\n\n        >>> print((clifford(\"{1}\")).conj())\n        -{1}\n        >>> print((clifford(\"{2}\") * clifford(\"{1}\")).conj())\n        {1,2}\n        >>> print((clifford(\"{1}\") * clifford(\"{2}\")).conj())\n        -{1,2}\n        >>> print(clifford(\"1+{1}+{1,2}\").conj())\n        1-{1}-{1,2}\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_77conj(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("conj (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_76conj(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_76conj(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("conj", 0);

          /* "PyClical.pyx":1151
 *         1-{1}-{1,2}
 *         """
 *         return clifford().wrap( self.instance.conj() )             # <<<<<<<<<<<<<<
 * 
 *     def quad(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1151, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->conj()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1151, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1138
 *         return clifford().wrap( self.instance.reverse() )
 * 
 *     def conj(self):             # <<<<<<<<<<<<<<
 *         """
 *         Conjugation, reverse o involute == involute o reverse.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.conj", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1153
 *         return clifford().wrap( self.instance.conj() )
 * 
 *     def quad(self):             # <<<<<<<<<<<<<<
 *         """
 *         Quadratic form == (rev(x)*x)(0).
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_79quad(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_78quad[] = "\n        Quadratic form == (rev(x)*x)(0).\n\n        >>> print(clifford(\"1+{1}+{1,2}\").quad())\n        3.0\n        >>> print(clifford(\"1+{-1}+{1,2}+{1,2,3}\").quad())\n        2.0\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_79quad(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("quad (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_78quad(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_78quad(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("quad", 0);

          /* "PyClical.pyx":1162
 *         2.0
 *         """
 *         return self.instance.quad()             # <<<<<<<<<<<<<<
 * 
 *     def norm(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->instance->quad()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1153
 *         return clifford().wrap( self.instance.conj() )
 * 
 *     def quad(self):             # <<<<<<<<<<<<<<
 *         """
 *         Quadratic form == (rev(x)*x)(0).
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.quad", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1164
 *         return self.instance.quad()
 * 
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         """
 *         Norm == sum of squares of coordinates.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_81norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_80norm[] = "\n        Norm == sum of squares of coordinates.\n\n        >>> clifford(\"1+{1}+{1,2}\").norm()\n        3.0\n        >>> clifford(\"1+{-1}+{1,2}+{1,2,3}\").norm()\n        4.0\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_81norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("norm (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_80norm(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_80norm(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("norm", 0);

          /* "PyClical.pyx":1173
 *         4.0
 *         """
 *         return self.instance.norm()             # <<<<<<<<<<<<<<
 * 
 *     def abs(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->instance->norm()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1173, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1164
 *         return self.instance.quad()
 * 
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         """
 *         Norm == sum of squares of coordinates.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1175
 *         return self.instance.norm()
 * 
 *     def abs(self):             # <<<<<<<<<<<<<<
 *         """
 *         Absolute value: square root of norm.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_83abs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_82abs[] = "\n        Absolute value: square root of norm.\n\n        >>> clifford(\"1+{-1}+{1,2}+{1,2,3}\").abs()\n        2.0\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_83abs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("abs (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_82abs(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_82abs(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("abs", 0);

          /* "PyClical.pyx":1182
 *         2.0
 *         """
 *         return glucat.abs( self.unwrap() )             # <<<<<<<<<<<<<<
 * 
 *     def max_abs(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = PyFloat_FromDouble(abs(__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1182, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1175
 *         return self.instance.norm()
 * 
 *     def abs(self):             # <<<<<<<<<<<<<<
 *         """
 *         Absolute value: square root of norm.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.abs", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1184
 *         return glucat.abs( self.unwrap() )
 * 
 *     def max_abs(self):             # <<<<<<<<<<<<<<
 *         """
 *         Maximum of absolute values of components of multivector: multivector infinity norm.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_85max_abs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_84max_abs[] = "\n        Maximum of absolute values of components of multivector: multivector infinity norm.\n\n        >>> clifford(\"1+{-1}+{1,2}+{1,2,3}\").max_abs()\n        1.0\n        >>> clifford(\"3+2{1}+{1,2}\").max_abs()\n        3.0\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_85max_abs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("max_abs (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_84max_abs(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_84max_abs(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("max_abs", 0);

          /* "PyClical.pyx":1193
 *         3.0
 *         """
 *         return self.instance.max_abs()             # <<<<<<<<<<<<<<
 * 
 *     def truncated(self, limit):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->instance->max_abs()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1193, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1184
 *         return glucat.abs( self.unwrap() )
 * 
 *     def max_abs(self):             # <<<<<<<<<<<<<<
 *         """
 *         Maximum of absolute values of components of multivector: multivector infinity norm.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.max_abs", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1195
 *         return self.instance.max_abs()
 * 
 *     def truncated(self, limit):             # <<<<<<<<<<<<<<
 *         """
 *         Remove all terms of self with relative size smaller than limit.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_87truncated(PyObject *__pyx_v_self, PyObject *__pyx_v_limit); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_86truncated[] = "\n        Remove all terms of self with relative size smaller than limit.\n\n        >>> clifford(\"1e8+{1}+1e-8{1,2}\").truncated(1.0e-6)\n        clifford(\"100000000\")\n        >>> clifford(\"1e4+{1}+1e-4{1,2}\").truncated(1.0e-6)\n        clifford(\"10000+{1}\")\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_87truncated(PyObject *__pyx_v_self, PyObject *__pyx_v_limit) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("truncated (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_86truncated(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v_limit));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_86truncated(struct __pyx_obj_8PyClical_clifford *__pyx_v_self, PyObject *__pyx_v_limit) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          scalar_t __pyx_t_2;
          PyObject *__pyx_t_3 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("truncated", 0);

          /* "PyClical.pyx":1204
 *         clifford("10000+{1}")
 *         """
 *         return clifford().wrap( self.instance.truncated(limit) )             # <<<<<<<<<<<<<<
 * 
 *     def isinf(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1204, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_limit); if (unlikely((__pyx_t_2 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1204, __pyx_L1_error)
          __pyx_t_3 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), __pyx_v_self->instance->truncated(__pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1204, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_3;
          __pyx_t_3 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1195
 *         return self.instance.max_abs()
 * 
 *     def truncated(self, limit):             # <<<<<<<<<<<<<<
 *         """
 *         Remove all terms of self with relative size smaller than limit.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_3);
          __Pyx_AddTraceback("PyClical.clifford.truncated", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1206
 *         return clifford().wrap( self.instance.truncated(limit) )
 * 
 *     def isinf(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a multivector contains any infinite values.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_89isinf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_88isinf[] = "\n        Check if a multivector contains any infinite values.\n\n        >>> clifford().isinf()\n        False\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_89isinf(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("isinf (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_88isinf(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_88isinf(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("isinf", 0);

          /* "PyClical.pyx":1213
 *         False
 *         """
 *         return self.instance.isnan()             # <<<<<<<<<<<<<<
 * 
 *     def isnan(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->instance->isnan()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1206
 *         return clifford().wrap( self.instance.truncated(limit) )
 * 
 *     def isinf(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a multivector contains any infinite values.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.isinf", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1215
 *         return self.instance.isnan()
 * 
 *     def isnan(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a multivector contains any IEEE NaN values.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_91isnan(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_90isnan[] = "\n        Check if a multivector contains any IEEE NaN values.\n\n        >>> clifford().isnan()\n        False\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_91isnan(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("isnan (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_90isnan(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_90isnan(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("isnan", 0);

          /* "PyClical.pyx":1222
 *         False
 *         """
 *         return self.instance.isnan()             # <<<<<<<<<<<<<<
 * 
 *     def frame(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->instance->isnan()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1215
 *         return self.instance.isnan()
 * 
 *     def isnan(self):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a multivector contains any IEEE NaN values.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.isnan", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1224
 *         return self.instance.isnan()
 * 
 *     def frame(self):             # <<<<<<<<<<<<<<
 *         """
 *         Subalgebra generated by all generators of terms of given multivector.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_93frame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_92frame[] = "\n        Subalgebra generated by all generators of terms of given multivector.\n\n        >>> print(clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").frame())\n        {-2,-1,1,2,7}\n        >>> s=clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").frame(); type(s)\n        <class 'PyClical.index_set'>\n        ";
        static PyObject *__pyx_pw_8PyClical_8clifford_93frame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("frame (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_92frame(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_92frame(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          PyObject *__pyx_t_2 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("frame", 0);

          /* "PyClical.pyx":1233
 *         <class 'PyClical.index_set'>
 *         """
 *         return index_set().wrap( self.instance.frame() )             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_index_set)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1233, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_f_8PyClical_9index_set_wrap(((struct __pyx_obj_8PyClical_index_set *)__pyx_t_1), __pyx_v_self->instance->frame()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1233, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1224
 *         return self.instance.isnan()
 * 
 *     def frame(self):             # <<<<<<<<<<<<<<
 *         """
 *         Subalgebra generated by all generators of terms of given multivector.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_XDECREF(__pyx_t_2);
          __Pyx_AddTraceback("PyClical.clifford.frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1235
 *         return index_set().wrap( self.instance.frame() )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The official string representation of self.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_95__repr__(PyObject *__pyx_v_self); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_94__repr__[] = "\n        The \342\200\234official\342\200\235 string representation of self.\n\n        >>> clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").__repr__()\n        'clifford(\"1+3{-1}+2{1,2}+4{-2,7}\")'\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_94__repr__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_95__repr__(PyObject *__pyx_v_self) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_94__repr__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_94__repr__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__repr__", 0);

          /* "PyClical.pyx":1242
 *         'clifford("1+3{-1}+2{1,2}+4{-2,7}")'
 *         """
 *         return clifford_to_repr( self.unwrap() ).decode()             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_decode_cpp_string(clifford_to_repr(__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self)), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1242, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1235
 *         return index_set().wrap( self.instance.frame() )
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The official string representation of self.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1244
 *         return clifford_to_repr( self.unwrap() ).decode()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The informal string representation of self.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_97__str__(PyObject *__pyx_v_self); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_96__str__[] = "\n        The \342\200\234informal\342\200\235 string representation of self.\n\n        >>> clifford(\"1+3{-1}+2{1,2}+4{-2,7}\").__str__()\n        '1+3{-1}+2{1,2}+4{-2,7}'\n        ";
        #if CYTHON_COMPILING_IN_CPYTHON
        struct wrapperbase __pyx_wrapperbase_8PyClical_8clifford_96__str__;
        #endif
        static PyObject *__pyx_pw_8PyClical_8clifford_97__str__(PyObject *__pyx_v_self) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_96__str__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_96__str__(struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__str__", 0);

          /* "PyClical.pyx":1251
 *         '1+3{-1}+2{1,2}+4{-2,7}'
 *         """
 *         return clifford_to_str( self.unwrap() ).decode()             # <<<<<<<<<<<<<<
 * 
 * def clifford_hidden_doctests():
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_1 = __Pyx_decode_cpp_string(clifford_to_str(__pyx_f_8PyClical_8clifford_unwrap(__pyx_v_self)), 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_r = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L0;

          /* "PyClical.pyx":1244
 *         return clifford_to_repr( self.unwrap() ).decode()
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         """
 *         The informal string representation of self.
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __pyx_L0:;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_99__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static PyObject *__pyx_pw_8PyClical_8clifford_99__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_98__reduce_cython__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_98__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__reduce_cython__", 0);

          /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(1, 2, __pyx_L1_error)

          /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_8clifford_101__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
        static PyObject *__pyx_pw_8PyClical_8clifford_101__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
          PyObject *__pyx_r = 0;
          __Pyx_RefNannyDeclarations
          __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
          __pyx_r = __pyx_pf_8PyClical_8clifford_100__setstate_cython__(((struct __pyx_obj_8PyClical_clifford *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

          /* function exit code */
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        static PyObject *__pyx_pf_8PyClical_8clifford_100__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8PyClical_clifford *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
          PyObject *__pyx_r = NULL;
          __Pyx_RefNannyDeclarations
          PyObject *__pyx_t_1 = NULL;
          int __pyx_lineno = 0;
          const char *__pyx_filename = NULL;
          int __pyx_clineno = 0;
          __Pyx_RefNannySetupContext("__setstate_cython__", 0);

          /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_Raise(__pyx_t_1, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __PYX_ERR(1, 4, __pyx_L1_error)

          /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

          /* function exit code */
          __pyx_L1_error:;
          __Pyx_XDECREF(__pyx_t_1);
          __Pyx_AddTraceback("PyClical.clifford.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          __pyx_r = NULL;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          return __pyx_r;
        }

        /* "PyClical.pyx":1253
 *         return clifford_to_str( self.unwrap() ).decode()
 * 
 * def clifford_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */

        /* Python wrapper */
        static PyObject *__pyx_pw_8PyClical_9clifford_hidden_doctests(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
        static char __pyx_doc_8PyClical_8clifford_hidden_doctests[] = "\n    Tests for functions that Doctest cannot see.\n\n    For clifford.__cinit__: Construct an object of type clifford.\n\n    >>> print(clifford(2))\n    2\n    >>> print(clifford(2.0))\n    2\n    >>> print(clifford(1.0e-1))\n    0.1\n    >>> print(clifford(\"2\"))\n    2\n    >>> print(clifford(\"2{1,2,3}\"))\n    2{1,2,3}\n    >>> print(clifford(clifford(\"2{1,2,3}\")))\n    2{1,2,3}\n    >>> print(clifford(\"-{1}\"))\n    -{1}\n    >>> print(clifford(2,index_set({1,2})))\n    2{1,2}\n    >>> print(clifford([2,3],index_set({1,2})))\n    2{1}+3{2}\n    >>> print(clifford([1,2]))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from <class 'list'>.\n    >>> print(clifford(None))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from <class 'NoneType'>.\n    >>> print(clifford(None,[1,2]))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from (<class 'NoneType'>, <class 'list'>).\n    >>> print(clifford([1,2],[1,2]))\n    Traceback (most recent call last):\n      ...\n    TypeError: Cannot initialize clifford object from (<class 'list'>, <class 'list'>).\n    >>> print(clifford(\"\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string ''.\n    >>> print(clifford(\"{\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '{'.\n    >>> print(clifford(\"{1\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '{1'.\n    >>> print(clifford(\"+\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '+'.\n    >>> print(clifford(\"-\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object fro""m invalid string '-'.\n    >>> print(clifford(\"{1}+\"))\n    Traceback (most recent call last):\n      ...\n    ValueError: Cannot initialize clifford object from invalid string '{1}+'.\n\n    For clifford.__richcmp__: Compare objects of type clifford.\n\n    >>> clifford(\"{1}\") == clifford(\"1{1}\")\n    True\n    >>> clifford(\"{1}\") != clifford(\"1.0{1}\")\n    False\n    >>> clifford(\"{1}\") != clifford(\"1.0\")\n    True\n    >>> clifford(\"{1,2}\") == None\n    False\n    >>> clifford(\"{1,2}\") != None\n    True\n    >>> None == clifford(\"{1,2}\")\n    False\n    >>> None != clifford(\"{1,2}\")\n    True\n    ";
                static PyMethodDef __pyx_mdef_8PyClical_9clifford_hidden_doctests = {"clifford_hidden_doctests", (PyCFunction)__pyx_pw_8PyClical_9clifford_hidden_doctests, METH_NOARGS, __pyx_doc_8PyClical_8clifford_hidden_doctests};
                static PyObject *__pyx_pw_8PyClical_9clifford_hidden_doctests(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("clifford_hidden_doctests (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_8clifford_hidden_doctests(__pyx_self);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_8clifford_hidden_doctests(CYTHON_UNUSED PyObject *__pyx_self) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("clifford_hidden_doctests", 0);

                  /* "PyClical.pyx":1335
 *     True
 *     """
 *     return             # <<<<<<<<<<<<<<
 * 
 * cpdef inline error_squared_tol(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
                  goto __pyx_L0;

                  /* "PyClical.pyx":1253
 *         return clifford_to_str( self.unwrap() ).decode()
 * 
 * def clifford_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */

                  /* function exit code */
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1337
 *     return
 * 
 * cpdef inline error_squared_tol(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Quadratic norm error tolerance relative to a specific multivector.
 */

                static PyObject *__pyx_pw_8PyClical_11error_squared_tol(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_error_squared_tol(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("error_squared_tol", 0);

                  /* "PyClical.pyx":1344
 *     0.0
 *     """
 *     return glucat.error_squared_tol(toClifford(obj))             # <<<<<<<<<<<<<<
 * 
 * cpdef inline error_squared(lhs, rhs, threshold):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = PyFloat_FromDouble(error_squared_tol(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1344, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1337
 *     return
 * 
 * cpdef inline error_squared_tol(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Quadratic norm error tolerance relative to a specific multivector.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.error_squared_tol", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_11error_squared_tol(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_10error_squared_tol[] = "\n    Quadratic norm error tolerance relative to a specific multivector.\n\n    >>> print(error_squared_tol(clifford(\"{1}\")) * 3.0 - error_squared_tol(clifford(\"1{1}-2{2}+3{3}\")))\n    0.0\n    ";
                static PyObject *__pyx_pw_8PyClical_11error_squared_tol(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("error_squared_tol (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_10error_squared_tol(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_10error_squared_tol(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("error_squared_tol", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_error_squared_tol(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1337, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.error_squared_tol", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1346
 *     return glucat.error_squared_tol(toClifford(obj))
 * 
 * cpdef inline error_squared(lhs, rhs, threshold):             # <<<<<<<<<<<<<<
 *     """
 *     Relative or absolute error using the quadratic norm.
 */

                static PyObject *__pyx_pw_8PyClical_13error_squared(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_error_squared(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_threshold, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  scalar_t __pyx_t_1;
                  PyObject *__pyx_t_2 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("error_squared", 0);

                  /* "PyClical.pyx":1357
 *     25.0
 *     """
 *     return glucat.error_squared(toClifford(lhs), toClifford(rhs), <scalar_t>threshold)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline approx_equal(lhs, rhs, threshold=None, tol=None):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_1 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1357, __pyx_L1_error)
                  __pyx_t_2 = PyFloat_FromDouble(error_squared(__pyx_f_8PyClical_toClifford(__pyx_v_lhs), __pyx_f_8PyClical_toClifford(__pyx_v_rhs), ((scalar_t)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1357, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_r = __pyx_t_2;
                  __pyx_t_2 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1346
 *     return glucat.error_squared_tol(toClifford(obj))
 * 
 * cpdef inline error_squared(lhs, rhs, threshold):             # <<<<<<<<<<<<<<
 *     """
 *     Relative or absolute error using the quadratic norm.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_AddTraceback("PyClical.error_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_13error_squared(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_12error_squared[] = "\n    Relative or absolute error using the quadratic norm.\n\n    >>> err2=scalar_epsilon*scalar_epsilon\n\n    >>> print(error_squared(clifford(\"{1}\"), clifford(\"1{1}\"), err2))\n    0.0\n    >>> print(error_squared(clifford(\"1{1}-3{2}+4{3}\"), clifford(\"{1}\"), err2))\n    25.0\n    ";
                static PyObject *__pyx_pw_8PyClical_13error_squared(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_lhs = 0;
                  PyObject *__pyx_v_rhs = 0;
                  PyObject *__pyx_v_threshold = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("error_squared (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lhs,&__pyx_n_s_rhs,&__pyx_n_s_threshold,0};
                    PyObject* values[3] = {0,0,0};
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
                        CYTHON_FALLTHROUGH;
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lhs)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rhs)) != 0)) kw_args--;
                        else {
                          __Pyx_RaiseArgtupleInvalid("error_squared", 1, 3, 3, 1); __PYX_ERR(0, 1346, __pyx_L3_error)
                        }
                        CYTHON_FALLTHROUGH;
                        case  2:
                        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold)) != 0)) kw_args--;
                        else {
                          __Pyx_RaiseArgtupleInvalid("error_squared", 1, 3, 3, 2); __PYX_ERR(0, 1346, __pyx_L3_error)
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "error_squared") < 0)) __PYX_ERR(0, 1346, __pyx_L3_error)
                      }
                    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
                      goto __pyx_L5_argtuple_error;
                    } else {
                      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
                    }
                    __pyx_v_lhs = values[0];
                    __pyx_v_rhs = values[1];
                    __pyx_v_threshold = values[2];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("error_squared", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1346, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.error_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_12error_squared(__pyx_self, __pyx_v_lhs, __pyx_v_rhs, __pyx_v_threshold);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_12error_squared(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_threshold) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("error_squared", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_error_squared(__pyx_v_lhs, __pyx_v_rhs, __pyx_v_threshold, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1346, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.error_squared", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1359
 *     return glucat.error_squared(toClifford(lhs), toClifford(rhs), <scalar_t>threshold)
 * 
 * cpdef inline approx_equal(lhs, rhs, threshold=None, tol=None):             # <<<<<<<<<<<<<<
 *     """
 *     Test for approximate equality of multivectors.
 */

                static PyObject *__pyx_pw_8PyClical_15approx_equal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_approx_equal(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_approx_equal *__pyx_optional_args) {
                  PyObject *__pyx_v_threshold = ((PyObject *)Py_None);
                  PyObject *__pyx_v_tol = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  scalar_t __pyx_t_4;
                  scalar_t __pyx_t_5;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("approx_equal", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_threshold = __pyx_optional_args->threshold;
                      if (__pyx_optional_args->__pyx_n > 1) {
                        __pyx_v_tol = __pyx_optional_args->tol;
                      }
                    }
                  }
                  __Pyx_INCREF(__pyx_v_threshold);
                  __Pyx_INCREF(__pyx_v_tol);

                  /* "PyClical.pyx":1374
 *     True
 *     """
 *     threshold = error_squared_tol(rhs) if threshold is None else threshold             # <<<<<<<<<<<<<<
 *     tol       = error_squared_tol(rhs) if tol       is None else tol
 *     return glucat.approx_equal(toClifford(lhs), toClifford(rhs), <scalar_t>threshold, <scalar_t>tol)
 */
                  __pyx_t_2 = (__pyx_v_threshold == Py_None);
                  if ((__pyx_t_2 != 0)) {
                    __pyx_t_3 = __pyx_f_8PyClical_error_squared_tol(__pyx_v_rhs, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1374, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_1 = __pyx_t_3;
                    __pyx_t_3 = 0;
                  } else {
                    __Pyx_INCREF(__pyx_v_threshold);
                    __pyx_t_1 = __pyx_v_threshold;
                  }
                  __Pyx_DECREF_SET(__pyx_v_threshold, __pyx_t_1);
                  __pyx_t_1 = 0;

                  /* "PyClical.pyx":1375
 *     """
 *     threshold = error_squared_tol(rhs) if threshold is None else threshold
 *     tol       = error_squared_tol(rhs) if tol       is None else tol             # <<<<<<<<<<<<<<
 *     return glucat.approx_equal(toClifford(lhs), toClifford(rhs), <scalar_t>threshold, <scalar_t>tol)
 * 
 */
                  __pyx_t_2 = (__pyx_v_tol == Py_None);
                  if ((__pyx_t_2 != 0)) {
                    __pyx_t_3 = __pyx_f_8PyClical_error_squared_tol(__pyx_v_rhs, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_1 = __pyx_t_3;
                    __pyx_t_3 = 0;
                  } else {
                    __Pyx_INCREF(__pyx_v_tol);
                    __pyx_t_1 = __pyx_v_tol;
                  }
                  __Pyx_DECREF_SET(__pyx_v_tol, __pyx_t_1);
                  __pyx_t_1 = 0;

                  /* "PyClical.pyx":1376
 *     threshold = error_squared_tol(rhs) if threshold is None else threshold
 *     tol       = error_squared_tol(rhs) if tol       is None else tol
 *     return glucat.approx_equal(toClifford(lhs), toClifford(rhs), <scalar_t>threshold, <scalar_t>tol)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline inv(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_threshold); if (unlikely((__pyx_t_4 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1376, __pyx_L1_error)
                  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_tol); if (unlikely((__pyx_t_5 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1376, __pyx_L1_error)
                  __pyx_t_1 = __Pyx_PyBool_FromLong(approx_equal(__pyx_f_8PyClical_toClifford(__pyx_v_lhs), __pyx_f_8PyClical_toClifford(__pyx_v_rhs), ((scalar_t)__pyx_t_4), ((scalar_t)__pyx_t_5))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1376, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1359
 *     return glucat.error_squared(toClifford(lhs), toClifford(rhs), <scalar_t>threshold)
 * 
 * cpdef inline approx_equal(lhs, rhs, threshold=None, tol=None):             # <<<<<<<<<<<<<<
 *     """
 *     Test for approximate equality of multivectors.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.approx_equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XDECREF(__pyx_v_threshold);
                  __Pyx_XDECREF(__pyx_v_tol);
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_15approx_equal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_14approx_equal[] = "\n    Test for approximate equality of multivectors.\n\n    >>> err2=scalar_epsilon*scalar_epsilon\n\n    >>> print(approx_equal(clifford(\"{1}\"), clifford(\"1{1}\")))\n    True\n    >>> print(approx_equal(clifford(\"1{1}-3{2}+4{3}\"), clifford(\"{1}\")))\n    False\n    >>> print(approx_equal(clifford(\"1{1}-3{2}+4{3}+0.001\"), clifford(\"1{1}-3{2}+4{3}\"), err2, err2))\n    False\n    >>> print(approx_equal(clifford(\"1{1}-3{2}+4{3}+1.0e-30\"), clifford(\"1{1}-3{2}+4{3}\"), err2, err2))\n    True\n    ";
                static PyObject *__pyx_pw_8PyClical_15approx_equal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_lhs = 0;
                  PyObject *__pyx_v_rhs = 0;
                  PyObject *__pyx_v_threshold = 0;
                  PyObject *__pyx_v_tol = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("approx_equal (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lhs,&__pyx_n_s_rhs,&__pyx_n_s_threshold,&__pyx_n_s_tol,0};
                    PyObject* values[4] = {0,0,0,0};
                    values[2] = ((PyObject *)Py_None);
                    values[3] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
                        CYTHON_FALLTHROUGH;
                        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
                        CYTHON_FALLTHROUGH;
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lhs)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rhs)) != 0)) kw_args--;
                        else {
                          __Pyx_RaiseArgtupleInvalid("approx_equal", 0, 2, 4, 1); __PYX_ERR(0, 1359, __pyx_L3_error)
                        }
                        CYTHON_FALLTHROUGH;
                        case  2:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold);
                          if (value) { values[2] = value; kw_args--; }
                        }
                        CYTHON_FALLTHROUGH;
                        case  3:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
                          if (value) { values[3] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "approx_equal") < 0)) __PYX_ERR(0, 1359, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
                        CYTHON_FALLTHROUGH;
                        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
                        CYTHON_FALLTHROUGH;
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_lhs = values[0];
                    __pyx_v_rhs = values[1];
                    __pyx_v_threshold = values[2];
                    __pyx_v_tol = values[3];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("approx_equal", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1359, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.approx_equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_14approx_equal(__pyx_self, __pyx_v_lhs, __pyx_v_rhs, __pyx_v_threshold, __pyx_v_tol);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_14approx_equal(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_threshold, PyObject *__pyx_v_tol) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_approx_equal __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("approx_equal", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 2;
                  __pyx_t_2.threshold = __pyx_v_threshold;
                  __pyx_t_2.tol = __pyx_v_tol;
                  __pyx_t_1 = __pyx_f_8PyClical_approx_equal(__pyx_v_lhs, __pyx_v_rhs, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1359, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.approx_equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1378
 *     return glucat.approx_equal(toClifford(lhs), toClifford(rhs), <scalar_t>threshold, <scalar_t>tol)
 * 
 * cpdef inline inv(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Geometric multiplicative inverse.
 */

                static PyObject *__pyx_pw_8PyClical_17inv(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_inv(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("inv", 0);

                  /* "PyClical.pyx":1391
 *     nan
 *     """
 *     return clifford(obj).inv()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline scalar(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1391, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1391, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1391, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1378
 *     return glucat.approx_equal(toClifford(lhs), toClifford(rhs), <scalar_t>threshold, <scalar_t>tol)
 * 
 * cpdef inline inv(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Geometric multiplicative inverse.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.inv", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_17inv(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_16inv[] = "\n    Geometric multiplicative inverse.\n\n    >>> print(inv(clifford(\"{1}\")))\n    {1}\n    >>> print(inv(clifford(\"{-1}\")))\n    -{-1}\n    >>> print(inv(clifford(\"{-2,-1}\")))\n    -{-2,-1}\n    >>> print(inv(clifford(\"{-1}+{1}\")))\n    nan\n    ";
                static PyObject *__pyx_pw_8PyClical_17inv(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("inv (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_16inv(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_16inv(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("inv", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_inv(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1378, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.inv", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1393
 *     return clifford(obj).inv()
 * 
 * cpdef inline scalar(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Scalar part.
 */

                static PyObject *__pyx_pw_8PyClical_19scalar(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_scalar(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("scalar", 0);

                  /* "PyClical.pyx":1402
 *     0.0
 *     """
 *     return clifford(obj).scalar()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline real(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1402, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1402, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1402, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1393
 *     return clifford(obj).inv()
 * 
 * cpdef inline scalar(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Scalar part.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_19scalar(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_18scalar[] = "\n    Scalar part.\n\n    >>> scalar(clifford(\"1+{1}+{1,2}\"))\n    1.0\n    >>> scalar(clifford(\"{1,2}\"))\n    0.0\n    ";
                static PyObject *__pyx_pw_8PyClical_19scalar(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("scalar (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_18scalar(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_18scalar(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("scalar", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_scalar(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1393, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1404
 *     return clifford(obj).scalar()
 * 
 * cpdef inline real(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Real part: synonym for scalar part.
 */

                static PyObject *__pyx_pw_8PyClical_21real(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_real(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("real", 0);

                  /* "PyClical.pyx":1413
 *     0.0
 *     """
 *     return clifford(obj).scalar()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline imag(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1413, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_scalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1413, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1413, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1404
 *     return clifford(obj).scalar()
 * 
 * cpdef inline real(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Real part: synonym for scalar part.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.real", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_21real(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_20real[] = "\n    Real part: synonym for scalar part.\n\n    >>> real(clifford(\"1+{1}+{1,2}\"))\n    1.0\n    >>> real(clifford(\"{1,2}\"))\n    0.0\n    ";
                static PyObject *__pyx_pw_8PyClical_21real(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("real (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_20real(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_20real(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("real", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_real(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1404, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.real", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1415
 *     return clifford(obj).scalar()
 * 
 * cpdef inline imag(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Imaginary part: deprecated (always 0).
 */

                static PyObject *__pyx_pw_8PyClical_23imag(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_imag(CYTHON_UNUSED PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("imag", 0);

                  /* "PyClical.pyx":1424
 *     0.0
 *     """
 *     return 0.0             # <<<<<<<<<<<<<<
 * 
 * cpdef inline pure(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __Pyx_INCREF(__pyx_float_0_0);
                  __pyx_r = __pyx_float_0_0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1415
 *     return clifford(obj).scalar()
 * 
 * cpdef inline imag(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Imaginary part: deprecated (always 0).
 */

                  /* function exit code */
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_23imag(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_22imag[] = "\n    Imaginary part: deprecated (always 0).\n\n    >>> imag(clifford(\"1+{1}+{1,2}\"))\n    0.0\n    >>> imag(clifford(\"{1,2}\"))\n    0.0\n    ";
                static PyObject *__pyx_pw_8PyClical_23imag(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("imag (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_22imag(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_22imag(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("imag", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_imag(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1415, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.imag", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1426
 *     return 0.0
 * 
 * cpdef inline pure(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Pure part
 */

                static PyObject *__pyx_pw_8PyClical_25pure(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_pure(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("pure", 0);

                  /* "PyClical.pyx":1435
 *     {1,2}
 *     """
 *     return clifford(obj).pure()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline even(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1435, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pure); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1435, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1435, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1426
 *     return 0.0
 * 
 * cpdef inline pure(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Pure part
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.pure", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_25pure(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_24pure[] = "\n    Pure part\n\n    >>> print(pure(clifford(\"1+{1}+{1,2}\")))\n    {1}+{1,2}\n    >>> print(pure(clifford(\"{1,2}\")))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_25pure(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("pure (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_24pure(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_24pure(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("pure", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_pure(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1426, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.pure", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1437
 *     return clifford(obj).pure()
 * 
 * cpdef inline even(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Even part of multivector, sum of even grade terms.
 */

                static PyObject *__pyx_pw_8PyClical_27even(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_even(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("even", 0);

                  /* "PyClical.pyx":1444
 *     1+{1,2}
 *     """
 *     return clifford(obj).even()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline odd(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1444, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_even); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1444, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1444, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1437
 *     return clifford(obj).pure()
 * 
 * cpdef inline even(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Even part of multivector, sum of even grade terms.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.even", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_27even(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_26even[] = "\n    Even part of multivector, sum of even grade terms.\n\n    >>> print(even(clifford(\"1+{1}+{1,2}\")))\n    1+{1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_27even(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("even (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_26even(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_26even(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("even", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_even(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1437, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.even", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1446
 *     return clifford(obj).even()
 * 
 * cpdef inline odd(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Odd part of multivector, sum of odd grade terms.
 */

                static PyObject *__pyx_pw_8PyClical_29odd(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_odd(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("odd", 0);

                  /* "PyClical.pyx":1453
 *     {1}
 *     """
 *     return clifford(obj).odd()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline involute(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1453, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_odd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1453, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1446
 *     return clifford(obj).even()
 * 
 * cpdef inline odd(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Odd part of multivector, sum of odd grade terms.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.odd", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_29odd(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_28odd[] = "\n    Odd part of multivector, sum of odd grade terms.\n\n    >>> print(odd(clifford(\"1+{1}+{1,2}\")))\n    {1}\n    ";
                static PyObject *__pyx_pw_8PyClical_29odd(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("odd (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_28odd(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_28odd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("odd", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_odd(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1446, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.odd", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1455
 *     return clifford(obj).odd()
 * 
 * cpdef inline involute(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Main involution, each {i} is replaced by -{i} in each term, eg. {1}*{2} -> (-{2})*(-{1})
 */

                static PyObject *__pyx_pw_8PyClical_31involute(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_involute(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("involute", 0);

                  /* "PyClical.pyx":1468
 *     1-{1}+{1,2}
 *     """
 *     return clifford(obj).involute()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline reverse(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1468, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_involute); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1468, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1468, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1455
 *     return clifford(obj).odd()
 * 
 * cpdef inline involute(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Main involution, each {i} is replaced by -{i} in each term, eg. {1}*{2} -> (-{2})*(-{1})
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.involute", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_31involute(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_30involute[] = "\n    Main involution, each {i} is replaced by -{i} in each term, eg. {1}*{2} -> (-{2})*(-{1})\n\n    >>> print(involute(clifford(\"{1}\")))\n    -{1}\n    >>> print(involute(clifford(\"{2}\") * clifford(\"{1}\")))\n    -{1,2}\n    >>> print(involute(clifford(\"{1}\") * clifford(\"{2}\")))\n    {1,2}\n    >>> print(involute(clifford(\"1+{1}+{1,2}\")))\n    1-{1}+{1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_31involute(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("involute (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_30involute(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_30involute(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("involute", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_involute(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1455, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.involute", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1470
 *     return clifford(obj).involute()
 * 
 * cpdef inline reverse(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Reversion, eg. {1}*{2} -> {2}*{1}
 */

                static PyObject *__pyx_pw_8PyClical_33reverse(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_reverse(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("reverse", 0);

                  /* "PyClical.pyx":1483
 *     1+{1}-{1,2}
 *     """
 *     return clifford(obj).reverse()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline conj(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1483, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_reverse); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1483, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1483, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1470
 *     return clifford(obj).involute()
 * 
 * cpdef inline reverse(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Reversion, eg. {1}*{2} -> {2}*{1}
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_33reverse(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_32reverse[] = "\n    Reversion, eg. {1}*{2} -> {2}*{1}\n\n    >>> print(reverse(clifford(\"{1}\")))\n    {1}\n    >>> print(reverse(clifford(\"{2}\") * clifford(\"{1}\")))\n    {1,2}\n    >>> print(reverse(clifford(\"{1}\") * clifford(\"{2}\")))\n    -{1,2}\n    >>> print(reverse(clifford(\"1+{1}+{1,2}\")))\n    1+{1}-{1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_33reverse(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("reverse (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_32reverse(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_32reverse(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("reverse", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_reverse(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1470, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.reverse", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1485
 *     return clifford(obj).reverse()
 * 
 * cpdef inline conj(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Conjugation, reverse o involute == involute o reverse.
 */

                static PyObject *__pyx_pw_8PyClical_35conj(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_conj(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("conj", 0);

                  /* "PyClical.pyx":1498
 *     1-{1}-{1,2}
 *     """
 *     return clifford(obj).conj()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline quad(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1498, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_conj); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1498, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1498, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1485
 *     return clifford(obj).reverse()
 * 
 * cpdef inline conj(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Conjugation, reverse o involute == involute o reverse.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.conj", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_35conj(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_34conj[] = "\n    Conjugation, reverse o involute == involute o reverse.\n\n    >>> print(conj(clifford(\"{1}\")))\n    -{1}\n    >>> print(conj(clifford(\"{2}\") * clifford(\"{1}\")))\n    {1,2}\n    >>> print(conj(clifford(\"{1}\") * clifford(\"{2}\")))\n    -{1,2}\n    >>> print(conj(clifford(\"1+{1}+{1,2}\")))\n    1-{1}-{1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_35conj(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("conj (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_34conj(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_34conj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("conj", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_conj(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1485, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.conj", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1500
 *     return clifford(obj).conj()
 * 
 * cpdef inline quad(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Quadratic form == (rev(x)*x)(0).
 */

                static PyObject *__pyx_pw_8PyClical_37quad(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_quad(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("quad", 0);

                  /* "PyClical.pyx":1509
 *     2.0
 *     """
 *     return clifford(obj).quad()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline norm(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1509, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quad); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1509, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1509, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1500
 *     return clifford(obj).conj()
 * 
 * cpdef inline quad(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Quadratic form == (rev(x)*x)(0).
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.quad", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_37quad(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_36quad[] = "\n    Quadratic form == (rev(x)*x)(0).\n\n    >>> print(quad(clifford(\"1+{1}+{1,2}\")))\n    3.0\n    >>> print(quad(clifford(\"1+{-1}+{1,2}+{1,2,3}\")))\n    2.0\n    ";
                static PyObject *__pyx_pw_8PyClical_37quad(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("quad (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_36quad(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_36quad(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("quad", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_quad(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1500, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.quad", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1511
 *     return clifford(obj).quad()
 * 
 * cpdef inline norm(obj):             # <<<<<<<<<<<<<<
 *     """
 *     norm == sum of squares of coordinates.
 */

                static PyObject *__pyx_pw_8PyClical_39norm(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_norm(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("norm", 0);

                  /* "PyClical.pyx":1520
 *     4.0
 *     """
 *     return clifford(obj).norm()             # <<<<<<<<<<<<<<
 * 
 * cpdef inline abs(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1520, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1520, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1520, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1511
 *     return clifford(obj).quad()
 * 
 * cpdef inline norm(obj):             # <<<<<<<<<<<<<<
 *     """
 *     norm == sum of squares of coordinates.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_39norm(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_38norm[] = "\n    norm == sum of squares of coordinates.\n\n    >>> norm(clifford(\"1+{1}+{1,2}\"))\n    3.0\n    >>> norm(clifford(\"1+{-1}+{1,2}+{1,2,3}\"))\n    4.0\n    ";
                static PyObject *__pyx_pw_8PyClical_39norm(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("norm (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_38norm(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_38norm(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("norm", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_norm(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1511, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1522
 *     return clifford(obj).norm()
 * 
 * cpdef inline abs(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Absolute value of multivector: multivector 2-norm.
 */

                static PyObject *__pyx_pw_8PyClical_41abs(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_abs(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("abs", 0);

                  /* "PyClical.pyx":1529
 *     2.0
 *     """
 *     return glucat.abs(toClifford(obj))             # <<<<<<<<<<<<<<
 * 
 * cpdef inline max_abs(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = PyFloat_FromDouble(abs(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1529, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1522
 *     return clifford(obj).norm()
 * 
 * cpdef inline abs(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Absolute value of multivector: multivector 2-norm.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.abs", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_41abs(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_40abs[] = "\n    Absolute value of multivector: multivector 2-norm.\n\n    >>> abs(clifford(\"1+{-1}+{1,2}+{1,2,3}\"))\n    2.0\n    ";
                static PyObject *__pyx_pw_8PyClical_41abs(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("abs (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_40abs(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_40abs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("abs", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_abs(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1522, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.abs", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1531
 *     return glucat.abs(toClifford(obj))
 * 
 * cpdef inline max_abs(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Maximum absolute value of coordinates multivector: multivector infinity-norm.
 */

                static PyObject *__pyx_pw_8PyClical_43max_abs(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_max_abs(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("max_abs", 0);

                  /* "PyClical.pyx":1541
 * 
 *     """
 *     return glucat.max_abs(toClifford(obj))             # <<<<<<<<<<<<<<
 * 
 * cpdef inline pow(obj, m):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = PyFloat_FromDouble(max_abs(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1541, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1531
 *     return glucat.abs(toClifford(obj))
 * 
 * cpdef inline max_abs(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Maximum absolute value of coordinates multivector: multivector infinity-norm.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.max_abs", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_43max_abs(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_42max_abs[] = "\n    Maximum absolute value of coordinates multivector: multivector infinity-norm.\n\n    >>> max_abs(clifford(\"1+{-1}+{1,2}+{1,2,3}\"))\n    1.0\n    >>> max_abs(clifford(\"3+2{1}+{1,2}\"))\n    3.0\n\n    ";
                static PyObject *__pyx_pw_8PyClical_43max_abs(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("max_abs (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_42max_abs(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_42max_abs(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("max_abs", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_max_abs(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1531, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.max_abs", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1543
 *     return glucat.max_abs(toClifford(obj))
 * 
 * cpdef inline pow(obj, m):             # <<<<<<<<<<<<<<
 *     """
 *     Integer power of multivector: obj to the m.
 */

                static PyObject *__pyx_pw_8PyClical_45pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_pow(PyObject *__pyx_v_obj, PyObject *__pyx_v_m, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  PyObject *__pyx_t_4 = NULL;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  int __pyx_t_7;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("pow", 0);

                  /* "PyClical.pyx":1562
 *     1
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         math.pow(obj, m)
 *     except:
 */
                  {
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
                    __Pyx_XGOTREF(__pyx_t_1);
                    __Pyx_XGOTREF(__pyx_t_2);
                    __Pyx_XGOTREF(__pyx_t_3);
                    /*try:*/ {

                      /* "PyClical.pyx":1563
 *     """
 *     try:
 *         math.pow(obj, m)             # <<<<<<<<<<<<<<
 *     except:
 *         return clifford(obj).pow(m)
 */
                      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1563, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_pow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1563, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __pyx_t_5 = NULL;
                      __pyx_t_7 = 0;
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_5)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_5);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                          __pyx_t_7 = 1;
                        }
                      }
                      #if CYTHON_FAST_PYCALL
                      if (PyFunction_Check(__pyx_t_6)) {
                        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_obj, __pyx_v_m};
                        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L3_error)
                        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_GOTREF(__pyx_t_4);
                      } else
                      #endif
                      #if CYTHON_FAST_PYCCALL
                      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
                        PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_obj, __pyx_v_m};
                        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L3_error)
                        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_GOTREF(__pyx_t_4);
                      } else
                      #endif
                      {
                        __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1563, __pyx_L3_error)
                        __Pyx_GOTREF(__pyx_t_8);
                        if (__pyx_t_5) {
                          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
                        }
                        __Pyx_INCREF(__pyx_v_obj);
                        __Pyx_GIVEREF(__pyx_v_obj);
                        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_obj);
                        __Pyx_INCREF(__pyx_v_m);
                        __Pyx_GIVEREF(__pyx_v_m);
                        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_m);
                        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L3_error)
                        __Pyx_GOTREF(__pyx_t_4);
                        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                      }
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

                      /* "PyClical.pyx":1562
 *     1
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         math.pow(obj, m)
 *     except:
 */
                    }
                    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                    goto __pyx_L8_try_end;
                    __pyx_L3_error:;
                    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
                    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

                    /* "PyClical.pyx":1564
 *     try:
 *         math.pow(obj, m)
 *     except:             # <<<<<<<<<<<<<<
 *         return clifford(obj).pow(m)
 * 
 */
                    /*except:*/ {
                      __Pyx_AddTraceback("PyClical.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
                      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_8) < 0) __PYX_ERR(0, 1564, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_GOTREF(__pyx_t_8);

                      /* "PyClical.pyx":1565
 *         math.pow(obj, m)
 *     except:
 *         return clifford(obj).pow(m)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline outer_pow(obj, m):
 */
                      __Pyx_XDECREF(__pyx_r);
                      __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1565, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_pow); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1565, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_10);
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                      __pyx_t_9 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
                        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
                        if (likely(__pyx_t_9)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
                          __Pyx_INCREF(__pyx_t_9);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_10, function);
                        }
                      }
                      __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_9, __pyx_v_m) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_m);
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1565, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                      __pyx_r = __pyx_t_5;
                      __pyx_t_5 = 0;
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                      goto __pyx_L6_except_return;
                    }
                    __pyx_L5_except_error:;

                    /* "PyClical.pyx":1562
 *     1
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         math.pow(obj, m)
 *     except:
 */
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L1_error;
                    __pyx_L6_except_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                    __pyx_L8_try_end:;
                  }

                  /* "PyClical.pyx":1543
 *     return glucat.max_abs(toClifford(obj))
 * 
 * cpdef inline pow(obj, m):             # <<<<<<<<<<<<<<
 *     """
 *     Integer power of multivector: obj to the m.
 */

                  /* function exit code */
                  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
                  goto __pyx_L0;
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_6);
                  __Pyx_XDECREF(__pyx_t_8);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_AddTraceback("PyClical.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_45pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_44pow[] = "\n    Integer power of multivector: obj to the m.\n\n    >>> x=clifford(\"{1}\"); print(pow(x,2))\n    1\n    >>> x=clifford(\"2\"); print(pow(x,2))\n    4\n    >>> x=clifford(\"2+{1}\"); print(pow(x,0))\n    1\n    >>> x=clifford(\"2+{1}\"); print(pow(x,1))\n    2+{1}\n    >>> x=clifford(\"2+{1}\"); print(pow(x,2))\n    5+4{1}\n    >>> print(pow(clifford(\"1+{1}+{1,2}\"),3))\n    1+3{1}+3{1,2}\n    >>> i=clifford(\"{1,2}\"); print(exp(pi/2) * pow(i, i))\n    1\n    ";
                static PyObject *__pyx_pw_8PyClical_45pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_m = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("pow (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_m,0};
                    PyObject* values[2] = {0,0};
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
                        else {
                          __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, 1); __PYX_ERR(0, 1543, __pyx_L3_error)
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pow") < 0)) __PYX_ERR(0, 1543, __pyx_L3_error)
                      }
                    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
                      goto __pyx_L5_argtuple_error;
                    } else {
                      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_m = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1543, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_44pow(__pyx_self, __pyx_v_obj, __pyx_v_m);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_44pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_m) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("pow", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_pow(__pyx_v_obj, __pyx_v_m, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1567
 *         return clifford(obj).pow(m)
 * 
 * cpdef inline outer_pow(obj, m):             # <<<<<<<<<<<<<<
 *     """
 *     Outer product power of multivector.
 */

                static PyObject *__pyx_pw_8PyClical_47outer_pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_outer_pow(PyObject *__pyx_v_obj, PyObject *__pyx_v_m, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("outer_pow", 0);

                  /* "PyClical.pyx":1574
 *     1+3{1}+3{1,2}
 *     """
 *     return clifford(obj).outer_pow(m)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline complexifier(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_v_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1574, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_outer_pow); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1574, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_3, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_m) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_m);
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1574, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1567
 *         return clifford(obj).pow(m)
 * 
 * cpdef inline outer_pow(obj, m):             # <<<<<<<<<<<<<<
 *     """
 *     Outer product power of multivector.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.outer_pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_47outer_pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_46outer_pow[] = "\n    Outer product power of multivector.\n\n    >>> print(outer_pow(clifford(\"1+{1}+{1,2}\"),3))\n    1+3{1}+3{1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_47outer_pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_m = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("outer_pow (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_m,0};
                    PyObject* values[2] = {0,0};
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
                        else {
                          __Pyx_RaiseArgtupleInvalid("outer_pow", 1, 2, 2, 1); __PYX_ERR(0, 1567, __pyx_L3_error)
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "outer_pow") < 0)) __PYX_ERR(0, 1567, __pyx_L3_error)
                      }
                    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
                      goto __pyx_L5_argtuple_error;
                    } else {
                      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_m = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("outer_pow", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1567, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.outer_pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_46outer_pow(__pyx_self, __pyx_v_obj, __pyx_v_m);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_46outer_pow(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_m) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("outer_pow", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_outer_pow(__pyx_v_obj, __pyx_v_m, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1567, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.outer_pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1576
 *     return clifford(obj).outer_pow(m)
 * 
 * cpdef inline complexifier(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Square root of -1 which commutes with all members of the frame of the given multivector.
 */

                static PyObject *__pyx_pw_8PyClical_49complexifier(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_complexifier(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("complexifier", 0);

                  /* "PyClical.pyx":1589
 *     {-1}
 *     """
 *     return clifford().wrap( glucat.complexifier(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline sqrt(obj, i = None):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1589, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), complexifier(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1589, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_r = __pyx_t_2;
                  __pyx_t_2 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1576
 *     return clifford(obj).outer_pow(m)
 * 
 * cpdef inline complexifier(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Square root of -1 which commutes with all members of the frame of the given multivector.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_AddTraceback("PyClical.complexifier", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_49complexifier(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_48complexifier[] = "\n    Square root of -1 which commutes with all members of the frame of the given multivector.\n\n    >>> print(complexifier(clifford(index_set({1}))))\n    {1,2,3}\n    >>> print(complexifier(clifford(index_set({-1}))))\n    {-1}\n    >>> print(complexifier(index_set({1})))\n    {1,2,3}\n    >>> print(complexifier(index_set({-1})))\n    {-1}\n    ";
                static PyObject *__pyx_pw_8PyClical_49complexifier(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("complexifier (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_48complexifier(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_48complexifier(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("complexifier", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_complexifier(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1576, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.complexifier", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1591
 *     return clifford().wrap( glucat.complexifier(toClifford(obj)) )
 * 
 * cpdef inline sqrt(obj, i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Square root of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_51sqrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_sqrt(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_sqrt *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("sqrt", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1606
 *     -1
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.sqrt(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1607
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.sqrt(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1607, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = sqrt(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1607, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1607, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1606
 *     -1
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.sqrt(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1609
 *         return clifford().wrap( glucat.sqrt(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.sqrt(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1610
 *     else:
 *         try:
 *             return math.sqrt(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.sqrt(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1610, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1610, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1610, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1609
 *         return clifford().wrap( glucat.sqrt(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.sqrt(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1611
 *         try:
 *             return math.sqrt(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.sqrt(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1611, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1612
 *             return math.sqrt(obj)
 *         except:
 *             return clifford().wrap( glucat.sqrt(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline exp(obj):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1612, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), sqrt(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1612, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1609
 *         return clifford().wrap( glucat.sqrt(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.sqrt(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1591
 *     return clifford().wrap( glucat.complexifier(toClifford(obj)) )
 * 
 * cpdef inline sqrt(obj, i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Square root of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_51sqrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_50sqrt[] = "\n    Square root of multivector with optional complexifier.\n\n    >>> print(sqrt(-1))\n    {-1}\n    >>> print(sqrt(clifford(\"2{-1}\")))\n    1+{-1}\n    >>> j=sqrt(-1,complexifier(index_set({1}))); print(j); print(j*j)\n    {1,2,3}\n    -1\n    >>> j=sqrt(-1,\"{1,2,3}\"); print(j); print(j*j)\n    {1,2,3}\n    -1\n    ";
                static PyObject *__pyx_pw_8PyClical_51sqrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("sqrt (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sqrt") < 0)) __PYX_ERR(0, 1591, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("sqrt", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1591, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_50sqrt(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_50sqrt(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_sqrt __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("sqrt", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_sqrt(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1591, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1614
 *             return clifford().wrap( glucat.sqrt(toClifford(obj)) )
 * 
 * cpdef inline exp(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Exponential of multivector.
 */

                static PyObject *__pyx_pw_8PyClical_53exp(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_exp(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  PyObject *__pyx_t_4 = NULL;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("exp", 0);

                  /* "PyClical.pyx":1623
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.exp(obj)
 *     except:
 */
                  {
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
                    __Pyx_XGOTREF(__pyx_t_1);
                    __Pyx_XGOTREF(__pyx_t_2);
                    __Pyx_XGOTREF(__pyx_t_3);
                    /*try:*/ {

                      /* "PyClical.pyx":1624
 *     """
 *     try:
 *         return math.exp(obj)             # <<<<<<<<<<<<<<
 *     except:
 *         return clifford().wrap( glucat.exp(toClifford(obj)) )
 */
                      __Pyx_XDECREF(__pyx_r);
                      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1624, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exp); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1624, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __pyx_t_5 = NULL;
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_5)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_5);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                        }
                      }
                      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_obj);
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1624, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_r = __pyx_t_4;
                      __pyx_t_4 = 0;
                      goto __pyx_L7_try_return;

                      /* "PyClical.pyx":1623
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.exp(obj)
 *     except:
 */
                    }
                    __pyx_L3_error:;
                    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

                    /* "PyClical.pyx":1625
 *     try:
 *         return math.exp(obj)
 *     except:             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.exp(toClifford(obj)) )
 * 
 */
                    /*except:*/ {
                      __Pyx_AddTraceback("PyClical.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
                      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 1625, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_GOTREF(__pyx_t_5);

                      /* "PyClical.pyx":1626
 *         return math.exp(obj)
 *     except:
 *         return clifford().wrap( glucat.exp(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline log(obj,i = None):
 */
                      __Pyx_XDECREF(__pyx_r);
                      __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1626, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __pyx_t_8 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_7), exp(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1626, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                      __pyx_r = __pyx_t_8;
                      __pyx_t_8 = 0;
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      goto __pyx_L6_except_return;
                    }
                    __pyx_L5_except_error:;

                    /* "PyClical.pyx":1623
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.exp(obj)
 *     except:
 */
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L1_error;
                    __pyx_L7_try_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                    __pyx_L6_except_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                  }

                  /* "PyClical.pyx":1614
 *             return clifford().wrap( glucat.sqrt(toClifford(obj)) )
 * 
 * cpdef inline exp(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Exponential of multivector.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_6);
                  __Pyx_XDECREF(__pyx_t_7);
                  __Pyx_XDECREF(__pyx_t_8);
                  __Pyx_AddTraceback("PyClical.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_53exp(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_52exp[] = "\n    Exponential of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi/4; print(exp(x))\n    0.7071+0.7071{1,2}\n    >>> x=clifford(\"{1,2}\") * pi/2; print(exp(x))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_53exp(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_52exp(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_52exp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("exp", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_exp(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1614, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1628
 *         return clifford().wrap( glucat.exp(toClifford(obj)) )
 * 
 * cpdef inline log(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Natural logarithm of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_55log(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_log(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_log *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("log", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1643
 *     RuntimeError: check_complex(val, i): i is not a valid complexifier for val
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.log(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1644
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.log(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1644, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = log(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1644, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1644, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1643
 *     RuntimeError: check_complex(val, i): i is not a valid complexifier for val
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.log(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1646
 *         return clifford().wrap( glucat.log(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.log(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1647
 *     else:
 *         try:
 *             return math.log(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.log(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1647, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_log); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1647, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1647, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1646
 *         return clifford().wrap( glucat.log(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.log(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1648
 *         try:
 *             return math.log(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.log(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1648, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1649
 *             return math.log(obj)
 *         except:
 *             return clifford().wrap( glucat.log(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline cos(obj,i = None):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1649, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), log(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1649, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1646
 *         return clifford().wrap( glucat.log(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.log(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1628
 *         return clifford().wrap( glucat.exp(toClifford(obj)) )
 * 
 * cpdef inline log(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Natural logarithm of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_55log(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_54log[] = "\n    Natural logarithm of multivector with optional complexifier.\n\n    >>> x=clifford(\"{-1}\"); print((log(x,\"{-1}\") * 2/pi))\n    {-1}\n    >>> x=clifford(\"{1,2}\"); print((log(x,\"{1,2,3}\") * 2/pi))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print((log(x) * 2/pi))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print((log(x,\"{1,2}\") * 2/pi))\n    Traceback (most recent call last):\n    ...\n    RuntimeError: check_complex(val, i): i is not a valid complexifier for val\n    ";
                static PyObject *__pyx_pw_8PyClical_55log(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("log (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "log") < 0)) __PYX_ERR(0, 1628, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("log", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1628, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_54log(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_54log(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_log __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("log", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_log(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1628, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.log", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1651
 *             return clifford().wrap( glucat.log(toClifford(obj)) )
 * 
 * cpdef inline cos(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Cosine of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_57cos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cos(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_cos *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cos", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1660
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.cos(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1661
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.cos(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = cos(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1661, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1661, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1660
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.cos(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1663
 *         return clifford().wrap( glucat.cos(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.cos(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1664
 *     else:
 *         try:
 *             return math.cos(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.cos(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1664, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cos); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1664, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1664, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1663
 *         return clifford().wrap( glucat.cos(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.cos(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1665
 *         try:
 *             return math.cos(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.cos(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1665, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1666
 *             return math.cos(obj)
 *         except:
 *             return clifford().wrap( glucat.cos(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline acos(obj,i = None):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1666, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), cos(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1666, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1663
 *         return clifford().wrap( glucat.cos(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.cos(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1651
 *             return clifford().wrap( glucat.log(toClifford(obj)) )
 * 
 * cpdef inline cos(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Cosine of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_57cos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_56cos[] = "\n    Cosine of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x),\"{1,2,3}\"))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x)))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_57cos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("cos (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cos") < 0)) __PYX_ERR(0, 1651, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("cos", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1651, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_56cos(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_56cos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_cos __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cos", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_cos(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1651, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1668
 *             return clifford().wrap( glucat.cos(toClifford(obj)) )
 * 
 * cpdef inline acos(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse cosine of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_59acos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_acos(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_acos *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("acos", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1681
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.acos(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1682
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.acos(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1682, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = acos(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1682, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1682, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1681
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.acos(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1684
 *         return clifford().wrap( glucat.acos(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.acos(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1685
 *     else:
 *         try:
 *             return math.acos(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.acos(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1685, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_acos); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1685, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1685, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1684
 *         return clifford().wrap( glucat.acos(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.acos(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1686
 *         try:
 *             return math.acos(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.acos(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.acos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1686, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1687
 *             return math.acos(obj)
 *         except:
 *             return clifford().wrap( glucat.acos(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline cosh(obj):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1687, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), acos(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1687, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1684
 *         return clifford().wrap( glucat.acos(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.acos(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1668
 *             return clifford().wrap( glucat.cos(toClifford(obj)) )
 * 
 * cpdef inline acos(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse cosine of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.acos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_59acos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_58acos[] = "\n    Inverse cosine of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x),\"{1,2,3}\"))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x),\"{-1,1,2,3,4}\"))\n    {1,2}\n    >>> print(acos(0) / pi)\n    0.5\n    >>> x=clifford(\"{1,2}\"); print(cos(acos(x)))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_59acos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("acos (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "acos") < 0)) __PYX_ERR(0, 1668, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("acos", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1668, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.acos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_58acos(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_58acos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_acos __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("acos", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_acos(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1668, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.acos", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1689
 *             return clifford().wrap( glucat.acos(toClifford(obj)) )
 * 
 * cpdef inline cosh(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Hyperbolic cosine of multivector.
 */

                static PyObject *__pyx_pw_8PyClical_61cosh(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cosh(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  PyObject *__pyx_t_4 = NULL;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cosh", 0);

                  /* "PyClical.pyx":1700
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.cosh(obj)
 *     except:
 */
                  {
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
                    __Pyx_XGOTREF(__pyx_t_1);
                    __Pyx_XGOTREF(__pyx_t_2);
                    __Pyx_XGOTREF(__pyx_t_3);
                    /*try:*/ {

                      /* "PyClical.pyx":1701
 *     """
 *     try:
 *         return math.cosh(obj)             # <<<<<<<<<<<<<<
 *     except:
 *         return clifford().wrap( glucat.cosh(toClifford(obj)) )
 */
                      __Pyx_XDECREF(__pyx_r);
                      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1701, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_cosh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1701, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __pyx_t_5 = NULL;
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_5)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_5);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                        }
                      }
                      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_obj);
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1701, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_r = __pyx_t_4;
                      __pyx_t_4 = 0;
                      goto __pyx_L7_try_return;

                      /* "PyClical.pyx":1700
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.cosh(obj)
 *     except:
 */
                    }
                    __pyx_L3_error:;
                    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

                    /* "PyClical.pyx":1702
 *     try:
 *         return math.cosh(obj)
 *     except:             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.cosh(toClifford(obj)) )
 * 
 */
                    /*except:*/ {
                      __Pyx_AddTraceback("PyClical.cosh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 1702, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_GOTREF(__pyx_t_5);

                      /* "PyClical.pyx":1703
 *         return math.cosh(obj)
 *     except:
 *         return clifford().wrap( glucat.cosh(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline acosh(obj,i = None):
 */
                      __Pyx_XDECREF(__pyx_r);
                      __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1703, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __pyx_t_8 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_7), cosh(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1703, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                      __pyx_r = __pyx_t_8;
                      __pyx_t_8 = 0;
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      goto __pyx_L6_except_return;
                    }
                    __pyx_L5_except_error:;

                    /* "PyClical.pyx":1700
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.cosh(obj)
 *     except:
 */
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L1_error;
                    __pyx_L7_try_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                    __pyx_L6_except_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                  }

                  /* "PyClical.pyx":1689
 *             return clifford().wrap( glucat.acos(toClifford(obj)) )
 * 
 * cpdef inline cosh(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Hyperbolic cosine of multivector.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_6);
                  __Pyx_XDECREF(__pyx_t_7);
                  __Pyx_XDECREF(__pyx_t_8);
                  __Pyx_AddTraceback("PyClical.cosh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_61cosh(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_60cosh[] = "\n    Hyperbolic cosine of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi; print(cosh(x))\n    -1\n    >>> x=clifford(\"{1,2,3}\"); print(cosh(acosh(x)))\n    {1,2,3}\n    >>> x=clifford(\"{1,2}\"); print(cosh(acosh(x)))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_61cosh(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("cosh (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_60cosh(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_60cosh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cosh", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_cosh(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1689, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.cosh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1705
 *         return clifford().wrap( glucat.cosh(toClifford(obj)) )
 * 
 * cpdef inline acosh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic cosine of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_63acosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_acosh(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_acosh *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("acosh", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1720
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.acosh(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1721
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.acosh(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1721, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = acosh(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1721, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1721, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1720
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.acosh(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1723
 *         return clifford().wrap( glucat.acosh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.acosh(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1724
 *     else:
 *         try:
 *             return math.acosh(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.acosh(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1724, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_acosh); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1724, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1724, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1723
 *         return clifford().wrap( glucat.acosh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.acosh(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1725
 *         try:
 *             return math.acosh(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.acosh(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.acosh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1725, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1726
 *             return math.acosh(obj)
 *         except:
 *             return clifford().wrap( glucat.acosh(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline sin(obj,i = None):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1726, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), acosh(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1726, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1723
 *         return clifford().wrap( glucat.acosh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.acosh(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1705
 *         return clifford().wrap( glucat.cosh(toClifford(obj)) )
 * 
 * cpdef inline acosh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic cosine of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.acosh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_63acosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_62acosh[] = "\n    Inverse hyperbolic cosine of multivector with optional complexifier.\n\n    >>> print(acosh(0,\"{-2,-1,1}\"))\n    1.571{-2,-1,1}\n    >>> x=clifford(\"{1,2,3}\"); print(cosh(acosh(x,\"{-1,1,2,3,4}\")))\n    {1,2,3}\n    >>> print(acosh(0))\n    1.571{-1}\n    >>> x=clifford(\"{1,2,3}\"); print(cosh(acosh(x)))\n    {1,2,3}\n    >>> x=clifford(\"{1,2}\"); print(cosh(acosh(x)))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_63acosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("acosh (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "acosh") < 0)) __PYX_ERR(0, 1705, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("acosh", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1705, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.acosh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_62acosh(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_62acosh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_acosh __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("acosh", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_acosh(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1705, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.acosh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1728
 *             return clifford().wrap( glucat.acosh(toClifford(obj)) )
 * 
 * cpdef inline sin(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Sine of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_65sin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_sin(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_sin *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("sin", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1739
 *     {1,2,3}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.sin(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1740
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.sin(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1740, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = sin(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1740, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1740, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1739
 *     {1,2,3}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.sin(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1742
 *         return clifford().wrap( glucat.sin(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.sin(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1743
 *     else:
 *         try:
 *             return math.sin(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.sin(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1743, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sin); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1743, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1743, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1742
 *         return clifford().wrap( glucat.sin(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.sin(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1744
 *         try:
 *             return math.sin(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.sin(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1744, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1745
 *             return math.sin(obj)
 *         except:
 *             return clifford().wrap( glucat.sin(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline asin(obj,i = None):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1745, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), sin(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1745, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1742
 *         return clifford().wrap( glucat.sin(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.sin(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1728
 *             return clifford().wrap( glucat.acosh(toClifford(obj)) )
 * 
 * cpdef inline sin(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Sine of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_65sin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_64sin[] = "\n    Sine of multivector with optional complexifier.\n\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),s))\n    {-1}\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),\"{-2,-1,1}\"))\n    {-1}\n    >>> x=clifford(\"{1,2,3}\"); print(asin(sin(x)))\n    {1,2,3}\n    ";
                static PyObject *__pyx_pw_8PyClical_65sin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("sin (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sin") < 0)) __PYX_ERR(0, 1728, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("sin", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1728, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_64sin(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_64sin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_sin __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("sin", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_sin(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1728, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1747
 *             return clifford().wrap( glucat.sin(toClifford(obj)) )
 * 
 * cpdef inline asin(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse sine of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_67asin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_asin(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_asin *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("asin", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1760
 *     {1,2,3}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.asin(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1761
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.asin(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1761, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = asin(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1761, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1761, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1760
 *     {1,2,3}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.asin(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1763
 *         return clifford().wrap( glucat.asin(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.asin(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1764
 *     else:
 *         try:
 *             return math.asin(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.asin(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1764, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asin); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1764, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1764, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1763
 *         return clifford().wrap( glucat.asin(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.asin(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1765
 *         try:
 *             return math.asin(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.asin(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.asin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1765, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1766
 *             return math.asin(obj)
 *         except:
 *             return clifford().wrap( glucat.asin(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline sinh(obj):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1766, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), asin(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1766, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1763
 *         return clifford().wrap( glucat.asin(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.asin(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1747
 *             return clifford().wrap( glucat.sin(toClifford(obj)) )
 * 
 * cpdef inline asin(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse sine of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.asin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_67asin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_66asin[] = "\n    Inverse sine of multivector with optional complexifier.\n\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),s))\n    {-1}\n    >>> s=\"{-1}\"; x=clifford(s); print(asin(sin(x,s),\"{-2,-1,1}\"))\n    {-1}\n    >>> print(asin(1) / pi)\n    0.5\n    >>> x=clifford(\"{1,2,3}\"); print(asin(sin(x)))\n    {1,2,3}\n    ";
                static PyObject *__pyx_pw_8PyClical_67asin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("asin (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "asin") < 0)) __PYX_ERR(0, 1747, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("asin", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1747, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.asin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_66asin(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_66asin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_asin __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("asin", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_asin(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1747, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.asin", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1768
 *             return clifford().wrap( glucat.asin(toClifford(obj)) )
 * 
 * cpdef inline sinh(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Hyperbolic sine of multivector.
 */

                static PyObject *__pyx_pw_8PyClical_69sinh(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_sinh(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  PyObject *__pyx_t_4 = NULL;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("sinh", 0);

                  /* "PyClical.pyx":1777
 *     0.5{1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.sinh(obj)
 *     except:
 */
                  {
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
                    __Pyx_XGOTREF(__pyx_t_1);
                    __Pyx_XGOTREF(__pyx_t_2);
                    __Pyx_XGOTREF(__pyx_t_3);
                    /*try:*/ {

                      /* "PyClical.pyx":1778
 *     """
 *     try:
 *         return math.sinh(obj)             # <<<<<<<<<<<<<<
 *     except:
 *         return clifford().wrap( glucat.sinh(toClifford(obj)) )
 */
                      __Pyx_XDECREF(__pyx_r);
                      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1778, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sinh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1778, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __pyx_t_5 = NULL;
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_5)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_5);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                        }
                      }
                      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_obj);
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1778, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_r = __pyx_t_4;
                      __pyx_t_4 = 0;
                      goto __pyx_L7_try_return;

                      /* "PyClical.pyx":1777
 *     0.5{1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.sinh(obj)
 *     except:
 */
                    }
                    __pyx_L3_error:;
                    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

                    /* "PyClical.pyx":1779
 *     try:
 *         return math.sinh(obj)
 *     except:             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.sinh(toClifford(obj)) )
 * 
 */
                    /*except:*/ {
                      __Pyx_AddTraceback("PyClical.sinh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 1779, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_GOTREF(__pyx_t_5);

                      /* "PyClical.pyx":1780
 *         return math.sinh(obj)
 *     except:
 *         return clifford().wrap( glucat.sinh(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline asinh(obj,i = None):
 */
                      __Pyx_XDECREF(__pyx_r);
                      __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1780, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __pyx_t_8 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_7), sinh(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1780, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                      __pyx_r = __pyx_t_8;
                      __pyx_t_8 = 0;
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      goto __pyx_L6_except_return;
                    }
                    __pyx_L5_except_error:;

                    /* "PyClical.pyx":1777
 *     0.5{1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.sinh(obj)
 *     except:
 */
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L1_error;
                    __pyx_L7_try_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                    __pyx_L6_except_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                  }

                  /* "PyClical.pyx":1768
 *             return clifford().wrap( glucat.asin(toClifford(obj)) )
 * 
 * cpdef inline sinh(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Hyperbolic sine of multivector.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_6);
                  __Pyx_XDECREF(__pyx_t_7);
                  __Pyx_XDECREF(__pyx_t_8);
                  __Pyx_AddTraceback("PyClical.sinh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_69sinh(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_68sinh[] = "\n    Hyperbolic sine of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi/2; print(sinh(x))\n    {1,2}\n    >>> x=clifford(\"{1,2}\") * pi/6; print(sinh(x))\n    0.5{1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_69sinh(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("sinh (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_68sinh(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_68sinh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("sinh", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_sinh(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1768, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.sinh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1782
 *         return clifford().wrap( glucat.sinh(toClifford(obj)) )
 * 
 * cpdef inline asinh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic sine of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_71asinh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_asinh(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_asinh *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("asinh", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1793
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.asinh(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1794
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.asinh(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1794, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = asinh(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1794, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1794, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1793
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.asinh(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1796
 *         return clifford().wrap( glucat.asinh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.asinh(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1797
 *     else:
 *         try:
 *             return math.asinh(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.asinh(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1797, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asinh); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1797, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1797, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1796
 *         return clifford().wrap( glucat.asinh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.asinh(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1798
 *         try:
 *             return math.asinh(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.asinh(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.asinh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1798, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1799
 *             return math.asinh(obj)
 *         except:
 *             return clifford().wrap( glucat.asinh(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline tan(obj,i = None):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1799, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), asinh(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1799, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1796
 *         return clifford().wrap( glucat.asinh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.asinh(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1782
 *         return clifford().wrap( glucat.sinh(toClifford(obj)) )
 * 
 * cpdef inline asinh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic sine of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.asinh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_71asinh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_70asinh[] = "\n    Inverse hyperbolic sine of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(asinh(x,\"{1,2,3}\") * 2/pi)\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(asinh(x) * 2/pi)\n    {1,2}\n    >>> x=clifford(\"{1,2}\") / 2; print(asinh(x) * 6/pi)\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_71asinh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("asinh (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "asinh") < 0)) __PYX_ERR(0, 1782, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("asinh", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1782, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.asinh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_70asinh(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_70asinh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_asinh __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("asinh", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_asinh(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1782, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.asinh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1801
 *             return clifford().wrap( glucat.asinh(toClifford(obj)) )
 * 
 * cpdef inline tan(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Tangent of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_73tan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_tan(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_tan *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("tan", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1810
 *     0.7616{1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.tan(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1811
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.tan(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1811, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = tan(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1811, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1811, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1810
 *     0.7616{1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.tan(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1813
 *         return clifford().wrap( glucat.tan(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.tan(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1814
 *     else:
 *         try:
 *             return math.tan(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.tan(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1814, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_tan); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1814, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1814, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1813
 *         return clifford().wrap( glucat.tan(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.tan(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1815
 *         try:
 *             return math.tan(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.tan(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1815, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1816
 *             return math.tan(obj)
 *         except:
 *             return clifford().wrap( glucat.tan(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline atan(obj,i = None):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1816, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), tan(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1816, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1813
 *         return clifford().wrap( glucat.tan(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.tan(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1801
 *             return clifford().wrap( glucat.asinh(toClifford(obj)) )
 * 
 * cpdef inline tan(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Tangent of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_73tan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_72tan[] = "\n    Tangent of multivector with optional complexifier.\n\n    >>> x=clifford(\"{1,2}\"); print(tan(x,\"{1,2,3}\"))\n    0.7616{1,2}\n    >>> x=clifford(\"{1,2}\"); print(tan(x))\n    0.7616{1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_73tan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("tan (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tan") < 0)) __PYX_ERR(0, 1801, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("tan", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1801, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_72tan(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_72tan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_tan __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("tan", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_tan(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1801, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1818
 *             return clifford().wrap( glucat.tan(toClifford(obj)) )
 * 
 * cpdef inline atan(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse tangent of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_75atan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_atan(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_atan *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("atan", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1827
 *     {1}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.atan(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1828
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.atan(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = atan(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1828, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1828, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1827
 *     {1}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.atan(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1830
 *         return clifford().wrap( glucat.atan(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.atan(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1831
 *     else:
 *         try:
 *             return math.atan(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.atan(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_atan); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1831, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1831, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1830
 *         return clifford().wrap( glucat.atan(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.atan(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1832
 *         try:
 *             return math.atan(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.atan(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.atan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1832, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1833
 *             return math.atan(obj)
 *         except:
 *             return clifford().wrap( glucat.atan(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline tanh(obj):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1833, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), atan(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1833, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1830
 *         return clifford().wrap( glucat.atan(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.atan(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1818
 *             return clifford().wrap( glucat.tan(toClifford(obj)) )
 * 
 * cpdef inline atan(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse tangent of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.atan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_75atan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_74atan[] = "\n    Inverse tangent of multivector with optional complexifier.\n\n    >>> s=index_set({1,2,3}); x=clifford(\"{1}\"); print(tan(atan(x,s),s))\n    {1}\n    >>> x=clifford(\"{1}\"); print(tan(atan(x)))\n    {1}\n    ";
                static PyObject *__pyx_pw_8PyClical_75atan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("atan (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "atan") < 0)) __PYX_ERR(0, 1818, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("atan", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1818, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.atan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_74atan(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_74atan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_atan __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("atan", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_atan(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1818, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.atan", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1835
 *             return clifford().wrap( glucat.atan(toClifford(obj)) )
 * 
 * cpdef inline tanh(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Hyperbolic tangent of multivector.
 */

                static PyObject *__pyx_pw_8PyClical_77tanh(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_tanh(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  PyObject *__pyx_t_4 = NULL;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("tanh", 0);

                  /* "PyClical.pyx":1842
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.tanh(obj)
 *     except:
 */
                  {
                    __Pyx_PyThreadState_declare
                    __Pyx_PyThreadState_assign
                    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
                    __Pyx_XGOTREF(__pyx_t_1);
                    __Pyx_XGOTREF(__pyx_t_2);
                    __Pyx_XGOTREF(__pyx_t_3);
                    /*try:*/ {

                      /* "PyClical.pyx":1843
 *     """
 *     try:
 *         return math.tanh(obj)             # <<<<<<<<<<<<<<
 *     except:
 *         return clifford().wrap( glucat.tanh(toClifford(obj)) )
 */
                      __Pyx_XDECREF(__pyx_r);
                      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_math); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1843, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_5);
                      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_tanh); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1843, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __pyx_t_5 = NULL;
                      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
                        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
                        if (likely(__pyx_t_5)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
                          __Pyx_INCREF(__pyx_t_5);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_6, function);
                        }
                      }
                      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_obj);
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1843, __pyx_L3_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      __pyx_r = __pyx_t_4;
                      __pyx_t_4 = 0;
                      goto __pyx_L7_try_return;

                      /* "PyClical.pyx":1842
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.tanh(obj)
 *     except:
 */
                    }
                    __pyx_L3_error:;
                    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
                    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

                    /* "PyClical.pyx":1844
 *     try:
 *         return math.tanh(obj)
 *     except:             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.tanh(toClifford(obj)) )
 * 
 */
                    /*except:*/ {
                      __Pyx_AddTraceback("PyClical.tanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 1844, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_4);
                      __Pyx_GOTREF(__pyx_t_6);
                      __Pyx_GOTREF(__pyx_t_5);

                      /* "PyClical.pyx":1845
 *         return math.tanh(obj)
 *     except:
 *         return clifford().wrap( glucat.tanh(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline atanh(obj,i = None):
 */
                      __Pyx_XDECREF(__pyx_r);
                      __pyx_t_7 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1845, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_7);
                      __pyx_t_8 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_7), tanh(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1845, __pyx_L5_except_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
                      __pyx_r = __pyx_t_8;
                      __pyx_t_8 = 0;
                      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
                      goto __pyx_L6_except_return;
                    }
                    __pyx_L5_except_error:;

                    /* "PyClical.pyx":1842
 *     {1,2}
 *     """
 *     try:             # <<<<<<<<<<<<<<
 *         return math.tanh(obj)
 *     except:
 */
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L1_error;
                    __pyx_L7_try_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                    __pyx_L6_except_return:;
                    __Pyx_XGIVEREF(__pyx_t_1);
                    __Pyx_XGIVEREF(__pyx_t_2);
                    __Pyx_XGIVEREF(__pyx_t_3);
                    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
                    goto __pyx_L0;
                  }

                  /* "PyClical.pyx":1835
 *             return clifford().wrap( glucat.atan(toClifford(obj)) )
 * 
 * cpdef inline tanh(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Hyperbolic tangent of multivector.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_6);
                  __Pyx_XDECREF(__pyx_t_7);
                  __Pyx_XDECREF(__pyx_t_8);
                  __Pyx_AddTraceback("PyClical.tanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_77tanh(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_76tanh[] = "\n    Hyperbolic tangent of multivector.\n\n    >>> x=clifford(\"{1,2}\") * pi/4; print(tanh(x))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_77tanh(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("tanh (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_76tanh(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_76tanh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("tanh", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_tanh(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1835, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.tanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1847
 *         return clifford().wrap( glucat.tanh(toClifford(obj)) )
 * 
 * cpdef inline atanh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic tangent of multivector with optional complexifier.
 */

                static PyObject *__pyx_pw_8PyClical_79atanh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_atanh(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_atanh *__pyx_optional_args) {
                  PyObject *__pyx_v_i = ((PyObject *)Py_None);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  int __pyx_t_1;
                  int __pyx_t_2;
                  PyObject *__pyx_t_3 = NULL;
                  Clifford __pyx_t_4;
                  PyObject *__pyx_t_5 = NULL;
                  PyObject *__pyx_t_6 = NULL;
                  PyObject *__pyx_t_7 = NULL;
                  PyObject *__pyx_t_8 = NULL;
                  PyObject *__pyx_t_9 = NULL;
                  PyObject *__pyx_t_10 = NULL;
                  PyObject *__pyx_t_11 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("atanh", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_i = __pyx_optional_args->i;
                    }
                  }

                  /* "PyClical.pyx":1856
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.atanh(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  __pyx_t_1 = (__pyx_v_i != Py_None);
                  __pyx_t_2 = (__pyx_t_1 != 0);
                  if (__pyx_t_2) {

                    /* "PyClical.pyx":1857
 *     """
 *     if not (i is None):
 *         return clifford().wrap( glucat.atanh(toClifford(obj), toClifford(i)) )             # <<<<<<<<<<<<<<
 *     else:
 *         try:
 */
                    __Pyx_XDECREF(__pyx_r);
                    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1857, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    try {
                      __pyx_t_4 = atanh(__pyx_f_8PyClical_toClifford(__pyx_v_obj), __pyx_f_8PyClical_toClifford(__pyx_v_i));
                    } catch(...) {
                      __Pyx_CppExn2PyErr();
                      __PYX_ERR(0, 1857, __pyx_L1_error)
                    }
                    __pyx_t_5 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_3), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1857, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_5);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_r = __pyx_t_5;
                    __pyx_t_5 = 0;
                    goto __pyx_L0;

                    /* "PyClical.pyx":1856
 *     {1,2}
 *     """
 *     if not (i is None):             # <<<<<<<<<<<<<<
 *         return clifford().wrap( glucat.atanh(toClifford(obj), toClifford(i)) )
 *     else:
 */
                  }

                  /* "PyClical.pyx":1859
 *         return clifford().wrap( glucat.atanh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.atanh(obj)
 *         except:
 */
                  /*else*/ {
                    {
                      __Pyx_PyThreadState_declare
                      __Pyx_PyThreadState_assign
                      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
                      __Pyx_XGOTREF(__pyx_t_6);
                      __Pyx_XGOTREF(__pyx_t_7);
                      __Pyx_XGOTREF(__pyx_t_8);
                      /*try:*/ {

                        /* "PyClical.pyx":1860
 *     else:
 *         try:
 *             return math.atanh(obj)             # <<<<<<<<<<<<<<
 *         except:
 *             return clifford().wrap( glucat.atanh(toClifford(obj)) )
 */
                        __Pyx_XDECREF(__pyx_r);
                        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1860, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_3);
                        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_atanh); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1860, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __pyx_t_3 = NULL;
                        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
                          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
                          if (likely(__pyx_t_3)) {
                            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                            __Pyx_INCREF(__pyx_t_3);
                            __Pyx_INCREF(function);
                            __Pyx_DECREF_SET(__pyx_t_9, function);
                          }
                        }
                        __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_obj) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_obj);
                        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1860, __pyx_L4_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        __pyx_r = __pyx_t_5;
                        __pyx_t_5 = 0;
                        goto __pyx_L8_try_return;

                        /* "PyClical.pyx":1859
 *         return clifford().wrap( glucat.atanh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.atanh(obj)
 *         except:
 */
                      }
                      __pyx_L4_error:;
                      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

                      /* "PyClical.pyx":1861
 *         try:
 *             return math.atanh(obj)
 *         except:             # <<<<<<<<<<<<<<
 *             return clifford().wrap( glucat.atanh(toClifford(obj)) )
 * 
 */
                      /*except:*/ {
                        __Pyx_AddTraceback("PyClical.atanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_3) < 0) __PYX_ERR(0, 1861, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_5);
                        __Pyx_GOTREF(__pyx_t_9);
                        __Pyx_GOTREF(__pyx_t_3);

                        /* "PyClical.pyx":1862
 *             return math.atanh(obj)
 *         except:
 *             return clifford().wrap( glucat.atanh(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline random_clifford(index_set ixt, fill = 1.0):
 */
                        __Pyx_XDECREF(__pyx_r);
                        __pyx_t_10 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1862, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_10);
                        __pyx_t_11 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_10), atanh(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1862, __pyx_L6_except_error)
                        __Pyx_GOTREF(__pyx_t_11);
                        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                        __pyx_r = __pyx_t_11;
                        __pyx_t_11 = 0;
                        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                        goto __pyx_L7_except_return;
                      }
                      __pyx_L6_except_error:;

                      /* "PyClical.pyx":1859
 *         return clifford().wrap( glucat.atanh(toClifford(obj), toClifford(i)) )
 *     else:
 *         try:             # <<<<<<<<<<<<<<
 *             return math.atanh(obj)
 *         except:
 */
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L1_error;
                      __pyx_L8_try_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                      __pyx_L7_except_return:;
                      __Pyx_XGIVEREF(__pyx_t_6);
                      __Pyx_XGIVEREF(__pyx_t_7);
                      __Pyx_XGIVEREF(__pyx_t_8);
                      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_7, __pyx_t_8);
                      goto __pyx_L0;
                    }
                  }

                  /* "PyClical.pyx":1847
 *         return clifford().wrap( glucat.tanh(toClifford(obj)) )
 * 
 * cpdef inline atanh(obj,i = None):             # <<<<<<<<<<<<<<
 *     """
 *     Inverse hyperbolic tangent of multivector with optional complexifier.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_XDECREF(__pyx_t_5);
                  __Pyx_XDECREF(__pyx_t_9);
                  __Pyx_XDECREF(__pyx_t_10);
                  __Pyx_XDECREF(__pyx_t_11);
                  __Pyx_AddTraceback("PyClical.atanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_79atanh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_78atanh[] = "\n    Inverse hyperbolic tangent of multivector with optional complexifier.\n\n    >>> s=index_set({1,2,3}); x=clifford(\"{1,2}\"); print(tanh(atanh(x,s)))\n    {1,2}\n    >>> x=clifford(\"{1,2}\"); print(tanh(atanh(x)))\n    {1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_79atanh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_obj = 0;
                  PyObject *__pyx_v_i = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("atanh (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_i,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)Py_None);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "atanh") < 0)) __PYX_ERR(0, 1847, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_obj = values[0];
                    __pyx_v_i = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("atanh", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1847, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.atanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_78atanh(__pyx_self, __pyx_v_obj, __pyx_v_i);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_78atanh(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj, PyObject *__pyx_v_i) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_atanh __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("atanh", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.i = __pyx_v_i;
                  __pyx_t_1 = __pyx_f_8PyClical_atanh(__pyx_v_obj, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.atanh", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1864
 *             return clifford().wrap( glucat.atanh(toClifford(obj)) )
 * 
 * cpdef inline random_clifford(index_set ixt, fill = 1.0):             # <<<<<<<<<<<<<<
 *     """
 *     Random multivector within a frame.
 */

                static PyObject *__pyx_pw_8PyClical_81random_clifford(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_random_clifford(struct __pyx_obj_8PyClical_index_set *__pyx_v_ixt, CYTHON_UNUSED int __pyx_skip_dispatch, struct __pyx_opt_args_8PyClical_random_clifford *__pyx_optional_args) {
                  PyObject *__pyx_v_fill = ((PyObject *)__pyx_float_1_0);
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  scalar_t __pyx_t_3;
                  PyObject *__pyx_t_4 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("random_clifford", 0);
                  if (__pyx_optional_args) {
                    if (__pyx_optional_args->__pyx_n > 0) {
                      __pyx_v_fill = __pyx_optional_args->fill;
                    }
                  }

                  /* "PyClical.pyx":1871
 *     {-3,-1,2}
 *     """
 *     return clifford().wrap( clifford().instance.random(ixt.unwrap(), <scalar_t>fill) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline cga3(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1871, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1871, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_fill); if (unlikely((__pyx_t_3 == ((scalar_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1871, __pyx_L1_error)
                  __pyx_t_4 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), ((struct __pyx_obj_8PyClical_clifford *)__pyx_t_2)->instance->random(__pyx_f_8PyClical_9index_set_unwrap(__pyx_v_ixt), ((scalar_t)__pyx_t_3))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1871, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_4);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_r = __pyx_t_4;
                  __pyx_t_4 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1864
 *             return clifford().wrap( glucat.atanh(toClifford(obj)) )
 * 
 * cpdef inline random_clifford(index_set ixt, fill = 1.0):             # <<<<<<<<<<<<<<
 *     """
 *     Random multivector within a frame.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_4);
                  __Pyx_AddTraceback("PyClical.random_clifford", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_81random_clifford(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_80random_clifford[] = "\n    Random multivector within a frame.\n\n    >>> print(random_clifford(index_set({-3,-1,2})).frame())\n    {-3,-1,2}\n    ";
                static PyObject *__pyx_pw_8PyClical_81random_clifford(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  struct __pyx_obj_8PyClical_index_set *__pyx_v_ixt = 0;
                  PyObject *__pyx_v_fill = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("random_clifford (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ixt,&__pyx_n_s_fill,0};
                    PyObject* values[2] = {0,0};
                    values[1] = ((PyObject *)__pyx_float_1_0);
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ixt)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (kw_args > 0) {
                          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fill);
                          if (value) { values[1] = value; kw_args--; }
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "random_clifford") < 0)) __PYX_ERR(0, 1864, __pyx_L3_error)
                      }
                    } else {
                      switch (PyTuple_GET_SIZE(__pyx_args)) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                    }
                    __pyx_v_ixt = ((struct __pyx_obj_8PyClical_index_set *)values[0]);
                    __pyx_v_fill = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("random_clifford", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1864, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.random_clifford", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_ixt), __pyx_ptype_8PyClical_index_set, 1, "ixt", 0))) __PYX_ERR(0, 1864, __pyx_L1_error)
                  __pyx_r = __pyx_pf_8PyClical_80random_clifford(__pyx_self, __pyx_v_ixt, __pyx_v_fill);

                  /* function exit code */
                  goto __pyx_L0;
                  __pyx_L1_error:;
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_80random_clifford(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8PyClical_index_set *__pyx_v_ixt, PyObject *__pyx_v_fill) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  struct __pyx_opt_args_8PyClical_random_clifford __pyx_t_2;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("random_clifford", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2.__pyx_n = 1;
                  __pyx_t_2.fill = __pyx_v_fill;
                  __pyx_t_1 = __pyx_f_8PyClical_random_clifford(__pyx_v_ixt, 0, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1864, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.random_clifford", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1873
 *     return clifford().wrap( clifford().instance.random(ixt.unwrap(), <scalar_t>fill) )
 * 
 * cpdef inline cga3(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Convert Euclidean 3D multivector to Conformal Geometric Algebra using Doran and Lasenby definition.
 */

                static PyObject *__pyx_pw_8PyClical_83cga3(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cga3(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cga3", 0);

                  /* "PyClical.pyx":1880
 *     87{-1}+4{1}+18{2}+2{3}+85{4}
 *     """
 *     return clifford().wrap( glucat.cga3(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline cga3std(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1880, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), cga3::cga3(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1880, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_r = __pyx_t_2;
                  __pyx_t_2 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1873
 *     return clifford().wrap( clifford().instance.random(ixt.unwrap(), <scalar_t>fill) )
 * 
 * cpdef inline cga3(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Convert Euclidean 3D multivector to Conformal Geometric Algebra using Doran and Lasenby definition.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_AddTraceback("PyClical.cga3", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_83cga3(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_82cga3[] = "\n    Convert Euclidean 3D multivector to Conformal Geometric Algebra using Doran and Lasenby definition.\n\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(cga3(x))\n    87{-1}+4{1}+18{2}+2{3}+85{4}\n    ";
                static PyObject *__pyx_pw_8PyClical_83cga3(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("cga3 (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_82cga3(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_82cga3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cga3", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_cga3(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1873, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.cga3", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1882
 *     return clifford().wrap( glucat.cga3(toClifford(obj)) )
 * 
 * cpdef inline cga3std(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Convert CGA3 null vector to standard conformal null vector using Doran and Lasenby definition.
 */

                static PyObject *__pyx_pw_8PyClical_85cga3std(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_cga3std(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cga3std", 0);

                  /* "PyClical.pyx":1891
 *     0
 *     """
 *     return clifford().wrap( glucat.cga3std(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * cpdef inline agc3(obj):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1891, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), cga3::cga3std(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1891, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_r = __pyx_t_2;
                  __pyx_t_2 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1882
 *     return clifford().wrap( glucat.cga3(toClifford(obj)) )
 * 
 * cpdef inline cga3std(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Convert CGA3 null vector to standard conformal null vector using Doran and Lasenby definition.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_AddTraceback("PyClical.cga3std", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_85cga3std(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_84cga3std[] = "\n    Convert CGA3 null vector to standard conformal null vector using Doran and Lasenby definition.\n\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(cga3std(cga3(x)))\n    87{-1}+4{1}+18{2}+2{3}+85{4}\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(cga3std(cga3(x))-cga3(x))\n    0\n    ";
                static PyObject *__pyx_pw_8PyClical_85cga3std(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("cga3std (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_84cga3std(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_84cga3std(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("cga3std", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_cga3std(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1882, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.cga3std", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1893
 *     return clifford().wrap( glucat.cga3std(toClifford(obj)) )
 * 
 * cpdef inline agc3(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Convert CGA3 null vector to Euclidean 3D vector using Doran and Lasenby definition.
 */

                static PyObject *__pyx_pw_8PyClical_87agc3(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static CYTHON_INLINE PyObject *__pyx_f_8PyClical_agc3(PyObject *__pyx_v_obj, CYTHON_UNUSED int __pyx_skip_dispatch) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("agc3", 0);

                  /* "PyClical.pyx":1902
 *     0
 *     """
 *     return clifford().wrap( glucat.agc3(toClifford(obj)) )             # <<<<<<<<<<<<<<
 * 
 * # Some abbreviations.
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_8PyClical_clifford)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1902, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = __pyx_f_8PyClical_8clifford_wrap(((struct __pyx_obj_8PyClical_clifford *)__pyx_t_1), cga3::agc3(__pyx_f_8PyClical_toClifford(__pyx_v_obj))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1902, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_r = __pyx_t_2;
                  __pyx_t_2 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1893
 *     return clifford().wrap( glucat.cga3std(toClifford(obj)) )
 * 
 * cpdef inline agc3(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Convert CGA3 null vector to Euclidean 3D vector using Doran and Lasenby definition.
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_AddTraceback("PyClical.agc3", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_87agc3(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_86agc3[] = "\n    Convert CGA3 null vector to Euclidean 3D vector using Doran and Lasenby definition.\n\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(agc3(cga3(x)))\n    2{1}+9{2}+{3}\n    >>> x=clifford(\"2{1}+9{2}+{3}\"); print(agc3(cga3(x))-x)\n    0\n    ";
                static PyObject *__pyx_pw_8PyClical_87agc3(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("agc3 (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_86agc3(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_86agc3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("agc3", 0);
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __pyx_f_8PyClical_agc3(__pyx_v_obj, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1893, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("PyClical.agc3", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1936
 * """
 * 
 * def e(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for clifford(index_set(obj)).
 */

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_89e(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
                static char __pyx_doc_8PyClical_88e[] = "\n    Abbreviation for clifford(index_set(obj)).\n\n    >>> print(e(1))\n    {1}\n    >>> print(e(-1))\n    {-1}\n    >>> print(e(0))\n    1\n    ";
                static PyMethodDef __pyx_mdef_8PyClical_89e = {"e", (PyCFunction)__pyx_pw_8PyClical_89e, METH_O, __pyx_doc_8PyClical_88e};
                static PyObject *__pyx_pw_8PyClical_89e(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("e (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_88e(__pyx_self, ((PyObject *)__pyx_v_obj));

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_88e(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("e", 0);

                  /* "PyClical.pyx":1947
 *     1
 *     """
 *     return clifford(index_set(obj))             # <<<<<<<<<<<<<<
 * 
 * def istpq(p, q):
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_index_set), __pyx_v_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1947, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1947, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __pyx_r = __pyx_t_2;
                  __pyx_t_2 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1936
 * """
 * 
 * def e(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for clifford(index_set(obj)).
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_AddTraceback("PyClical.e", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1949
 *     return clifford(index_set(obj))
 * 
 * def istpq(p, q):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for index_set({-q,...p}).
 */

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_91istpq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
                static char __pyx_doc_8PyClical_90istpq[] = "\n    Abbreviation for index_set({-q,...p}).\n\n    >>> print(istpq(2,3))\n    {-3,-2,-1,1,2}\n    ";
                static PyMethodDef __pyx_mdef_8PyClical_91istpq = {"istpq", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_91istpq, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_90istpq};
                static PyObject *__pyx_pw_8PyClical_91istpq(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
                  PyObject *__pyx_v_p = 0;
                  PyObject *__pyx_v_q = 0;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("istpq (wrapper)", 0);
                  {
                    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,&__pyx_n_s_q,0};
                    PyObject* values[2] = {0,0};
                    if (unlikely(__pyx_kwds)) {
                      Py_ssize_t kw_args;
                      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
                      switch (pos_args) {
                        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                        CYTHON_FALLTHROUGH;
                        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                        CYTHON_FALLTHROUGH;
                        case  0: break;
                        default: goto __pyx_L5_argtuple_error;
                      }
                      kw_args = PyDict_Size(__pyx_kwds);
                      switch (pos_args) {
                        case  0:
                        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p)) != 0)) kw_args--;
                        else goto __pyx_L5_argtuple_error;
                        CYTHON_FALLTHROUGH;
                        case  1:
                        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_q)) != 0)) kw_args--;
                        else {
                          __Pyx_RaiseArgtupleInvalid("istpq", 1, 2, 2, 1); __PYX_ERR(0, 1949, __pyx_L3_error)
                        }
                      }
                      if (unlikely(kw_args > 0)) {
                        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "istpq") < 0)) __PYX_ERR(0, 1949, __pyx_L3_error)
                      }
                    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
                      goto __pyx_L5_argtuple_error;
                    } else {
                      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
                      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
                    }
                    __pyx_v_p = values[0];
                    __pyx_v_q = values[1];
                  }
                  goto __pyx_L4_argument_unpacking_done;
                  __pyx_L5_argtuple_error:;
                  __Pyx_RaiseArgtupleInvalid("istpq", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1949, __pyx_L3_error)
                  __pyx_L3_error:;
                  __Pyx_AddTraceback("PyClical.istpq", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __Pyx_RefNannyFinishContext();
                  return NULL;
                  __pyx_L4_argument_unpacking_done:;
                  __pyx_r = __pyx_pf_8PyClical_90istpq(__pyx_self, __pyx_v_p, __pyx_v_q);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_90istpq(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p, PyObject *__pyx_v_q) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("istpq", 0);

                  /* "PyClical.pyx":1956
 *     {-3,-2,-1,1,2}
 *     """
 *     return index_set(set(range(-q,p+1)))             # <<<<<<<<<<<<<<
 * 
 * ninf3 = e(4) + e(-1) # Null infinity point in 3D Conformal Geometric Algebra [DL].
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = PyNumber_Negative(__pyx_v_q); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1956, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_p, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1956, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1956, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_GIVEREF(__pyx_t_1);
                  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_2);
                  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
                  __pyx_t_1 = 0;
                  __pyx_t_2 = 0;
                  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1956, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_3 = PySet_New(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1956, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_8PyClical_index_set), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1956, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_r = __pyx_t_2;
                  __pyx_t_2 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1949
 *     return clifford(index_set(obj))
 * 
 * def istpq(p, q):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for index_set({-q,...p}).
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical.istpq", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "PyClical.pyx":1962
 * 
 * # Doctest interface.
 * def _test():             # <<<<<<<<<<<<<<
 *     import PyClical, doctest
 *     return doctest.testmod(PyClical)
 */

                /* Python wrapper */
                static PyObject *__pyx_pw_8PyClical_93_test(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
                static PyMethodDef __pyx_mdef_8PyClical_93_test = {"_test", (PyCFunction)__pyx_pw_8PyClical_93_test, METH_NOARGS, 0};
                static PyObject *__pyx_pw_8PyClical_93_test(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
                  PyObject *__pyx_r = 0;
                  __Pyx_RefNannyDeclarations
                  __Pyx_RefNannySetupContext("_test (wrapper)", 0);
                  __pyx_r = __pyx_pf_8PyClical_92_test(__pyx_self);

                  /* function exit code */
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                static PyObject *__pyx_pf_8PyClical_92_test(CYTHON_UNUSED PyObject *__pyx_self) {
                  PyObject *__pyx_v_PyClical = NULL;
                  PyObject *__pyx_v_doctest = NULL;
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  PyObject *__pyx_t_2 = NULL;
                  PyObject *__pyx_t_3 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("_test", 0);

                  /* "PyClical.pyx":1963
 * # Doctest interface.
 * def _test():
 *     import PyClical, doctest             # <<<<<<<<<<<<<<
 *     return doctest.testmod(PyClical)
 * 
 */
                  __pyx_t_1 = __Pyx_Import(__pyx_n_s_PyClical, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_v_PyClical = __pyx_t_1;
                  __pyx_t_1 = 0;
                  __pyx_t_1 = __Pyx_Import(__pyx_n_s_doctest, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_v_doctest = __pyx_t_1;
                  __pyx_t_1 = 0;

                  /* "PyClical.pyx":1964
 * def _test():
 *     import PyClical, doctest
 *     return doctest.testmod(PyClical)             # <<<<<<<<<<<<<<
 * 
 * if __name__ == "__main__":
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_doctest, __pyx_n_s_testmod); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1964, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_3 = NULL;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
                    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
                    if (likely(__pyx_t_3)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
                      __Pyx_INCREF(__pyx_t_3);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_2, function);
                    }
                  }
                  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_PyClical) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_PyClical);
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1964, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "PyClical.pyx":1962
 * 
 * # Doctest interface.
 * def _test():             # <<<<<<<<<<<<<<
 *     import PyClical, doctest
 *     return doctest.testmod(PyClical)
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_XDECREF(__pyx_t_2);
                  __Pyx_XDECREF(__pyx_t_3);
                  __Pyx_AddTraceback("PyClical._test", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = NULL;
                  __pyx_L0:;
                  __Pyx_XDECREF(__pyx_v_PyClical);
                  __Pyx_XDECREF(__pyx_v_doctest);
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

                  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

                  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

                  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

                  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }

                /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

                static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
                  PyObject *__pyx_r = NULL;
                  __Pyx_RefNannyDeclarations
                  PyObject *__pyx_t_1 = NULL;
                  int __pyx_lineno = 0;
                  const char *__pyx_filename = NULL;
                  int __pyx_clineno = 0;
                  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

                  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
                  __Pyx_XDECREF(__pyx_r);
                  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_r = __pyx_t_1;
                  __pyx_t_1 = 0;
                  goto __pyx_L0;

                  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

                  /* function exit code */
                  __pyx_L1_error:;
                  __Pyx_XDECREF(__pyx_t_1);
                  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
                  __pyx_r = 0;
                  __pyx_L0:;
                  __Pyx_XGIVEREF(__pyx_r);
                  __Pyx_RefNannyFinishContext();
                  return __pyx_r;
                }
                static struct __pyx_vtabstruct_8PyClical_index_set __pyx_vtable_8PyClical_index_set;

                static PyObject *__pyx_tp_new_8PyClical_index_set(PyTypeObject *t, PyObject *a, PyObject *k) {
                  struct __pyx_obj_8PyClical_index_set *p;
                  PyObject *o;
                  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
                    o = (*t->tp_alloc)(t, 0);
                  } else {
                    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
                  }
                  if (unlikely(!o)) return 0;
                  p = ((struct __pyx_obj_8PyClical_index_set *)o);
                  p->__pyx_vtab = __pyx_vtabptr_8PyClical_index_set;
                  if (unlikely(__pyx_pw_8PyClical_9index_set_3__cinit__(o, a, k) < 0)) goto bad;
                  return o;
                  bad:
                  Py_DECREF(o); o = 0;
                  return NULL;
                }

                static void __pyx_tp_dealloc_8PyClical_index_set(PyObject *o) {
                  #if CYTHON_USE_TP_FINALIZE
                  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
                    if (PyObject_CallFinalizerFromDealloc(o)) return;
                  }
                  #endif
                  {
                    PyObject *etype, *eval, *etb;
                    PyErr_Fetch(&etype, &eval, &etb);
                    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
                    __pyx_pw_8PyClical_9index_set_5__dealloc__(o);
                    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
                    PyErr_Restore(etype, eval, etb);
                  }
                  (*Py_TYPE(o)->tp_free)(o);
                }
                static PyObject *__pyx_sq_item_8PyClical_index_set(PyObject *o, Py_ssize_t i) {
                  PyObject *r;
                  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
                  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
                  Py_DECREF(x);
                  return r;
                }

                static int __pyx_mp_ass_subscript_8PyClical_index_set(PyObject *o, PyObject *i, PyObject *v) {
                  if (v) {
                    return __pyx_pw_8PyClical_9index_set_9__setitem__(o, i, v);
                  }
                  else {
                    PyErr_Format(PyExc_NotImplementedError,
                      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
                    return -1;
                  }
                }

                static PyMethodDef __pyx_methods_8PyClical_index_set[] = {
                  {"copy", (PyCFunction)__pyx_pw_8PyClical_9index_set_1copy, METH_NOARGS, __pyx_doc_8PyClical_9index_set_copy},
                  {"count", (PyCFunction)__pyx_pw_8PyClical_9index_set_32count, METH_NOARGS, __pyx_doc_8PyClical_9index_set_31count},
                  {"count_neg", (PyCFunction)__pyx_pw_8PyClical_9index_set_34count_neg, METH_NOARGS, __pyx_doc_8PyClical_9index_set_33count_neg},
                  {"count_pos", (PyCFunction)__pyx_pw_8PyClical_9index_set_36count_pos, METH_NOARGS, __pyx_doc_8PyClical_9index_set_35count_pos},
                  {"min", (PyCFunction)__pyx_pw_8PyClical_9index_set_38min, METH_NOARGS, __pyx_doc_8PyClical_9index_set_37min},
                  {"max", (PyCFunction)__pyx_pw_8PyClical_9index_set_40max, METH_NOARGS, __pyx_doc_8PyClical_9index_set_39max},
                  {"hash_fn", (PyCFunction)__pyx_pw_8PyClical_9index_set_42hash_fn, METH_NOARGS, __pyx_doc_8PyClical_9index_set_41hash_fn},
                  {"sign_of_mult", (PyCFunction)__pyx_pw_8PyClical_9index_set_44sign_of_mult, METH_O, __pyx_doc_8PyClical_9index_set_43sign_of_mult},
                  {"sign_of_square", (PyCFunction)__pyx_pw_8PyClical_9index_set_46sign_of_square, METH_NOARGS, __pyx_doc_8PyClical_9index_set_45sign_of_square},
                  {"__reduce_cython__", (PyCFunction)__pyx_pw_8PyClical_9index_set_52__reduce_cython__, METH_NOARGS, 0},
                  {"__setstate_cython__", (PyCFunction)__pyx_pw_8PyClical_9index_set_54__setstate_cython__, METH_O, 0},
                  {0, 0, 0, 0}
                };

                static PyNumberMethods __pyx_tp_as_number_index_set = {
                  0, /*nb_add*/
                  0, /*nb_subtract*/
                  0, /*nb_multiply*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_divide*/
                  #endif
                  0, /*nb_remainder*/
                  0, /*nb_divmod*/
                  0, /*nb_power*/
                  0, /*nb_negative*/
                  0, /*nb_positive*/
                  0, /*nb_absolute*/
                  0, /*nb_nonzero*/
                  __pyx_pw_8PyClical_9index_set_18__invert__, /*nb_invert*/
                  0, /*nb_lshift*/
                  0, /*nb_rshift*/
                  __pyx_pw_8PyClical_9index_set_24__and__, /*nb_and*/
                  __pyx_pw_8PyClical_9index_set_20__xor__, /*nb_xor*/
                  __pyx_pw_8PyClical_9index_set_28__or__, /*nb_or*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_coerce*/
                  #endif
                  0, /*nb_int*/
                  #if PY_MAJOR_VERSION < 3
                  0, /*nb_long*/
                  #else
                  0, /*reserved*/
                  #endif
                  0, /*nb_float*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_oct*/
                  #endif
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_hex*/
                  #endif
                  0, /*nb_inplace_add*/
                  0, /*nb_inplace_subtract*/
                  0, /*nb_inplace_multiply*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_inplace_divide*/
                  #endif
                  0, /*nb_inplace_remainder*/
                  0, /*nb_inplace_power*/
                  0, /*nb_inplace_lshift*/
                  0, /*nb_inplace_rshift*/
                  __pyx_pw_8PyClical_9index_set_26__iand__, /*nb_inplace_and*/
                  __pyx_pw_8PyClical_9index_set_22__ixor__, /*nb_inplace_xor*/
                  __pyx_pw_8PyClical_9index_set_30__ior__, /*nb_inplace_or*/
                  0, /*nb_floor_divide*/
                  0, /*nb_true_divide*/
                  0, /*nb_inplace_floor_divide*/
                  0, /*nb_inplace_true_divide*/
                  0, /*nb_index*/
                  #if PY_VERSION_HEX >= 0x03050000
                  0, /*nb_matrix_multiply*/
                  #endif
                  #if PY_VERSION_HEX >= 0x03050000
                  0, /*nb_inplace_matrix_multiply*/
                  #endif
                };

                static PySequenceMethods __pyx_tp_as_sequence_index_set = {
                  0, /*sq_length*/
                  0, /*sq_concat*/
                  0, /*sq_repeat*/
                  __pyx_sq_item_8PyClical_index_set, /*sq_item*/
                  0, /*sq_slice*/
                  0, /*sq_ass_item*/
                  0, /*sq_ass_slice*/
                  __pyx_pw_8PyClical_9index_set_13__contains__, /*sq_contains*/
                  0, /*sq_inplace_concat*/
                  0, /*sq_inplace_repeat*/
                };

                static PyMappingMethods __pyx_tp_as_mapping_index_set = {
                  0, /*mp_length*/
                  __pyx_pw_8PyClical_9index_set_11__getitem__, /*mp_subscript*/
                  __pyx_mp_ass_subscript_8PyClical_index_set, /*mp_ass_subscript*/
                };

                static PyTypeObject __pyx_type_8PyClical_index_set = {
                  PyVarObject_HEAD_INIT(0, 0)
                  "PyClical.index_set", /*tp_name*/
                  sizeof(struct __pyx_obj_8PyClical_index_set), /*tp_basicsize*/
                  0, /*tp_itemsize*/
                  __pyx_tp_dealloc_8PyClical_index_set, /*tp_dealloc*/
                  #if PY_VERSION_HEX < 0x030800b4
                  0, /*tp_print*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b4
                  0, /*tp_vectorcall_offset*/
                  #endif
                  0, /*tp_getattr*/
                  0, /*tp_setattr*/
                  #if PY_MAJOR_VERSION < 3
                  0, /*tp_compare*/
                  #endif
                  #if PY_MAJOR_VERSION >= 3
                  0, /*tp_as_async*/
                  #endif
                  __pyx_pw_8PyClical_9index_set_48__repr__, /*tp_repr*/
                  &__pyx_tp_as_number_index_set, /*tp_as_number*/
                  &__pyx_tp_as_sequence_index_set, /*tp_as_sequence*/
                  &__pyx_tp_as_mapping_index_set, /*tp_as_mapping*/
                  0, /*tp_hash*/
                  0, /*tp_call*/
                  __pyx_pw_8PyClical_9index_set_50__str__, /*tp_str*/
                  0, /*tp_getattro*/
                  0, /*tp_setattro*/
                  0, /*tp_as_buffer*/
                  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
                  "\n    Python class index_set wraps C++ class IndexSet.\n    ", /*tp_doc*/
                  0, /*tp_traverse*/
                  0, /*tp_clear*/
                  __pyx_pw_8PyClical_9index_set_7__richcmp__, /*tp_richcompare*/
                  0, /*tp_weaklistoffset*/
                  __pyx_pw_8PyClical_9index_set_15__iter__, /*tp_iter*/
                  0, /*tp_iternext*/
                  __pyx_methods_8PyClical_index_set, /*tp_methods*/
                  0, /*tp_members*/
                  0, /*tp_getset*/
                  0, /*tp_base*/
                  0, /*tp_dict*/
                  0, /*tp_descr_get*/
                  0, /*tp_descr_set*/
                  0, /*tp_dictoffset*/
                  0, /*tp_init*/
                  0, /*tp_alloc*/
                  __pyx_tp_new_8PyClical_index_set, /*tp_new*/
                  0, /*tp_free*/
                  0, /*tp_is_gc*/
                  0, /*tp_bases*/
                  0, /*tp_mro*/
                  0, /*tp_cache*/
                  0, /*tp_subclasses*/
                  0, /*tp_weaklist*/
                  0, /*tp_del*/
                  0, /*tp_version_tag*/
                  #if PY_VERSION_HEX >= 0x030400a1
                  0, /*tp_finalize*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
                  0, /*tp_vectorcall*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
                  0, /*tp_print*/
                  #endif
                  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
                  0, /*tp_pypy_flags*/
                  #endif
                };
                static struct __pyx_vtabstruct_8PyClical_clifford __pyx_vtable_8PyClical_clifford;

                static PyObject *__pyx_tp_new_8PyClical_clifford(PyTypeObject *t, PyObject *a, PyObject *k) {
                  struct __pyx_obj_8PyClical_clifford *p;
                  PyObject *o;
                  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
                    o = (*t->tp_alloc)(t, 0);
                  } else {
                    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
                  }
                  if (unlikely(!o)) return 0;
                  p = ((struct __pyx_obj_8PyClical_clifford *)o);
                  p->__pyx_vtab = __pyx_vtabptr_8PyClical_clifford;
                  if (unlikely(__pyx_pw_8PyClical_8clifford_3__cinit__(o, a, k) < 0)) goto bad;
                  return o;
                  bad:
                  Py_DECREF(o); o = 0;
                  return NULL;
                }

                static void __pyx_tp_dealloc_8PyClical_clifford(PyObject *o) {
                  #if CYTHON_USE_TP_FINALIZE
                  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
                    if (PyObject_CallFinalizerFromDealloc(o)) return;
                  }
                  #endif
                  {
                    PyObject *etype, *eval, *etb;
                    PyErr_Fetch(&etype, &eval, &etb);
                    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
                    __pyx_pw_8PyClical_8clifford_5__dealloc__(o);
                    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
                    PyErr_Restore(etype, eval, etb);
                  }
                  (*Py_TYPE(o)->tp_free)(o);
                }
                static PyObject *__pyx_sq_item_8PyClical_clifford(PyObject *o, Py_ssize_t i) {
                  PyObject *r;
                  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
                  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
                  Py_DECREF(x);
                  return r;
                }

                static PyMethodDef __pyx_methods_8PyClical_clifford[] = {
                  {"copy", (PyCFunction)__pyx_pw_8PyClical_8clifford_1copy, METH_NOARGS, __pyx_doc_8PyClical_8clifford_copy},
                  {"reframe", (PyCFunction)__pyx_pw_8PyClical_8clifford_11reframe, METH_O, __pyx_doc_8PyClical_8clifford_10reframe},
                  {"inv", (PyCFunction)__pyx_pw_8PyClical_8clifford_49inv, METH_NOARGS, __pyx_doc_8PyClical_8clifford_48inv},
                  {"pow", (PyCFunction)__pyx_pw_8PyClical_8clifford_57pow, METH_O, __pyx_doc_8PyClical_8clifford_56pow},
                  {"outer_pow", (PyCFunction)__pyx_pw_8PyClical_8clifford_59outer_pow, METH_O, __pyx_doc_8PyClical_8clifford_58outer_pow},
                  {"scalar", (PyCFunction)__pyx_pw_8PyClical_8clifford_63scalar, METH_NOARGS, __pyx_doc_8PyClical_8clifford_62scalar},
                  {"pure", (PyCFunction)__pyx_pw_8PyClical_8clifford_65pure, METH_NOARGS, __pyx_doc_8PyClical_8clifford_64pure},
                  {"even", (PyCFunction)__pyx_pw_8PyClical_8clifford_67even, METH_NOARGS, __pyx_doc_8PyClical_8clifford_66even},
                  {"odd", (PyCFunction)__pyx_pw_8PyClical_8clifford_69odd, METH_NOARGS, __pyx_doc_8PyClical_8clifford_68odd},
                  {"vector_part", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_8clifford_71vector_part, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_8clifford_70vector_part},
                  {"involute", (PyCFunction)__pyx_pw_8PyClical_8clifford_73involute, METH_NOARGS, __pyx_doc_8PyClical_8clifford_72involute},
                  {"reverse", (PyCFunction)__pyx_pw_8PyClical_8clifford_75reverse, METH_NOARGS, __pyx_doc_8PyClical_8clifford_74reverse},
                  {"conj", (PyCFunction)__pyx_pw_8PyClical_8clifford_77conj, METH_NOARGS, __pyx_doc_8PyClical_8clifford_76conj},
                  {"quad", (PyCFunction)__pyx_pw_8PyClical_8clifford_79quad, METH_NOARGS, __pyx_doc_8PyClical_8clifford_78quad},
                  {"norm", (PyCFunction)__pyx_pw_8PyClical_8clifford_81norm, METH_NOARGS, __pyx_doc_8PyClical_8clifford_80norm},
                  {"abs", (PyCFunction)__pyx_pw_8PyClical_8clifford_83abs, METH_NOARGS, __pyx_doc_8PyClical_8clifford_82abs},
                  {"max_abs", (PyCFunction)__pyx_pw_8PyClical_8clifford_85max_abs, METH_NOARGS, __pyx_doc_8PyClical_8clifford_84max_abs},
                  {"truncated", (PyCFunction)__pyx_pw_8PyClical_8clifford_87truncated, METH_O, __pyx_doc_8PyClical_8clifford_86truncated},
                  {"isinf", (PyCFunction)__pyx_pw_8PyClical_8clifford_89isinf, METH_NOARGS, __pyx_doc_8PyClical_8clifford_88isinf},
                  {"isnan", (PyCFunction)__pyx_pw_8PyClical_8clifford_91isnan, METH_NOARGS, __pyx_doc_8PyClical_8clifford_90isnan},
                  {"frame", (PyCFunction)__pyx_pw_8PyClical_8clifford_93frame, METH_NOARGS, __pyx_doc_8PyClical_8clifford_92frame},
                  {"__reduce_cython__", (PyCFunction)__pyx_pw_8PyClical_8clifford_99__reduce_cython__, METH_NOARGS, 0},
                  {"__setstate_cython__", (PyCFunction)__pyx_pw_8PyClical_8clifford_101__setstate_cython__, METH_O, 0},
                  {0, 0, 0, 0}
                };

                static PyNumberMethods __pyx_tp_as_number_clifford = {
                  __pyx_pw_8PyClical_8clifford_21__add__, /*nb_add*/
                  __pyx_pw_8PyClical_8clifford_25__sub__, /*nb_subtract*/
                  __pyx_pw_8PyClical_8clifford_29__mul__, /*nb_multiply*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_divide*/
                  #endif
                  __pyx_pw_8PyClical_8clifford_33__mod__, /*nb_remainder*/
                  0, /*nb_divmod*/
                  __pyx_pw_8PyClical_8clifford_55__pow__, /*nb_power*/
                  __pyx_pw_8PyClical_8clifford_17__neg__, /*nb_negative*/
                  __pyx_pw_8PyClical_8clifford_19__pos__, /*nb_positive*/
                  0, /*nb_absolute*/
                  0, /*nb_nonzero*/
                  0, /*nb_invert*/
                  0, /*nb_lshift*/
                  0, /*nb_rshift*/
                  __pyx_pw_8PyClical_8clifford_37__and__, /*nb_and*/
                  __pyx_pw_8PyClical_8clifford_41__xor__, /*nb_xor*/
                  __pyx_pw_8PyClical_8clifford_51__or__, /*nb_or*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_coerce*/
                  #endif
                  0, /*nb_int*/
                  #if PY_MAJOR_VERSION < 3
                  0, /*nb_long*/
                  #else
                  0, /*reserved*/
                  #endif
                  0, /*nb_float*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_oct*/
                  #endif
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  0, /*nb_hex*/
                  #endif
                  __pyx_pw_8PyClical_8clifford_23__iadd__, /*nb_inplace_add*/
                  __pyx_pw_8PyClical_8clifford_27__isub__, /*nb_inplace_subtract*/
                  __pyx_pw_8PyClical_8clifford_31__imul__, /*nb_inplace_multiply*/
                  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
                  __pyx_pw_8PyClical_8clifford_47__idiv__, /*nb_inplace_divide*/
                  #endif
                  __pyx_pw_8PyClical_8clifford_35__imod__, /*nb_inplace_remainder*/
                  0, /*nb_inplace_power*/
                  0, /*nb_inplace_lshift*/
                  0, /*nb_inplace_rshift*/
                  __pyx_pw_8PyClical_8clifford_39__iand__, /*nb_inplace_and*/
                  __pyx_pw_8PyClical_8clifford_43__ixor__, /*nb_inplace_xor*/
                  __pyx_pw_8PyClical_8clifford_53__ior__, /*nb_inplace_or*/
                  0, /*nb_floor_divide*/
                  __pyx_pw_8PyClical_8clifford_45__truediv__, /*nb_true_divide*/
                  0, /*nb_inplace_floor_divide*/
                  0, /*nb_inplace_true_divide*/
                  0, /*nb_index*/
                  #if PY_VERSION_HEX >= 0x03050000
                  0, /*nb_matrix_multiply*/
                  #endif
                  #if PY_VERSION_HEX >= 0x03050000
                  0, /*nb_inplace_matrix_multiply*/
                  #endif
                };

                static PySequenceMethods __pyx_tp_as_sequence_clifford = {
                  0, /*sq_length*/
                  0, /*sq_concat*/
                  0, /*sq_repeat*/
                  __pyx_sq_item_8PyClical_clifford, /*sq_item*/
                  0, /*sq_slice*/
                  0, /*sq_ass_item*/
                  0, /*sq_ass_slice*/
                  __pyx_pw_8PyClical_8clifford_7__contains__, /*sq_contains*/
                  0, /*sq_inplace_concat*/
                  0, /*sq_inplace_repeat*/
                };

                static PyMappingMethods __pyx_tp_as_mapping_clifford = {
                  0, /*mp_length*/
                  __pyx_pw_8PyClical_8clifford_15__getitem__, /*mp_subscript*/
                  0, /*mp_ass_subscript*/
                };

                static PyTypeObject __pyx_type_8PyClical_clifford = {
                  PyVarObject_HEAD_INIT(0, 0)
                  "PyClical.clifford", /*tp_name*/
                  sizeof(struct __pyx_obj_8PyClical_clifford), /*tp_basicsize*/
                  0, /*tp_itemsize*/
                  __pyx_tp_dealloc_8PyClical_clifford, /*tp_dealloc*/
                  #if PY_VERSION_HEX < 0x030800b4
                  0, /*tp_print*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b4
                  0, /*tp_vectorcall_offset*/
                  #endif
                  0, /*tp_getattr*/
                  0, /*tp_setattr*/
                  #if PY_MAJOR_VERSION < 3
                  0, /*tp_compare*/
                  #endif
                  #if PY_MAJOR_VERSION >= 3
                  0, /*tp_as_async*/
                  #endif
                  __pyx_pw_8PyClical_8clifford_95__repr__, /*tp_repr*/
                  &__pyx_tp_as_number_clifford, /*tp_as_number*/
                  &__pyx_tp_as_sequence_clifford, /*tp_as_sequence*/
                  &__pyx_tp_as_mapping_clifford, /*tp_as_mapping*/
                  0, /*tp_hash*/
                  __pyx_pw_8PyClical_8clifford_61__call__, /*tp_call*/
                  __pyx_pw_8PyClical_8clifford_97__str__, /*tp_str*/
                  0, /*tp_getattro*/
                  0, /*tp_setattro*/
                  0, /*tp_as_buffer*/
                  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
                  "\n    Python class clifford wraps C++ class Clifford.\n    ", /*tp_doc*/
                  0, /*tp_traverse*/
                  0, /*tp_clear*/
                  __pyx_pw_8PyClical_8clifford_13__richcmp__, /*tp_richcompare*/
                  0, /*tp_weaklistoffset*/
                  __pyx_pw_8PyClical_8clifford_9__iter__, /*tp_iter*/
                  0, /*tp_iternext*/
                  __pyx_methods_8PyClical_clifford, /*tp_methods*/
                  0, /*tp_members*/
                  0, /*tp_getset*/
                  0, /*tp_base*/
                  0, /*tp_dict*/
                  0, /*tp_descr_get*/
                  0, /*tp_descr_set*/
                  0, /*tp_dictoffset*/
                  0, /*tp_init*/
                  0, /*tp_alloc*/
                  __pyx_tp_new_8PyClical_clifford, /*tp_new*/
                  0, /*tp_free*/
                  0, /*tp_is_gc*/
                  0, /*tp_bases*/
                  0, /*tp_mro*/
                  0, /*tp_cache*/
                  0, /*tp_subclasses*/
                  0, /*tp_weaklist*/
                  0, /*tp_del*/
                  0, /*tp_version_tag*/
                  #if PY_VERSION_HEX >= 0x030400a1
                  0, /*tp_finalize*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
                  0, /*tp_vectorcall*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
                  0, /*tp_print*/
                  #endif
                  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
                  0, /*tp_pypy_flags*/
                  #endif
                };

                static struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *__pyx_freelist_8PyClical___pyx_scope_struct____iter__[8];
                static int __pyx_freecount_8PyClical___pyx_scope_struct____iter__ = 0;

                static PyObject *__pyx_tp_new_8PyClical___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
                  PyObject *o;
                  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_8PyClical___pyx_scope_struct____iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_8PyClical___pyx_scope_struct____iter__)))) {
                    o = (PyObject*)__pyx_freelist_8PyClical___pyx_scope_struct____iter__[--__pyx_freecount_8PyClical___pyx_scope_struct____iter__];
                    memset(o, 0, sizeof(struct __pyx_obj_8PyClical___pyx_scope_struct____iter__));
                    (void) PyObject_INIT(o, t);
                    PyObject_GC_Track(o);
                  } else {
                    o = (*t->tp_alloc)(t, 0);
                    if (unlikely(!o)) return 0;
                  }
                  return o;
                }

                static void __pyx_tp_dealloc_8PyClical___pyx_scope_struct____iter__(PyObject *o) {
                  struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *)o;
                  PyObject_GC_UnTrack(o);
                  Py_CLEAR(p->__pyx_v_idx);
                  Py_CLEAR(p->__pyx_v_self);
                  Py_CLEAR(p->__pyx_t_0);
                  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_8PyClical___pyx_scope_struct____iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_8PyClical___pyx_scope_struct____iter__)))) {
                    __pyx_freelist_8PyClical___pyx_scope_struct____iter__[__pyx_freecount_8PyClical___pyx_scope_struct____iter__++] = ((struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *)o);
                  } else {
                    (*Py_TYPE(o)->tp_free)(o);
                  }
                }

                static int __pyx_tp_traverse_8PyClical___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
                  int e;
                  struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *p = (struct __pyx_obj_8PyClical___pyx_scope_struct____iter__ *)o;
                  if (p->__pyx_v_idx) {
                    e = (*v)(p->__pyx_v_idx, a); if (e) return e;
                  }
                  if (p->__pyx_v_self) {
                    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
                  }
                  if (p->__pyx_t_0) {
                    e = (*v)(p->__pyx_t_0, a); if (e) return e;
                  }
                  return 0;
                }

                static PyTypeObject __pyx_type_8PyClical___pyx_scope_struct____iter__ = {
                  PyVarObject_HEAD_INIT(0, 0)
                  "PyClical.__pyx_scope_struct____iter__", /*tp_name*/
                  sizeof(struct __pyx_obj_8PyClical___pyx_scope_struct____iter__), /*tp_basicsize*/
                  0, /*tp_itemsize*/
                  __pyx_tp_dealloc_8PyClical___pyx_scope_struct____iter__, /*tp_dealloc*/
                  #if PY_VERSION_HEX < 0x030800b4
                  0, /*tp_print*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b4
                  0, /*tp_vectorcall_offset*/
                  #endif
                  0, /*tp_getattr*/
                  0, /*tp_setattr*/
                  #if PY_MAJOR_VERSION < 3
                  0, /*tp_compare*/
                  #endif
                  #if PY_MAJOR_VERSION >= 3
                  0, /*tp_as_async*/
                  #endif
                  0, /*tp_repr*/
                  0, /*tp_as_number*/
                  0, /*tp_as_sequence*/
                  0, /*tp_as_mapping*/
                  0, /*tp_hash*/
                  0, /*tp_call*/
                  0, /*tp_str*/
                  0, /*tp_getattro*/
                  0, /*tp_setattro*/
                  0, /*tp_as_buffer*/
                  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
                  0, /*tp_doc*/
                  __pyx_tp_traverse_8PyClical___pyx_scope_struct____iter__, /*tp_traverse*/
                  0, /*tp_clear*/
                  0, /*tp_richcompare*/
                  0, /*tp_weaklistoffset*/
                  0, /*tp_iter*/
                  0, /*tp_iternext*/
                  0, /*tp_methods*/
                  0, /*tp_members*/
                  0, /*tp_getset*/
                  0, /*tp_base*/
                  0, /*tp_dict*/
                  0, /*tp_descr_get*/
                  0, /*tp_descr_set*/
                  0, /*tp_dictoffset*/
                  0, /*tp_init*/
                  0, /*tp_alloc*/
                  __pyx_tp_new_8PyClical___pyx_scope_struct____iter__, /*tp_new*/
                  0, /*tp_free*/
                  0, /*tp_is_gc*/
                  0, /*tp_bases*/
                  0, /*tp_mro*/
                  0, /*tp_cache*/
                  0, /*tp_subclasses*/
                  0, /*tp_weaklist*/
                  0, /*tp_del*/
                  0, /*tp_version_tag*/
                  #if PY_VERSION_HEX >= 0x030400a1
                  0, /*tp_finalize*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
                  0, /*tp_vectorcall*/
                  #endif
                  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
                  0, /*tp_print*/
                  #endif
                  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
                  0, /*tp_pypy_flags*/
                  #endif
                };

                static PyMethodDef __pyx_methods[] = {
                  {"compare", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_3compare, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_2compare},
                  {"min_neg", (PyCFunction)__pyx_pw_8PyClical_5min_neg, METH_O, __pyx_doc_8PyClical_4min_neg},
                  {"max_pos", (PyCFunction)__pyx_pw_8PyClical_7max_pos, METH_O, __pyx_doc_8PyClical_6max_pos},
                  {"error_squared_tol", (PyCFunction)__pyx_pw_8PyClical_11error_squared_tol, METH_O, __pyx_doc_8PyClical_10error_squared_tol},
                  {"error_squared", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_13error_squared, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_12error_squared},
                  {"approx_equal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_15approx_equal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_14approx_equal},
                  {"inv", (PyCFunction)__pyx_pw_8PyClical_17inv, METH_O, __pyx_doc_8PyClical_16inv},
                  {"scalar", (PyCFunction)__pyx_pw_8PyClical_19scalar, METH_O, __pyx_doc_8PyClical_18scalar},
                  {"real", (PyCFunction)__pyx_pw_8PyClical_21real, METH_O, __pyx_doc_8PyClical_20real},
                  {"imag", (PyCFunction)__pyx_pw_8PyClical_23imag, METH_O, __pyx_doc_8PyClical_22imag},
                  {"pure", (PyCFunction)__pyx_pw_8PyClical_25pure, METH_O, __pyx_doc_8PyClical_24pure},
                  {"even", (PyCFunction)__pyx_pw_8PyClical_27even, METH_O, __pyx_doc_8PyClical_26even},
                  {"odd", (PyCFunction)__pyx_pw_8PyClical_29odd, METH_O, __pyx_doc_8PyClical_28odd},
                  {"involute", (PyCFunction)__pyx_pw_8PyClical_31involute, METH_O, __pyx_doc_8PyClical_30involute},
                  {"reverse", (PyCFunction)__pyx_pw_8PyClical_33reverse, METH_O, __pyx_doc_8PyClical_32reverse},
                  {"conj", (PyCFunction)__pyx_pw_8PyClical_35conj, METH_O, __pyx_doc_8PyClical_34conj},
                  {"quad", (PyCFunction)__pyx_pw_8PyClical_37quad, METH_O, __pyx_doc_8PyClical_36quad},
                  {"norm", (PyCFunction)__pyx_pw_8PyClical_39norm, METH_O, __pyx_doc_8PyClical_38norm},
                  {"abs", (PyCFunction)__pyx_pw_8PyClical_41abs, METH_O, __pyx_doc_8PyClical_40abs},
                  {"max_abs", (PyCFunction)__pyx_pw_8PyClical_43max_abs, METH_O, __pyx_doc_8PyClical_42max_abs},
                  {"pow", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_45pow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_44pow},
                  {"outer_pow", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_47outer_pow, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_46outer_pow},
                  {"complexifier", (PyCFunction)__pyx_pw_8PyClical_49complexifier, METH_O, __pyx_doc_8PyClical_48complexifier},
                  {"sqrt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_51sqrt, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_50sqrt},
                  {"exp", (PyCFunction)__pyx_pw_8PyClical_53exp, METH_O, __pyx_doc_8PyClical_52exp},
                  {"log", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_55log, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_54log},
                  {"cos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_57cos, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_56cos},
                  {"acos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_59acos, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_58acos},
                  {"cosh", (PyCFunction)__pyx_pw_8PyClical_61cosh, METH_O, __pyx_doc_8PyClical_60cosh},
                  {"acosh", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_63acosh, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_62acosh},
                  {"sin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_65sin, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_64sin},
                  {"asin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_67asin, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_66asin},
                  {"sinh", (PyCFunction)__pyx_pw_8PyClical_69sinh, METH_O, __pyx_doc_8PyClical_68sinh},
                  {"asinh", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_71asinh, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_70asinh},
                  {"tan", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_73tan, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_72tan},
                  {"atan", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_75atan, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_74atan},
                  {"tanh", (PyCFunction)__pyx_pw_8PyClical_77tanh, METH_O, __pyx_doc_8PyClical_76tanh},
                  {"atanh", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_79atanh, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_78atanh},
                  {"random_clifford", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8PyClical_81random_clifford, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8PyClical_80random_clifford},
                  {"cga3", (PyCFunction)__pyx_pw_8PyClical_83cga3, METH_O, __pyx_doc_8PyClical_82cga3},
                  {"cga3std", (PyCFunction)__pyx_pw_8PyClical_85cga3std, METH_O, __pyx_doc_8PyClical_84cga3std},
                  {"agc3", (PyCFunction)__pyx_pw_8PyClical_87agc3, METH_O, __pyx_doc_8PyClical_86agc3},
                  {0, 0, 0, 0}
                };

                #if PY_MAJOR_VERSION >= 3
                #if CYTHON_PEP489_MULTI_PHASE_INIT
                static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
                static int __pyx_pymod_exec_PyClical(PyObject* module); /*proto*/
                static PyModuleDef_Slot __pyx_moduledef_slots[] = {
                  {Py_mod_create, (void*)__pyx_pymod_create},
                  {Py_mod_exec, (void*)__pyx_pymod_exec_PyClical},
                  {0, NULL}
                };
                #endif

                static struct PyModuleDef __pyx_moduledef = {
                    PyModuleDef_HEAD_INIT,
                    "PyClical",
                    0, /* m_doc */
                  #if CYTHON_PEP489_MULTI_PHASE_INIT
                    0, /* m_size */
                  #else
                    -1, /* m_size */
                  #endif
                    __pyx_methods /* m_methods */,
                  #if CYTHON_PEP489_MULTI_PHASE_INIT
                    __pyx_moduledef_slots, /* m_slots */
                  #else
                    NULL, /* m_reload */
                  #endif
                    NULL, /* m_traverse */
                    NULL, /* m_clear */
                    NULL /* m_free */
                };
                #endif
                #ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_Abbreviation_for_clifford_index, __pyx_k_Abbreviation_for_clifford_index, sizeof(__pyx_k_Abbreviation_for_clifford_index), 0, 1, 0, 0},
  {&__pyx_kp_u_Abbreviation_for_index_set_q_p, __pyx_k_Abbreviation_for_index_set_q_p, sizeof(__pyx_k_Abbreviation_for_index_set_q_p), 0, 1, 0, 0},
  {&__pyx_kp_u_Absolute_value_of_multivector_m, __pyx_k_Absolute_value_of_multivector_m, sizeof(__pyx_k_Absolute_value_of_multivector_m), 0, 1, 0, 0},
  {&__pyx_kp_u_Absolute_value_square_root_of_n, __pyx_k_Absolute_value_square_root_of_n, sizeof(__pyx_k_Absolute_value_square_root_of_n), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_initialize_clifford_objec, __pyx_k_Cannot_initialize_clifford_objec, sizeof(__pyx_k_Cannot_initialize_clifford_objec), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_initialize_index_set_obje, __pyx_k_Cannot_initialize_index_set_obje, sizeof(__pyx_k_Cannot_initialize_index_set_obje), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_reframe, __pyx_k_Cannot_reframe, sizeof(__pyx_k_Cannot_reframe), 0, 1, 0, 0},
  {&__pyx_kp_u_Cannot_take_vector_part_of, __pyx_k_Cannot_take_vector_part_of, sizeof(__pyx_k_Cannot_take_vector_part_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Cardinality_Number_of_indices_i, __pyx_k_Cardinality_Number_of_indices_i, sizeof(__pyx_k_Cardinality_Number_of_indices_i), 0, 1, 0, 0},
  {&__pyx_kp_u_Check_if_a_multivector_contains, __pyx_k_Check_if_a_multivector_contains, sizeof(__pyx_k_Check_if_a_multivector_contains), 0, 1, 0, 0},
  {&__pyx_kp_u_Check_if_a_multivector_contains_2, __pyx_k_Check_if_a_multivector_contains_2, sizeof(__pyx_k_Check_if_a_multivector_contains_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Conjugation_reverse_o_involute, __pyx_k_Conjugation_reverse_o_involute, sizeof(__pyx_k_Conjugation_reverse_o_involute), 0, 1, 0, 0},
  {&__pyx_kp_u_Conjugation_reverse_o_involute_2, __pyx_k_Conjugation_reverse_o_involute_2, sizeof(__pyx_k_Conjugation_reverse_o_involute_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Contraction_print_clifford_1_cl, __pyx_k_Contraction_print_clifford_1_cl, sizeof(__pyx_k_Contraction_print_clifford_1_cl), 0, 1, 0, 0},
  {&__pyx_kp_u_Contraction_x_clifford_1_x_clif, __pyx_k_Contraction_x_clifford_1_x_clif, sizeof(__pyx_k_Contraction_x_clifford_1_x_clif), 0, 1, 0, 0},
  {&__pyx_kp_u_Convert_CGA3_null_vector_to_Euc, __pyx_k_Convert_CGA3_null_vector_to_Euc, sizeof(__pyx_k_Convert_CGA3_null_vector_to_Euc), 0, 1, 0, 0},
  {&__pyx_kp_u_Convert_CGA3_null_vector_to_sta, __pyx_k_Convert_CGA3_null_vector_to_sta, sizeof(__pyx_k_Convert_CGA3_null_vector_to_sta), 0, 1, 0, 0},
  {&__pyx_kp_u_Convert_Euclidean_3D_multivecto, __pyx_k_Convert_Euclidean_3D_multivecto, sizeof(__pyx_k_Convert_Euclidean_3D_multivecto), 0, 1, 0, 0},
  {&__pyx_kp_u_Copy_this_clifford_object_x_cli, __pyx_k_Copy_this_clifford_object_x_cli, sizeof(__pyx_k_Copy_this_clifford_object_x_cli), 0, 1, 0, 0},
  {&__pyx_kp_u_Copy_this_index_set_object_s_in, __pyx_k_Copy_this_index_set_object_s_in, sizeof(__pyx_k_Copy_this_index_set_object_s_in), 0, 1, 0, 0},
  {&__pyx_kp_u_Cosine_of_multivector_with_opti, __pyx_k_Cosine_of_multivector_with_opti, sizeof(__pyx_k_Cosine_of_multivector_with_opti), 0, 1, 0, 0},
  {&__pyx_kp_u_Even_part_of_multivector_sum_of, __pyx_k_Even_part_of_multivector_sum_of, sizeof(__pyx_k_Even_part_of_multivector_sum_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Even_part_of_multivector_sum_of_2, __pyx_k_Even_part_of_multivector_sum_of_2, sizeof(__pyx_k_Even_part_of_multivector_sum_of_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Exponential_of_multivector_x_cl, __pyx_k_Exponential_of_multivector_x_cl, sizeof(__pyx_k_Exponential_of_multivector_x_cl), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_difference_print_clif, __pyx_k_Geometric_difference_print_clif, sizeof(__pyx_k_Geometric_difference_print_clif), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_difference_x_clifford, __pyx_k_Geometric_difference_x_clifford, sizeof(__pyx_k_Geometric_difference_x_clifford), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_multiplicative_invers, __pyx_k_Geometric_multiplicative_invers, sizeof(__pyx_k_Geometric_multiplicative_invers), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_multiplicative_invers_2, __pyx_k_Geometric_multiplicative_invers_2, sizeof(__pyx_k_Geometric_multiplicative_invers_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_product_print_cliffor, __pyx_k_Geometric_product_print_cliffor, sizeof(__pyx_k_Geometric_product_print_cliffor), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_product_x_clifford_2, __pyx_k_Geometric_product_x_clifford_2, sizeof(__pyx_k_Geometric_product_x_clifford_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_quotient_print_cliffo, __pyx_k_Geometric_quotient_print_cliffo, sizeof(__pyx_k_Geometric_quotient_print_cliffo), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_quotient_x_clifford_1, __pyx_k_Geometric_quotient_x_clifford_1, sizeof(__pyx_k_Geometric_quotient_x_clifford_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_sum_print_clifford_1, __pyx_k_Geometric_sum_print_clifford_1, sizeof(__pyx_k_Geometric_sum_print_clifford_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Geometric_sum_x_clifford_1_x_cl, __pyx_k_Geometric_sum_x_clifford_1_x_cl, sizeof(__pyx_k_Geometric_sum_x_clifford_1_x_cl), 0, 1, 0, 0},
  {&__pyx_kp_u_Get_the_value_of_an_index_set_o, __pyx_k_Get_the_value_of_an_index_set_o, sizeof(__pyx_k_Get_the_value_of_an_index_set_o), 0, 1, 0, 0},
  {&__pyx_kp_u_Hyperbolic_cosine_of_multivecto, __pyx_k_Hyperbolic_cosine_of_multivecto, sizeof(__pyx_k_Hyperbolic_cosine_of_multivecto), 0, 1, 0, 0},
  {&__pyx_kp_u_Hyperbolic_sine_of_multivector, __pyx_k_Hyperbolic_sine_of_multivector, sizeof(__pyx_k_Hyperbolic_sine_of_multivector), 0, 1, 0, 0},
  {&__pyx_kp_u_Hyperbolic_tangent_of_multivect, __pyx_k_Hyperbolic_tangent_of_multivect, sizeof(__pyx_k_Hyperbolic_tangent_of_multivect), 0, 1, 0, 0},
  {&__pyx_kp_u_Imaginary_part_deprecated_alway, __pyx_k_Imaginary_part_deprecated_alway, sizeof(__pyx_k_Imaginary_part_deprecated_alway), 0, 1, 0, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_u_Inner_product_print_clifford_1, __pyx_k_Inner_product_print_clifford_1, sizeof(__pyx_k_Inner_product_print_clifford_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Inner_product_x_clifford_1_x_cl, __pyx_k_Inner_product_x_clifford_1_x_cl, sizeof(__pyx_k_Inner_product_x_clifford_1_x_cl), 0, 1, 0, 0},
  {&__pyx_kp_u_Integer_power_of_multivector_ob, __pyx_k_Integer_power_of_multivector_ob, sizeof(__pyx_k_Integer_power_of_multivector_ob), 0, 1, 0, 0},
  {&__pyx_n_s_Integral, __pyx_k_Integral, sizeof(__pyx_k_Integral), 0, 0, 1, 1},
  {&__pyx_kp_u_Inverse_cosine_of_multivector_w, __pyx_k_Inverse_cosine_of_multivector_w, sizeof(__pyx_k_Inverse_cosine_of_multivector_w), 0, 1, 0, 0},
  {&__pyx_kp_u_Inverse_hyperbolic_cosine_of_mu, __pyx_k_Inverse_hyperbolic_cosine_of_mu, sizeof(__pyx_k_Inverse_hyperbolic_cosine_of_mu), 0, 1, 0, 0},
  {&__pyx_kp_u_Inverse_hyperbolic_sine_of_mult, __pyx_k_Inverse_hyperbolic_sine_of_mult, sizeof(__pyx_k_Inverse_hyperbolic_sine_of_mult), 0, 1, 0, 0},
  {&__pyx_kp_u_Inverse_hyperbolic_tangent_of_m, __pyx_k_Inverse_hyperbolic_tangent_of_m, sizeof(__pyx_k_Inverse_hyperbolic_tangent_of_m), 0, 1, 0, 0},
  {&__pyx_kp_u_Inverse_sine_of_multivector_wit, __pyx_k_Inverse_sine_of_multivector_wit, sizeof(__pyx_k_Inverse_sine_of_multivector_wit), 0, 1, 0, 0},
  {&__pyx_kp_u_Inverse_tangent_of_multivector, __pyx_k_Inverse_tangent_of_multivector, sizeof(__pyx_k_Inverse_tangent_of_multivector), 0, 1, 0, 0},
  {&__pyx_kp_u_Iterate_over_the_indices_of_an, __pyx_k_Iterate_over_the_indices_of_an, sizeof(__pyx_k_Iterate_over_the_indices_of_an), 0, 1, 0, 0},
  {&__pyx_kp_u_Main_involution_each_i_is_repla, __pyx_k_Main_involution_each_i_is_repla, sizeof(__pyx_k_Main_involution_each_i_is_repla), 0, 1, 0, 0},
  {&__pyx_kp_u_Main_involution_each_i_is_repla_2, __pyx_k_Main_involution_each_i_is_repla_2, sizeof(__pyx_k_Main_involution_each_i_is_repla_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Maximum_absolute_value_of_coord, __pyx_k_Maximum_absolute_value_of_coord, sizeof(__pyx_k_Maximum_absolute_value_of_coord), 0, 1, 0, 0},
  {&__pyx_kp_u_Maximum_member_index_set_1_1_2, __pyx_k_Maximum_member_index_set_1_1_2, sizeof(__pyx_k_Maximum_member_index_set_1_1_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Maximum_of_absolute_values_of_c, __pyx_k_Maximum_of_absolute_values_of_c, sizeof(__pyx_k_Maximum_of_absolute_values_of_c), 0, 1, 0, 0},
  {&__pyx_kp_u_Maximum_positive_index_or_0_if, __pyx_k_Maximum_positive_index_or_0_if, sizeof(__pyx_k_Maximum_positive_index_or_0_if), 0, 1, 0, 0},
  {&__pyx_kp_u_Minimum_member_index_set_1_1_2, __pyx_k_Minimum_member_index_set_1_1_2, sizeof(__pyx_k_Minimum_member_index_set_1_1_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Minimum_negative_index_or_0_if, __pyx_k_Minimum_negative_index_or_0_if, sizeof(__pyx_k_Minimum_negative_index_or_0_if), 0, 1, 0, 0},
  {&__pyx_kp_u_Natural_logarithm_of_multivecto, __pyx_k_Natural_logarithm_of_multivecto, sizeof(__pyx_k_Natural_logarithm_of_multivecto), 0, 1, 0, 0},
  {&__pyx_kp_u_Norm_sum_of_squares_of_coordina, __pyx_k_Norm_sum_of_squares_of_coordina, sizeof(__pyx_k_Norm_sum_of_squares_of_coordina), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_kp_u_Not_applicable, __pyx_k_Not_applicable, sizeof(__pyx_k_Not_applicable), 0, 1, 0, 0},
  {&__pyx_kp_u_Not_applicable_for_a_in_cliffor, __pyx_k_Not_applicable_for_a_in_cliffor, sizeof(__pyx_k_Not_applicable_for_a_in_cliffor), 0, 1, 0, 0},
  {&__pyx_kp_u_Number_of_negative_indices_incl, __pyx_k_Number_of_negative_indices_incl, sizeof(__pyx_k_Number_of_negative_indices_incl), 0, 1, 0, 0},
  {&__pyx_kp_u_Number_of_positive_indices_incl, __pyx_k_Number_of_positive_indices_incl, sizeof(__pyx_k_Number_of_positive_indices_incl), 0, 1, 0, 0},
  {&__pyx_kp_u_Odd_part_of_multivector_sum_of, __pyx_k_Odd_part_of_multivector_sum_of, sizeof(__pyx_k_Odd_part_of_multivector_sum_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Odd_part_of_multivector_sum_of_2, __pyx_k_Odd_part_of_multivector_sum_of_2, sizeof(__pyx_k_Odd_part_of_multivector_sum_of_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Outer_product_power_of_multivec, __pyx_k_Outer_product_power_of_multivec, sizeof(__pyx_k_Outer_product_power_of_multivec), 0, 1, 0, 0},
  {&__pyx_kp_u_Outer_product_power_x_clifford, __pyx_k_Outer_product_power_x_clifford, sizeof(__pyx_k_Outer_product_power_x_clifford), 0, 1, 0, 0},
  {&__pyx_kp_u_Outer_product_print_clifford_1, __pyx_k_Outer_product_print_clifford_1, sizeof(__pyx_k_Outer_product_print_clifford_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Outer_product_x_clifford_1_x_cl, __pyx_k_Outer_product_x_clifford_1_x_cl, sizeof(__pyx_k_Outer_product_x_clifford_1_x_cl), 0, 1, 0, 0},
  {&__pyx_kp_u_Power_self_to_the_m_x_clifford, __pyx_k_Power_self_to_the_m_x_clifford, sizeof(__pyx_k_Power_self_to_the_m_x_clifford), 0, 1, 0, 0},
  {&__pyx_kp_u_Power_self_to_the_m_x_clifford_2, __pyx_k_Power_self_to_the_m_x_clifford_2, sizeof(__pyx_k_Power_self_to_the_m_x_clifford_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Pure_grade_vector_part_print_cl, __pyx_k_Pure_grade_vector_part_print_cl, sizeof(__pyx_k_Pure_grade_vector_part_print_cl), 0, 1, 0, 0},
  {&__pyx_kp_u_Pure_part_print_clifford_1_1_1, __pyx_k_Pure_part_print_clifford_1_1_1, sizeof(__pyx_k_Pure_part_print_clifford_1_1_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Pure_part_print_pure_clifford_1, __pyx_k_Pure_part_print_pure_clifford_1, sizeof(__pyx_k_Pure_part_print_pure_clifford_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Put_self_into_a_larger_frame_co, __pyx_k_Put_self_into_a_larger_frame_co, sizeof(__pyx_k_Put_self_into_a_larger_frame_co), 0, 1, 0, 0},
  {&__pyx_n_s_PyClical, __pyx_k_PyClical, sizeof(__pyx_k_PyClical), 0, 0, 1, 1},
  {&__pyx_kp_s_PyClical_pyx, __pyx_k_PyClical_pyx, sizeof(__pyx_k_PyClical_pyx), 0, 0, 1, 0},
  {&__pyx_kp_u_Quadratic_form_rev_x_x_0_print, __pyx_k_Quadratic_form_rev_x_x_0_print, sizeof(__pyx_k_Quadratic_form_rev_x_x_0_print), 0, 1, 0, 0},
  {&__pyx_kp_u_Quadratic_form_rev_x_x_0_print_2, __pyx_k_Quadratic_form_rev_x_x_0_print_2, sizeof(__pyx_k_Quadratic_form_rev_x_x_0_print_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Quadratic_norm_error_tolerance, __pyx_k_Quadratic_norm_error_tolerance, sizeof(__pyx_k_Quadratic_norm_error_tolerance), 0, 1, 0, 0},
  {&__pyx_kp_u_Random_multivector_within_a_fra, __pyx_k_Random_multivector_within_a_fra, sizeof(__pyx_k_Random_multivector_within_a_fra), 0, 1, 0, 0},
  {&__pyx_n_s_Real, __pyx_k_Real, sizeof(__pyx_k_Real), 0, 0, 1, 1},
  {&__pyx_kp_u_Real_part_synonym_for_scalar_pa, __pyx_k_Real_part_synonym_for_scalar_pa, sizeof(__pyx_k_Real_part_synonym_for_scalar_pa), 0, 1, 0, 0},
  {&__pyx_kp_u_Relative_or_absolute_error_usin, __pyx_k_Relative_or_absolute_error_usin, sizeof(__pyx_k_Relative_or_absolute_error_usin), 0, 1, 0, 0},
  {&__pyx_kp_u_Remove_all_terms_of_self_with_r, __pyx_k_Remove_all_terms_of_self_with_r, sizeof(__pyx_k_Remove_all_terms_of_self_with_r), 0, 1, 0, 0},
  {&__pyx_kp_u_Reversion_eg_1_2_2_1_print_reve, __pyx_k_Reversion_eg_1_2_2_1_print_reve, sizeof(__pyx_k_Reversion_eg_1_2_2_1_print_reve), 0, 1, 0, 0},
  {&__pyx_kp_u_Reversion_eg_clifford_1_cliffor, __pyx_k_Reversion_eg_clifford_1_cliffor, sizeof(__pyx_k_Reversion_eg_clifford_1_cliffor), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Scalar_part_clifford_1_1_1_2_sc, __pyx_k_Scalar_part_clifford_1_1_1_2_sc, sizeof(__pyx_k_Scalar_part_clifford_1_1_1_2_sc), 0, 1, 0, 0},
  {&__pyx_kp_u_Scalar_part_scalar_clifford_1_1, __pyx_k_Scalar_part_scalar_clifford_1_1, sizeof(__pyx_k_Scalar_part_scalar_clifford_1_1), 0, 1, 0, 0},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_kp_u_Set_complement_not_print_index, __pyx_k_Set_complement_not_print_index, sizeof(__pyx_k_Set_complement_not_print_index), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_intersection_and_print_inde, __pyx_k_Set_intersection_and_print_inde, sizeof(__pyx_k_Set_intersection_and_print_inde), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_intersection_and_x_index_se, __pyx_k_Set_intersection_and_x_index_se, sizeof(__pyx_k_Set_intersection_and_x_index_se), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_the_value_of_an_index_set_o, __pyx_k_Set_the_value_of_an_index_set_o, sizeof(__pyx_k_Set_the_value_of_an_index_set_o), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_union_or_print_index_set_1, __pyx_k_Set_union_or_print_index_set_1, sizeof(__pyx_k_Set_union_or_print_index_set_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Set_union_or_x_index_set_1_x_in, __pyx_k_Set_union_or_x_index_set_1_x_in, sizeof(__pyx_k_Set_union_or_x_index_set_1_x_in), 0, 1, 0, 0},
  {&__pyx_kp_u_Sign_of_geometric_product_of_tw, __pyx_k_Sign_of_geometric_product_of_tw, sizeof(__pyx_k_Sign_of_geometric_product_of_tw), 0, 1, 0, 0},
  {&__pyx_kp_u_Sign_of_geometric_square_of_a_C, __pyx_k_Sign_of_geometric_square_of_a_C, sizeof(__pyx_k_Sign_of_geometric_square_of_a_C), 0, 1, 0, 0},
  {&__pyx_kp_u_Sine_of_multivector_with_option, __pyx_k_Sine_of_multivector_with_option, sizeof(__pyx_k_Sine_of_multivector_with_option), 0, 1, 0, 0},
  {&__pyx_kp_u_Square_root_of_1_which_commutes, __pyx_k_Square_root_of_1_which_commutes, sizeof(__pyx_k_Square_root_of_1_which_commutes), 0, 1, 0, 0},
  {&__pyx_kp_u_Square_root_of_multivector_with, __pyx_k_Square_root_of_multivector_with, sizeof(__pyx_k_Square_root_of_multivector_with), 0, 1, 0, 0},
  {&__pyx_kp_u_Subalgebra_generated_by_all_gen, __pyx_k_Subalgebra_generated_by_all_gen, sizeof(__pyx_k_Subalgebra_generated_by_all_gen), 0, 1, 0, 0},
  {&__pyx_kp_u_Subscripting_map_from_index_set, __pyx_k_Subscripting_map_from_index_set, sizeof(__pyx_k_Subscripting_map_from_index_set), 0, 1, 0, 0},
  {&__pyx_kp_u_Symmetric_set_difference_exclus, __pyx_k_Symmetric_set_difference_exclus, sizeof(__pyx_k_Symmetric_set_difference_exclus), 0, 1, 0, 0},
  {&__pyx_kp_u_Symmetric_set_difference_exclus_2, __pyx_k_Symmetric_set_difference_exclus_2, sizeof(__pyx_k_Symmetric_set_difference_exclus_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Tangent_of_multivector_with_opt, __pyx_k_Tangent_of_multivector_with_opt, sizeof(__pyx_k_Tangent_of_multivector_with_opt), 0, 1, 0, 0},
  {&__pyx_kp_u_Test_for_approximate_equality_o, __pyx_k_Test_for_approximate_equality_o, sizeof(__pyx_k_Test_for_approximate_equality_o), 0, 1, 0, 0},
  {&__pyx_kp_u_Tests_for_functions_that_Doctes, __pyx_k_Tests_for_functions_that_Doctes, sizeof(__pyx_k_Tests_for_functions_that_Doctes), 0, 1, 0, 0},
  {&__pyx_kp_u_Tests_for_functions_that_Doctes_2, __pyx_k_Tests_for_functions_that_Doctes_2, sizeof(__pyx_k_Tests_for_functions_that_Doctes_2), 0, 1, 0, 0},
  {&__pyx_kp_u_The_informal_string_representat, __pyx_k_The_informal_string_representat, sizeof(__pyx_k_The_informal_string_representat), 0, 1, 0, 0},
  {&__pyx_kp_u_The_informal_string_representat_2, __pyx_k_The_informal_string_representat_2, sizeof(__pyx_k_The_informal_string_representat_2), 0, 1, 0, 0},
  {&__pyx_kp_u_The_official_string_representat, __pyx_k_The_official_string_representat, sizeof(__pyx_k_The_official_string_representat), 0, 1, 0, 0},
  {&__pyx_kp_u_The_official_string_representat_2, __pyx_k_The_official_string_representat_2, sizeof(__pyx_k_The_official_string_representat_2), 0, 1, 0, 0},
  {&__pyx_kp_u_This_comparison_operator_is_not, __pyx_k_This_comparison_operator_is_not, sizeof(__pyx_k_This_comparison_operator_is_not), 0, 1, 0, 0},
  {&__pyx_kp_u_Transform_left_hand_side_using, __pyx_k_Transform_left_hand_side_using, sizeof(__pyx_k_Transform_left_hand_side_using), 0, 1, 0, 0},
  {&__pyx_kp_u_Transform_left_hand_side_using_2, __pyx_k_Transform_left_hand_side_using_2, sizeof(__pyx_k_Transform_left_hand_side_using_2), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
  {&__pyx_kp_u_Unary_print_clifford_1_1, __pyx_k_Unary_print_clifford_1_1, sizeof(__pyx_k_Unary_print_clifford_1_1), 0, 1, 0, 0},
  {&__pyx_kp_u_Unary_print_clifford_1_1_2, __pyx_k_Unary_print_clifford_1_1_2, sizeof(__pyx_k_Unary_print_clifford_1_1_2), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_Vector_part_of_multivector_as_a, __pyx_k_Vector_part_of_multivector_as_a, sizeof(__pyx_k_Vector_part_of_multivector_as_a), 0, 1, 0, 0},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_abc, __pyx_k_abc, sizeof(__pyx_k_abc), 0, 0, 1, 1},
  {&__pyx_kp_u_abs_line_1522, __pyx_k_abs_line_1522, sizeof(__pyx_k_abs_line_1522), 0, 1, 0, 0},
  {&__pyx_n_s_acos, __pyx_k_acos, sizeof(__pyx_k_acos), 0, 0, 1, 1},
  {&__pyx_kp_u_acos_line_1668, __pyx_k_acos_line_1668, sizeof(__pyx_k_acos_line_1668), 0, 1, 0, 0},
  {&__pyx_n_s_acosh, __pyx_k_acosh, sizeof(__pyx_k_acosh), 0, 0, 1, 1},
  {&__pyx_kp_u_acosh_line_1705, __pyx_k_acosh_line_1705, sizeof(__pyx_k_acosh_line_1705), 0, 1, 0, 0},
  {&__pyx_kp_u_agc3_line_1893, __pyx_k_agc3_line_1893, sizeof(__pyx_k_agc3_line_1893), 0, 1, 0, 0},
  {&__pyx_kp_u_approx_equal_line_1359, __pyx_k_approx_equal_line_1359, sizeof(__pyx_k_approx_equal_line_1359), 0, 1, 0, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_u_as_frame, __pyx_k_as_frame, sizeof(__pyx_k_as_frame), 0, 1, 0, 0},
  {&__pyx_n_s_asin, __pyx_k_asin, sizeof(__pyx_k_asin), 0, 0, 1, 1},
  {&__pyx_kp_u_asin_line_1747, __pyx_k_asin_line_1747, sizeof(__pyx_k_asin_line_1747), 0, 1, 0, 0},
  {&__pyx_n_s_asinh, __pyx_k_asinh, sizeof(__pyx_k_asinh), 0, 0, 1, 1},
  {&__pyx_kp_u_asinh_line_1782, __pyx_k_asinh_line_1782, sizeof(__pyx_k_asinh_line_1782), 0, 1, 0, 0},
  {&__pyx_n_s_atan, __pyx_k_atan, sizeof(__pyx_k_atan), 0, 0, 1, 1},
  {&__pyx_kp_u_atan_line_1818, __pyx_k_atan_line_1818, sizeof(__pyx_k_atan_line_1818), 0, 1, 0, 0},
  {&__pyx_n_s_atanh, __pyx_k_atanh, sizeof(__pyx_k_atanh), 0, 0, 1, 1},
  {&__pyx_kp_u_atanh_line_1847, __pyx_k_atanh_line_1847, sizeof(__pyx_k_atanh_line_1847), 0, 1, 0, 0},
  {&__pyx_kp_u_cga3_line_1873, __pyx_k_cga3_line_1873, sizeof(__pyx_k_cga3_line_1873), 0, 1, 0, 0},
  {&__pyx_kp_u_cga3std_line_1882, __pyx_k_cga3std_line_1882, sizeof(__pyx_k_cga3std_line_1882), 0, 1, 0, 0},
  {&__pyx_n_s_cl, __pyx_k_cl, sizeof(__pyx_k_cl), 0, 0, 1, 1},
  {&__pyx_n_s_clifford, __pyx_k_clifford, sizeof(__pyx_k_clifford), 0, 0, 1, 1},
  {&__pyx_kp_u_clifford___add___line_740, __pyx_k_clifford___add___line_740, sizeof(__pyx_k_clifford___add___line_740), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___and___line_836, __pyx_k_clifford___and___line_836, sizeof(__pyx_k_clifford___and___line_836), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___call___line_1020, __pyx_k_clifford___call___line_1020, sizeof(__pyx_k_clifford___call___line_1020), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___getitem___line_707, __pyx_k_clifford___getitem___line_707, sizeof(__pyx_k_clifford___getitem___line_707), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___iadd___line_751, __pyx_k_clifford___iadd___line_751, sizeof(__pyx_k_clifford___iadd___line_751), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___iand___line_851, __pyx_k_clifford___iand___line_851, sizeof(__pyx_k_clifford___iand___line_851), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___idiv___line_911, __pyx_k_clifford___idiv___line_911, sizeof(__pyx_k_clifford___idiv___line_911), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___imod___line_821, __pyx_k_clifford___imod___line_821, sizeof(__pyx_k_clifford___imod___line_821), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___imul___line_793, __pyx_k_clifford___imul___line_793, sizeof(__pyx_k_clifford___imul___line_793), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___ior___line_950, __pyx_k_clifford___ior___line_950, sizeof(__pyx_k_clifford___ior___line_950), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___isub___line_771, __pyx_k_clifford___isub___line_771, sizeof(__pyx_k_clifford___isub___line_771), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___iter___line_638, __pyx_k_clifford___iter___line_638, sizeof(__pyx_k_clifford___iter___line_638), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___ixor___line_881, __pyx_k_clifford___ixor___line_881, sizeof(__pyx_k_clifford___ixor___line_881), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___mod___line_806, __pyx_k_clifford___mod___line_806, sizeof(__pyx_k_clifford___mod___line_806), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___mul___line_780, __pyx_k_clifford___mul___line_780, sizeof(__pyx_k_clifford___mul___line_780), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___neg___line_722, __pyx_k_clifford___neg___line_722, sizeof(__pyx_k_clifford___neg___line_722), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___or___line_939, __pyx_k_clifford___or___line_939, sizeof(__pyx_k_clifford___or___line_939), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___pos___line_731, __pyx_k_clifford___pos___line_731, sizeof(__pyx_k_clifford___pos___line_731), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___pow___line_961, __pyx_k_clifford___pow___line_961, sizeof(__pyx_k_clifford___pow___line_961), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___repr___line_1235, __pyx_k_clifford___repr___line_1235, sizeof(__pyx_k_clifford___repr___line_1235), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___str___line_1244, __pyx_k_clifford___str___line_1244, sizeof(__pyx_k_clifford___str___line_1244), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___sub___line_760, __pyx_k_clifford___sub___line_760, sizeof(__pyx_k_clifford___sub___line_760), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___truediv___line_896, __pyx_k_clifford___truediv___line_896, sizeof(__pyx_k_clifford___truediv___line_896), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford___xor___line_866, __pyx_k_clifford___xor___line_866, sizeof(__pyx_k_clifford___xor___line_866), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_abs_line_1175, __pyx_k_clifford_abs_line_1175, sizeof(__pyx_k_clifford_abs_line_1175), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_conj_line_1138, __pyx_k_clifford_conj_line_1138, sizeof(__pyx_k_clifford_conj_line_1138), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_copy_line_556, __pyx_k_clifford_copy_line_556, sizeof(__pyx_k_clifford_copy_line_556), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_even_line_1061, __pyx_k_clifford_even_line_1061, sizeof(__pyx_k_clifford_even_line_1061), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_frame_line_1224, __pyx_k_clifford_frame_line_1224, sizeof(__pyx_k_clifford_frame_line_1224), 0, 1, 0, 0},
  {&__pyx_n_s_clifford_hidden_doctests, __pyx_k_clifford_hidden_doctests, sizeof(__pyx_k_clifford_hidden_doctests), 0, 0, 1, 1},
  {&__pyx_kp_u_clifford_hidden_doctests_line_12, __pyx_k_clifford_hidden_doctests_line_12, sizeof(__pyx_k_clifford_hidden_doctests_line_12), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_inv_line_926, __pyx_k_clifford_inv_line_926, sizeof(__pyx_k_clifford_inv_line_926), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_involute_line_1107, __pyx_k_clifford_involute_line_1107, sizeof(__pyx_k_clifford_involute_line_1107), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_isinf_line_1206, __pyx_k_clifford_isinf_line_1206, sizeof(__pyx_k_clifford_isinf_line_1206), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_isnan_line_1215, __pyx_k_clifford_isnan_line_1215, sizeof(__pyx_k_clifford_isnan_line_1215), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_max_abs_line_1184, __pyx_k_clifford_max_abs_line_1184, sizeof(__pyx_k_clifford_max_abs_line_1184), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_norm_line_1164, __pyx_k_clifford_norm_line_1164, sizeof(__pyx_k_clifford_norm_line_1164), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_odd_line_1070, __pyx_k_clifford_odd_line_1070, sizeof(__pyx_k_clifford_odd_line_1070), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_outer_pow_line_1004, __pyx_k_clifford_outer_pow_line_1004, sizeof(__pyx_k_clifford_outer_pow_line_1004), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_pow_line_980, __pyx_k_clifford_pow_line_980, sizeof(__pyx_k_clifford_pow_line_980), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_pure_line_1050, __pyx_k_clifford_pure_line_1050, sizeof(__pyx_k_clifford_pure_line_1050), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_quad_line_1153, __pyx_k_clifford_quad_line_1153, sizeof(__pyx_k_clifford_quad_line_1153), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_reframe_line_649, __pyx_k_clifford_reframe_line_649, sizeof(__pyx_k_clifford_reframe_line_649), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_reverse_line_1123, __pyx_k_clifford_reverse_line_1123, sizeof(__pyx_k_clifford_reverse_line_1123), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_scalar_line_1039, __pyx_k_clifford_scalar_line_1039, sizeof(__pyx_k_clifford_scalar_line_1039), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_truncated_line_1195, __pyx_k_clifford_truncated_line_1195, sizeof(__pyx_k_clifford_truncated_line_1195), 0, 1, 0, 0},
  {&__pyx_kp_u_clifford_vector_part_line_1079, __pyx_k_clifford_vector_part_line_1079, sizeof(__pyx_k_clifford_vector_part_line_1079), 0, 1, 0, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_kp_u_compare_line_492, __pyx_k_compare_line_492, sizeof(__pyx_k_compare_line_492), 0, 1, 0, 0},
  {&__pyx_kp_u_complexifier_line_1576, __pyx_k_complexifier_line_1576, sizeof(__pyx_k_complexifier_line_1576), 0, 1, 0, 0},
  {&__pyx_n_s_conj, __pyx_k_conj, sizeof(__pyx_k_conj), 0, 0, 1, 1},
  {&__pyx_kp_u_conj_line_1485, __pyx_k_conj_line_1485, sizeof(__pyx_k_conj_line_1485), 0, 1, 0, 0},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cos, __pyx_k_cos, sizeof(__pyx_k_cos), 0, 0, 1, 1},
  {&__pyx_kp_u_cos_line_1651, __pyx_k_cos_line_1651, sizeof(__pyx_k_cos_line_1651), 0, 1, 0, 0},
  {&__pyx_n_s_cosh, __pyx_k_cosh, sizeof(__pyx_k_cosh), 0, 0, 1, 1},
  {&__pyx_kp_u_cosh_line_1689, __pyx_k_cosh_line_1689, sizeof(__pyx_k_cosh_line_1689), 0, 1, 0, 0},
  {&__pyx_n_s_doctest, __pyx_k_doctest, sizeof(__pyx_k_doctest), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_kp_u_e_line_1936, __pyx_k_e_line_1936, sizeof(__pyx_k_e_line_1936), 0, 1, 0, 0},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_kp_u_error_squared_line_1346, __pyx_k_error_squared_line_1346, sizeof(__pyx_k_error_squared_line_1346), 0, 1, 0, 0},
  {&__pyx_kp_u_error_squared_tol_line_1337, __pyx_k_error_squared_tol_line_1337, sizeof(__pyx_k_error_squared_tol_line_1337), 0, 1, 0, 0},
  {&__pyx_n_s_even, __pyx_k_even, sizeof(__pyx_k_even), 0, 0, 1, 1},
  {&__pyx_kp_u_even_line_1437, __pyx_k_even_line_1437, sizeof(__pyx_k_even_line_1437), 0, 1, 0, 0},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_kp_u_exp_line_1614, __pyx_k_exp_line_1614, sizeof(__pyx_k_exp_line_1614), 0, 1, 0, 0},
  {&__pyx_n_s_fill, __pyx_k_fill, sizeof(__pyx_k_fill), 0, 0, 1, 1},
  {&__pyx_n_s_frm, __pyx_k_frm, sizeof(__pyx_k_frm), 0, 0, 1, 1},
  {&__pyx_kp_u_from, __pyx_k_from, sizeof(__pyx_k_from), 0, 1, 0, 0},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_grade, __pyx_k_grade, sizeof(__pyx_k_grade), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_kp_u_imag_line_1415, __pyx_k_imag_line_1415, sizeof(__pyx_k_imag_line_1415), 0, 1, 0, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index_set, __pyx_k_index_set, sizeof(__pyx_k_index_set), 0, 0, 1, 1},
  {&__pyx_kp_u_index_set___and___line_271, __pyx_k_index_set___and___line_271, sizeof(__pyx_k_index_set___and___line_271), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___getitem___line_191, __pyx_k_index_set___getitem___line_191, sizeof(__pyx_k_index_set___getitem___line_191), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___iand___line_282, __pyx_k_index_set___iand___line_282, sizeof(__pyx_k_index_set___iand___line_282), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___invert___line_240, __pyx_k_index_set___invert___line_240, sizeof(__pyx_k_index_set___invert___line_240), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___ior___line_304, __pyx_k_index_set___ior___line_304, sizeof(__pyx_k_index_set___ior___line_304), 0, 1, 0, 0},
  {&__pyx_n_s_index_set___iter, __pyx_k_index_set___iter, sizeof(__pyx_k_index_set___iter), 0, 0, 1, 1},
  {&__pyx_kp_u_index_set___iter___line_229, __pyx_k_index_set___iter___line_229, sizeof(__pyx_k_index_set___iter___line_229), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___ixor___line_260, __pyx_k_index_set___ixor___line_260, sizeof(__pyx_k_index_set___ixor___line_260), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___or___line_293, __pyx_k_index_set___or___line_293, sizeof(__pyx_k_index_set___or___line_293), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___repr___line_384, __pyx_k_index_set___repr___line_384, sizeof(__pyx_k_index_set___repr___line_384), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___setitem___line_179, __pyx_k_index_set___setitem___line_179, sizeof(__pyx_k_index_set___setitem___line_179), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___str___line_395, __pyx_k_index_set___str___line_395, sizeof(__pyx_k_index_set___str___line_395), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set___xor___line_249, __pyx_k_index_set___xor___line_249, sizeof(__pyx_k_index_set___xor___line_249), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_copy_line_65, __pyx_k_index_set_copy_line_65, sizeof(__pyx_k_index_set_copy_line_65), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_count_line_315, __pyx_k_index_set_count_line_315, sizeof(__pyx_k_index_set_count_line_315), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_count_neg_line_324, __pyx_k_index_set_count_neg_line_324, sizeof(__pyx_k_index_set_count_neg_line_324), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_count_pos_line_333, __pyx_k_index_set_count_pos_line_333, sizeof(__pyx_k_index_set_count_pos_line_333), 0, 1, 0, 0},
  {&__pyx_n_s_index_set_hidden_doctests, __pyx_k_index_set_hidden_doctests, sizeof(__pyx_k_index_set_hidden_doctests), 0, 0, 1, 1},
  {&__pyx_kp_u_index_set_hidden_doctests_line_4, __pyx_k_index_set_hidden_doctests_line_4, sizeof(__pyx_k_index_set_hidden_doctests_line_4), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_max_line_351, __pyx_k_index_set_max_line_351, sizeof(__pyx_k_index_set_max_line_351), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_min_line_342, __pyx_k_index_set_min_line_342, sizeof(__pyx_k_index_set_min_line_342), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_sign_of_mult_line_366, __pyx_k_index_set_sign_of_mult_line_366, sizeof(__pyx_k_index_set_sign_of_mult_line_366), 0, 1, 0, 0},
  {&__pyx_kp_u_index_set_sign_of_square_line_37, __pyx_k_index_set_sign_of_square_line_37, sizeof(__pyx_k_index_set_sign_of_square_line_37), 0, 1, 0, 0},
  {&__pyx_n_s_inv, __pyx_k_inv, sizeof(__pyx_k_inv), 0, 0, 1, 1},
  {&__pyx_kp_u_inv_line_1378, __pyx_k_inv_line_1378, sizeof(__pyx_k_inv_line_1378), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid, __pyx_k_invalid, sizeof(__pyx_k_invalid), 0, 1, 0, 0},
  {&__pyx_kp_u_invalid_string, __pyx_k_invalid_string, sizeof(__pyx_k_invalid_string), 0, 1, 0, 0},
  {&__pyx_n_s_involute, __pyx_k_involute, sizeof(__pyx_k_involute), 0, 0, 1, 1},
  {&__pyx_kp_u_involute_line_1455, __pyx_k_involute_line_1455, sizeof(__pyx_k_involute_line_1455), 0, 1, 0, 0},
  {&__pyx_n_s_ist, __pyx_k_ist, sizeof(__pyx_k_ist), 0, 0, 1, 1},
  {&__pyx_n_s_istpq, __pyx_k_istpq, sizeof(__pyx_k_istpq), 0, 0, 1, 1},
  {&__pyx_kp_u_istpq_line_1949, __pyx_k_istpq_line_1949, sizeof(__pyx_k_istpq_line_1949), 0, 1, 0, 0},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_ixt, __pyx_k_ixt, sizeof(__pyx_k_ixt), 0, 0, 1, 1},
  {&__pyx_kp_u_lexicographic_compare_eg_3_4_5, __pyx_k_lexicographic_compare_eg_3_4_5, sizeof(__pyx_k_lexicographic_compare_eg_3_4_5), 0, 1, 0, 0},
  {&__pyx_n_s_lhs, __pyx_k_lhs, sizeof(__pyx_k_lhs), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_kp_u_log_line_1628, __pyx_k_log_line_1628, sizeof(__pyx_k_log_line_1628), 0, 1, 0, 0},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_u_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 1, 0, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_kp_u_max_abs_line_1531, __pyx_k_max_abs_line_1531, sizeof(__pyx_k_max_abs_line_1531), 0, 1, 0, 0},
  {&__pyx_kp_u_max_pos_line_513, __pyx_k_max_pos_line_513, sizeof(__pyx_k_max_pos_line_513), 0, 1, 0, 0},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_kp_u_min_neg_line_504, __pyx_k_min_neg_line_504, sizeof(__pyx_k_min_neg_line_504), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nbar3, __pyx_k_nbar3, sizeof(__pyx_k_nbar3), 0, 0, 1, 1},
  {&__pyx_n_s_ninf3, __pyx_k_ninf3, sizeof(__pyx_k_ninf3), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_kp_u_norm_line_1511, __pyx_k_norm_line_1511, sizeof(__pyx_k_norm_line_1511), 0, 1, 0, 0},
  {&__pyx_kp_u_norm_sum_of_squares_of_coordina, __pyx_k_norm_sum_of_squares_of_coordina, sizeof(__pyx_k_norm_sum_of_squares_of_coordina), 0, 1, 0, 0},
  {&__pyx_n_s_numbers, __pyx_k_numbers, sizeof(__pyx_k_numbers), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_odd, __pyx_k_odd, sizeof(__pyx_k_odd), 0, 0, 1, 1},
  {&__pyx_kp_u_odd_line_1446, __pyx_k_odd_line_1446, sizeof(__pyx_k_odd_line_1446), 0, 1, 0, 0},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_outer_pow, __pyx_k_outer_pow, sizeof(__pyx_k_outer_pow), 0, 0, 1, 1},
  {&__pyx_kp_u_outer_pow_line_1567, __pyx_k_outer_pow_line_1567, sizeof(__pyx_k_outer_pow_line_1567), 0, 1, 0, 0},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_pow, __pyx_k_pow, sizeof(__pyx_k_pow), 0, 0, 1, 1},
  {&__pyx_kp_u_pow_line_1543, __pyx_k_pow_line_1543, sizeof(__pyx_k_pow_line_1543), 0, 1, 0, 0},
  {&__pyx_n_s_pure, __pyx_k_pure, sizeof(__pyx_k_pure), 0, 0, 1, 1},
  {&__pyx_kp_u_pure_line_1426, __pyx_k_pure_line_1426, sizeof(__pyx_k_pure_line_1426), 0, 1, 0, 0},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_quad, __pyx_k_quad, sizeof(__pyx_k_quad), 0, 0, 1, 1},
  {&__pyx_kp_u_quad_line_1500, __pyx_k_quad_line_1500, sizeof(__pyx_k_quad_line_1500), 0, 1, 0, 0},
  {&__pyx_kp_u_random_clifford_line_1864, __pyx_k_random_clifford_line_1864, sizeof(__pyx_k_random_clifford_line_1864), 0, 1, 0, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_u_real_line_1404, __pyx_k_real_line_1404, sizeof(__pyx_k_real_line_1404), 0, 1, 0, 0},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_kp_u_reverse_line_1470, __pyx_k_reverse_line_1470, sizeof(__pyx_k_reverse_line_1470), 0, 1, 0, 0},
  {&__pyx_n_s_rhs, __pyx_k_rhs, sizeof(__pyx_k_rhs), 0, 0, 1, 1},
  {&__pyx_n_s_scalar, __pyx_k_scalar, sizeof(__pyx_k_scalar), 0, 0, 1, 1},
  {&__pyx_n_s_scalar_epsilon, __pyx_k_scalar_epsilon, sizeof(__pyx_k_scalar_epsilon), 0, 0, 1, 1},
  {&__pyx_kp_u_scalar_line_1393, __pyx_k_scalar_line_1393, sizeof(__pyx_k_scalar_line_1393), 0, 1, 0, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sin, __pyx_k_sin, sizeof(__pyx_k_sin), 0, 0, 1, 1},
  {&__pyx_kp_u_sin_line_1728, __pyx_k_sin_line_1728, sizeof(__pyx_k_sin_line_1728), 0, 1, 0, 0},
  {&__pyx_n_s_sinh, __pyx_k_sinh, sizeof(__pyx_k_sinh), 0, 0, 1, 1},
  {&__pyx_kp_u_sinh_line_1768, __pyx_k_sinh_line_1768, sizeof(__pyx_k_sinh_line_1768), 0, 1, 0, 0},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_kp_u_sqrt_line_1591, __pyx_k_sqrt_line_1591, sizeof(__pyx_k_sqrt_line_1591), 0, 1, 0, 0},
  {&__pyx_n_s_tan, __pyx_k_tan, sizeof(__pyx_k_tan), 0, 0, 1, 1},
  {&__pyx_kp_u_tan_line_1801, __pyx_k_tan_line_1801, sizeof(__pyx_k_tan_line_1801), 0, 1, 0, 0},
  {&__pyx_n_s_tanh, __pyx_k_tanh, sizeof(__pyx_k_tanh), 0, 0, 1, 1},
  {&__pyx_kp_u_tanh_line_1835, __pyx_k_tanh_line_1835, sizeof(__pyx_k_tanh_line_1835), 0, 1, 0, 0},
  {&__pyx_n_s_tau, __pyx_k_tau, sizeof(__pyx_k_tau), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_2, __pyx_k_test_2, sizeof(__pyx_k_test_2), 0, 0, 1, 1},
  {&__pyx_n_s_testmod, __pyx_k_testmod, sizeof(__pyx_k_testmod), 0, 0, 1, 1},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_kp_u_to_frame, __pyx_k_to_frame, sizeof(__pyx_k_to_frame), 0, 1, 0, 0},
  {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
  {&__pyx_kp_u_using, __pyx_k_using, sizeof(__pyx_k_using), 0, 1, 0, 0},
  {&__pyx_kp_u_using_invalid, __pyx_k_using_invalid, sizeof(__pyx_k_using_invalid), 0, 1, 0, 0},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_kp_u_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 1, 0, 0},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 103, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) __PYX_ERR(0, 159, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 236, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 1099, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 1099, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "PyClical.pyx":636
 *         TypeError: Not applicable.
 *         """
 *         raise TypeError("Not applicable.")             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Not_applicable); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "PyClical.pyx":406
 *         return index_set_to_str( self.unwrap() ).decode()
 * 
 * def index_set_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyClical_pyx, __pyx_n_s_index_set_hidden_doctests, 406, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 406, __pyx_L1_error)

  /* "PyClical.pyx":1253
 *         return clifford_to_str( self.unwrap() ).decode()
 * 
 * def clifford_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyClical_pyx, __pyx_n_s_clifford_hidden_doctests, 1253, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 1253, __pyx_L1_error)

  /* "PyClical.pyx":1907
 * scalar_epsilon = epsilon
 * 
 * pi = atan(clifford(1.0)) * 4.0             # <<<<<<<<<<<<<<
 * tau = atan(clifford(1.0)) * 8.0
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_float_1_0); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "PyClical.pyx":1936
 * """
 * 
 * def e(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for clifford(index_set(obj)).
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyClical_pyx, __pyx_n_s_e, 1936, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 1936, __pyx_L1_error)

  /* "PyClical.pyx":1949
 *     return clifford(index_set(obj))
 * 
 * def istpq(p, q):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for index_set({-q,...p}).
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_p, __pyx_n_s_q); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyClical_pyx, __pyx_n_s_istpq, 1949, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 1949, __pyx_L1_error)

  /* "PyClical.pyx":1958
 *     return index_set(set(range(-q,p+1)))
 * 
 * ninf3 = e(4) + e(-1) # Null infinity point in 3D Conformal Geometric Algebra [DL].             # <<<<<<<<<<<<<<
 * nbar3 = e(4) - e(-1) # Null bar point in 3D Conformal Geometric Algebra [DL].
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_int_4); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "PyClical.pyx":1962
 * 
 * # Doctest interface.
 * def _test():             # <<<<<<<<<<<<<<
 *     import PyClical, doctest
 *     return doctest.testmod(PyClical)
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_s_PyClical, __pyx_n_s_doctest); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyClical_pyx, __pyx_n_s_test, 1962, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_4_0 = PyFloat_FromDouble(4.0); if (unlikely(!__pyx_float_4_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_8_0 = PyFloat_FromDouble(8.0); if (unlikely(!__pyx_float_8_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_8PyClical_index_set = &__pyx_vtable_8PyClical_index_set;
  __pyx_vtable_8PyClical_index_set.wrap = (PyObject *(*)(struct __pyx_obj_8PyClical_index_set *, IndexSet))__pyx_f_8PyClical_9index_set_wrap;
  __pyx_vtable_8PyClical_index_set.unwrap = (IndexSet (*)(struct __pyx_obj_8PyClical_index_set *))__pyx_f_8PyClical_9index_set_unwrap;
  __pyx_vtable_8PyClical_index_set.copy = (PyObject *(*)(struct __pyx_obj_8PyClical_index_set *, int __pyx_skip_dispatch))__pyx_f_8PyClical_9index_set_copy;
  if (PyType_Ready(&__pyx_type_8PyClical_index_set) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8PyClical_index_set.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8PyClical_index_set.tp_dictoffset && __pyx_type_8PyClical_index_set.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8PyClical_index_set.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__setitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_8__setitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_8__setitem__.doc = __pyx_doc_8PyClical_9index_set_8__setitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_8__setitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_10__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_10__getitem__.doc = __pyx_doc_8PyClical_9index_set_10__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_10__getitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__contains__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_12__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_12__contains__.doc = __pyx_doc_8PyClical_9index_set_12__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_12__contains__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_14__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_14__iter__.doc = __pyx_doc_8PyClical_9index_set_14__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_14__iter__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__invert__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_17__invert__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_17__invert__.doc = __pyx_doc_8PyClical_9index_set_17__invert__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_17__invert__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__xor__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_19__xor__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_19__xor__.doc = __pyx_doc_8PyClical_9index_set_19__xor__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_19__xor__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__ixor__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_21__ixor__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_21__ixor__.doc = __pyx_doc_8PyClical_9index_set_21__ixor__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_21__ixor__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__and__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_23__and__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_23__and__.doc = __pyx_doc_8PyClical_9index_set_23__and__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_23__and__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__iand__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_25__iand__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_25__iand__.doc = __pyx_doc_8PyClical_9index_set_25__iand__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_25__iand__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__or__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_27__or__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_27__or__.doc = __pyx_doc_8PyClical_9index_set_27__or__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_27__or__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__ior__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_29__ior__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_29__ior__.doc = __pyx_doc_8PyClical_9index_set_29__ior__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_29__ior__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_47__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_47__repr__.doc = __pyx_doc_8PyClical_9index_set_47__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_47__repr__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_index_set, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 46, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_9index_set_49__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_9index_set_49__str__.doc = __pyx_doc_8PyClical_9index_set_49__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_9index_set_49__str__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_8PyClical_index_set.tp_dict, __pyx_vtabptr_8PyClical_index_set) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_index_set, (PyObject *)&__pyx_type_8PyClical_index_set) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8PyClical_index_set) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_ptype_8PyClical_index_set = &__pyx_type_8PyClical_index_set;
  __pyx_vtabptr_8PyClical_clifford = &__pyx_vtable_8PyClical_clifford;
  __pyx_vtable_8PyClical_clifford.wrap = (PyObject *(*)(struct __pyx_obj_8PyClical_clifford *, Clifford))__pyx_f_8PyClical_8clifford_wrap;
  __pyx_vtable_8PyClical_clifford.unwrap = (Clifford (*)(struct __pyx_obj_8PyClical_clifford *))__pyx_f_8PyClical_8clifford_unwrap;
  __pyx_vtable_8PyClical_clifford.copy = (PyObject *(*)(struct __pyx_obj_8PyClical_clifford *, int __pyx_skip_dispatch))__pyx_f_8PyClical_8clifford_copy;
  if (PyType_Ready(&__pyx_type_8PyClical_clifford) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8PyClical_clifford.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8PyClical_clifford.tp_dictoffset && __pyx_type_8PyClical_clifford.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8PyClical_clifford.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__contains__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_6__contains__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_6__contains__.doc = __pyx_doc_8PyClical_8clifford_6__contains__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_6__contains__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_8__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_8__iter__.doc = __pyx_doc_8PyClical_8clifford_8__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_8__iter__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__getitem__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_14__getitem__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_14__getitem__.doc = __pyx_doc_8PyClical_8clifford_14__getitem__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_14__getitem__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__neg__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_16__neg__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_16__neg__.doc = __pyx_doc_8PyClical_8clifford_16__neg__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_16__neg__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__pos__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_18__pos__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_18__pos__.doc = __pyx_doc_8PyClical_8clifford_18__pos__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_18__pos__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__add__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_20__add__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_20__add__.doc = __pyx_doc_8PyClical_8clifford_20__add__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_20__add__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__iadd__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_22__iadd__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_22__iadd__.doc = __pyx_doc_8PyClical_8clifford_22__iadd__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_22__iadd__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__sub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_24__sub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_24__sub__.doc = __pyx_doc_8PyClical_8clifford_24__sub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_24__sub__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__isub__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_26__isub__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_26__isub__.doc = __pyx_doc_8PyClical_8clifford_26__isub__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_26__isub__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__mul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_28__mul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_28__mul__.doc = __pyx_doc_8PyClical_8clifford_28__mul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_28__mul__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__imul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_30__imul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_30__imul__.doc = __pyx_doc_8PyClical_8clifford_30__imul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_30__imul__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__mod__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_32__mod__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_32__mod__.doc = __pyx_doc_8PyClical_8clifford_32__mod__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_32__mod__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__imod__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_34__imod__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_34__imod__.doc = __pyx_doc_8PyClical_8clifford_34__imod__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_34__imod__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__and__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_36__and__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_36__and__.doc = __pyx_doc_8PyClical_8clifford_36__and__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_36__and__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__iand__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_38__iand__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_38__iand__.doc = __pyx_doc_8PyClical_8clifford_38__iand__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_38__iand__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__xor__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_40__xor__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_40__xor__.doc = __pyx_doc_8PyClical_8clifford_40__xor__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_40__xor__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__ixor__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_42__ixor__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_42__ixor__.doc = __pyx_doc_8PyClical_8clifford_42__ixor__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_42__ixor__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__truediv__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_44__truediv__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_44__truediv__.doc = __pyx_doc_8PyClical_8clifford_44__truediv__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_44__truediv__;
    }
  }
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__idiv__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_46__idiv__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_46__idiv__.doc = __pyx_doc_8PyClical_8clifford_46__idiv__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_46__idiv__;
    }
  }
  #endif
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__or__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_50__or__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_50__or__.doc = __pyx_doc_8PyClical_8clifford_50__or__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_50__or__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__ior__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_52__ior__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_52__ior__.doc = __pyx_doc_8PyClical_8clifford_52__ior__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_52__ior__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__pow__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_54__pow__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_54__pow__.doc = __pyx_doc_8PyClical_8clifford_54__pow__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_54__pow__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__call__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_60__call__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_60__call__.doc = __pyx_doc_8PyClical_8clifford_60__call__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_60__call__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__repr__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_94__repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_94__repr__.doc = __pyx_doc_8PyClical_8clifford_94__repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_94__repr__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_8PyClical_clifford, "__str__"); if (unlikely(!wrapper)) __PYX_ERR(0, 537, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_8PyClical_8clifford_96__str__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_8PyClical_8clifford_96__str__.doc = __pyx_doc_8PyClical_8clifford_96__str__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_8PyClical_8clifford_96__str__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_8PyClical_clifford.tp_dict, __pyx_vtabptr_8PyClical_clifford) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_clifford, (PyObject *)&__pyx_type_8PyClical_clifford) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8PyClical_clifford) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  __pyx_ptype_8PyClical_clifford = &__pyx_type_8PyClical_clifford;
  if (PyType_Ready(&__pyx_type_8PyClical___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 229, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8PyClical___pyx_scope_struct____iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8PyClical___pyx_scope_struct____iter__.tp_dictoffset && __pyx_type_8PyClical___pyx_scope_struct____iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8PyClical___pyx_scope_struct____iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_8PyClical___pyx_scope_struct____iter__ = &__pyx_type_8PyClical___pyx_scope_struct____iter__;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initPyClical(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initPyClical(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_PyClical(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_PyClical(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_PyClical(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'PyClical' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_PyClical(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("PyClical", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_PyClical) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "PyClical")) {
      if (unlikely(PyDict_SetItemString(modules, "PyClical", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "PyClical.pyx":29
 * # C. Doran and A. Lasenby, "Geometric algebra for physicists", Cambridge, 2003.
 * 
 * import math             # <<<<<<<<<<<<<<
 * import numbers
 * import collections
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":30
 * 
 * import math
 * import numbers             # <<<<<<<<<<<<<<
 * import collections
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numbers, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numbers, __pyx_t_1) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":31
 * import math
 * import numbers
 * import collections             # <<<<<<<<<<<<<<
 * 
 * from PyClical cimport *
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_collections, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":35
 * from PyClical cimport *
 * 
 * __version__ = str(glucat_package_version,'utf-8')             # <<<<<<<<<<<<<<
 * 
 * # Forward reference
 */
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(glucat_package_version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_kp_u_utf_8);
  __Pyx_GIVEREF(__pyx_kp_u_utf_8);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_utf_8);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyUnicode_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":406
 *         return index_set_to_str( self.unwrap() ).decode()
 * 
 * def index_set_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8PyClical_1index_set_hidden_doctests, NULL, __pyx_n_s_PyClical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_index_set_hidden_doctests, __pyx_t_1) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1253
 *         return clifford_to_str( self.unwrap() ).decode()
 * 
 * def clifford_hidden_doctests():             # <<<<<<<<<<<<<<
 *     """
 *     Tests for functions that Doctest cannot see.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8PyClical_9clifford_hidden_doctests, NULL, __pyx_n_s_PyClical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_clifford_hidden_doctests, __pyx_t_1) < 0) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1905
 * 
 * # Some abbreviations.
 * scalar_epsilon = epsilon             # <<<<<<<<<<<<<<
 * 
 * pi = atan(clifford(1.0)) * 4.0
 */
  __pyx_t_1 = PyFloat_FromDouble(epsilon); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scalar_epsilon, __pyx_t_1) < 0) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1907
 * scalar_epsilon = epsilon
 * 
 * pi = atan(clifford(1.0)) * 4.0             # <<<<<<<<<<<<<<
 * tau = atan(clifford(1.0)) * 8.0
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8PyClical_atan(__pyx_t_1, 0, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_4_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pi, __pyx_t_1) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1908
 * 
 * pi = atan(clifford(1.0)) * 4.0
 * tau = atan(clifford(1.0)) * 8.0             # <<<<<<<<<<<<<<
 * 
 * cl = clifford
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_8PyClical_clifford), __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_8PyClical_atan(__pyx_t_1, 0, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_8_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tau, __pyx_t_1) < 0) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1910
 * tau = atan(clifford(1.0)) * 8.0
 * 
 * cl = clifford             # <<<<<<<<<<<<<<
 * """
 * Abbreviation for clifford.
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cl, ((PyObject *)__pyx_ptype_8PyClical_clifford)) < 0) __PYX_ERR(0, 1910, __pyx_L1_error)

  /* "PyClical.pyx":1928
 * """
 * 
 * ist = index_set             # <<<<<<<<<<<<<<
 * """
 * Abbreviation for index_set.
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ist, ((PyObject *)__pyx_ptype_8PyClical_index_set)) < 0) __PYX_ERR(0, 1928, __pyx_L1_error)

  /* "PyClical.pyx":1936
 * """
 * 
 * def e(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for clifford(index_set(obj)).
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8PyClical_89e, NULL, __pyx_n_s_PyClical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_e, __pyx_t_1) < 0) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1949
 *     return clifford(index_set(obj))
 * 
 * def istpq(p, q):             # <<<<<<<<<<<<<<
 *     """
 *     Abbreviation for index_set({-q,...p}).
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8PyClical_91istpq, NULL, __pyx_n_s_PyClical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_istpq, __pyx_t_1) < 0) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1958
 *     return index_set(set(range(-q,p+1)))
 * 
 * ninf3 = e(4) + e(-1) # Null infinity point in 3D Conformal Geometric Algebra [DL].             # <<<<<<<<<<<<<<
 * nbar3 = e(4) - e(-1) # Null bar point in 3D Conformal Geometric Algebra [DL].
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_e); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_e); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ninf3, __pyx_t_1) < 0) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1959
 * 
 * ninf3 = e(4) + e(-1) # Null infinity point in 3D Conformal Geometric Algebra [DL].
 * nbar3 = e(4) - e(-1) # Null bar point in 3D Conformal Geometric Algebra [DL].             # <<<<<<<<<<<<<<
 * 
 * # Doctest interface.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_e); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_e); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nbar3, __pyx_t_1) < 0) __PYX_ERR(0, 1959, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1962
 * 
 * # Doctest interface.
 * def _test():             # <<<<<<<<<<<<<<
 *     import PyClical, doctest
 *     return doctest.testmod(PyClical)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8PyClical_93_test, NULL, __pyx_n_s_PyClical); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PyClical.pyx":1966
 *     return doctest.testmod(PyClical)
 * 
 * if __name__ == "__main__":             # <<<<<<<<<<<<<<
 *     _test()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_n_u_main, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "PyClical.pyx":1967
 * 
 * if __name__ == "__main__":
 *     _test()             # <<<<<<<<<<<<<<
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_test); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PyClical.pyx":1966
 *     return doctest.testmod(PyClical)
 * 
 * if __name__ == "__main__":             # <<<<<<<<<<<<<<
 *     _test()
 */
  }

  /* "PyClical.pyx":1
 * # -*- coding: utf-8 -*-             # <<<<<<<<<<<<<<
 * # cython: language_level=3
 * # distutils: language = c++
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(111); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_copy_line_65, __pyx_kp_u_Copy_this_index_set_object_s_in) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___setitem___line_179, __pyx_kp_u_Set_the_value_of_an_index_set_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___getitem___line_191, __pyx_kp_u_Get_the_value_of_an_index_set_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___iter___line_229, __pyx_kp_u_Iterate_over_the_indices_of_an) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___invert___line_240, __pyx_kp_u_Set_complement_not_print_index) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___xor___line_249, __pyx_kp_u_Symmetric_set_difference_exclus) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___ixor___line_260, __pyx_kp_u_Symmetric_set_difference_exclus_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___and___line_271, __pyx_kp_u_Set_intersection_and_print_inde) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___iand___line_282, __pyx_kp_u_Set_intersection_and_x_index_se) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___or___line_293, __pyx_kp_u_Set_union_or_print_index_set_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___ior___line_304, __pyx_kp_u_Set_union_or_x_index_set_1_x_in) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_count_line_315, __pyx_kp_u_Cardinality_Number_of_indices_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_count_neg_line_324, __pyx_kp_u_Number_of_negative_indices_incl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_count_pos_line_333, __pyx_kp_u_Number_of_positive_indices_incl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_min_line_342, __pyx_kp_u_Minimum_member_index_set_1_1_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_max_line_351, __pyx_kp_u_Maximum_member_index_set_1_1_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_sign_of_mult_line_366, __pyx_kp_u_Sign_of_geometric_product_of_tw) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_sign_of_square_line_37, __pyx_kp_u_Sign_of_geometric_square_of_a_C) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___repr___line_384, __pyx_kp_u_The_official_string_representat) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set___str___line_395, __pyx_kp_u_The_informal_string_representat) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_index_set_hidden_doctests_line_4, __pyx_kp_u_Tests_for_functions_that_Doctes) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_compare_line_492, __pyx_kp_u_lexicographic_compare_eg_3_4_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_min_neg_line_504, __pyx_kp_u_Minimum_negative_index_or_0_if) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_max_pos_line_513, __pyx_kp_u_Maximum_positive_index_or_0_if) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_copy_line_556, __pyx_kp_u_Copy_this_clifford_object_x_cli) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___iter___line_638, __pyx_kp_u_Not_applicable_for_a_in_cliffor) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_reframe_line_649, __pyx_kp_u_Put_self_into_a_larger_frame_co) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___getitem___line_707, __pyx_kp_u_Subscripting_map_from_index_set) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___neg___line_722, __pyx_kp_u_Unary_print_clifford_1_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___pos___line_731, __pyx_kp_u_Unary_print_clifford_1_1_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___add___line_740, __pyx_kp_u_Geometric_sum_print_clifford_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___iadd___line_751, __pyx_kp_u_Geometric_sum_x_clifford_1_x_cl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___sub___line_760, __pyx_kp_u_Geometric_difference_print_clif) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___isub___line_771, __pyx_kp_u_Geometric_difference_x_clifford) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___mul___line_780, __pyx_kp_u_Geometric_product_print_cliffor) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___imul___line_793, __pyx_kp_u_Geometric_product_x_clifford_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___mod___line_806, __pyx_kp_u_Contraction_print_clifford_1_cl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___imod___line_821, __pyx_kp_u_Contraction_x_clifford_1_x_clif) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___and___line_836, __pyx_kp_u_Inner_product_print_clifford_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___iand___line_851, __pyx_kp_u_Inner_product_x_clifford_1_x_cl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___xor___line_866, __pyx_kp_u_Outer_product_print_clifford_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___ixor___line_881, __pyx_kp_u_Outer_product_x_clifford_1_x_cl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___truediv___line_896, __pyx_kp_u_Geometric_quotient_print_cliffo) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___idiv___line_911, __pyx_kp_u_Geometric_quotient_x_clifford_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_inv_line_926, __pyx_kp_u_Geometric_multiplicative_invers) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___or___line_939, __pyx_kp_u_Transform_left_hand_side_using) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___ior___line_950, __pyx_kp_u_Transform_left_hand_side_using_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___pow___line_961, __pyx_kp_u_Power_self_to_the_m_x_clifford) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_pow_line_980, __pyx_kp_u_Power_self_to_the_m_x_clifford_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_outer_pow_line_1004, __pyx_kp_u_Outer_product_power_x_clifford) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___call___line_1020, __pyx_kp_u_Pure_grade_vector_part_print_cl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_scalar_line_1039, __pyx_kp_u_Scalar_part_clifford_1_1_1_2_sc) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_pure_line_1050, __pyx_kp_u_Pure_part_print_clifford_1_1_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_even_line_1061, __pyx_kp_u_Even_part_of_multivector_sum_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_odd_line_1070, __pyx_kp_u_Odd_part_of_multivector_sum_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_vector_part_line_1079, __pyx_kp_u_Vector_part_of_multivector_as_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_involute_line_1107, __pyx_kp_u_Main_involution_each_i_is_repla) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_reverse_line_1123, __pyx_kp_u_Reversion_eg_clifford_1_cliffor) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_conj_line_1138, __pyx_kp_u_Conjugation_reverse_o_involute) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_quad_line_1153, __pyx_kp_u_Quadratic_form_rev_x_x_0_print) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_norm_line_1164, __pyx_kp_u_Norm_sum_of_squares_of_coordina) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_abs_line_1175, __pyx_kp_u_Absolute_value_square_root_of_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_max_abs_line_1184, __pyx_kp_u_Maximum_of_absolute_values_of_c) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_truncated_line_1195, __pyx_kp_u_Remove_all_terms_of_self_with_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_isinf_line_1206, __pyx_kp_u_Check_if_a_multivector_contains) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_isnan_line_1215, __pyx_kp_u_Check_if_a_multivector_contains_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_frame_line_1224, __pyx_kp_u_Subalgebra_generated_by_all_gen) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___repr___line_1235, __pyx_kp_u_The_official_string_representat_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford___str___line_1244, __pyx_kp_u_The_informal_string_representat_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_clifford_hidden_doctests_line_12, __pyx_kp_u_Tests_for_functions_that_Doctes_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_error_squared_tol_line_1337, __pyx_kp_u_Quadratic_norm_error_tolerance) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_error_squared_line_1346, __pyx_kp_u_Relative_or_absolute_error_usin) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_approx_equal_line_1359, __pyx_kp_u_Test_for_approximate_equality_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_inv_line_1378, __pyx_kp_u_Geometric_multiplicative_invers_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_scalar_line_1393, __pyx_kp_u_Scalar_part_scalar_clifford_1_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_real_line_1404, __pyx_kp_u_Real_part_synonym_for_scalar_pa) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_imag_line_1415, __pyx_kp_u_Imaginary_part_deprecated_alway) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_pure_line_1426, __pyx_kp_u_Pure_part_print_pure_clifford_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_even_line_1437, __pyx_kp_u_Even_part_of_multivector_sum_of_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_odd_line_1446, __pyx_kp_u_Odd_part_of_multivector_sum_of_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_involute_line_1455, __pyx_kp_u_Main_involution_each_i_is_repla_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_reverse_line_1470, __pyx_kp_u_Reversion_eg_1_2_2_1_print_reve) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_conj_line_1485, __pyx_kp_u_Conjugation_reverse_o_involute_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_quad_line_1500, __pyx_kp_u_Quadratic_form_rev_x_x_0_print_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_norm_line_1511, __pyx_kp_u_norm_sum_of_squares_of_coordina) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_abs_line_1522, __pyx_kp_u_Absolute_value_of_multivector_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_max_abs_line_1531, __pyx_kp_u_Maximum_absolute_value_of_coord) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_pow_line_1543, __pyx_kp_u_Integer_power_of_multivector_ob) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_outer_pow_line_1567, __pyx_kp_u_Outer_product_power_of_multivec) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_complexifier_line_1576, __pyx_kp_u_Square_root_of_1_which_commutes) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_sqrt_line_1591, __pyx_kp_u_Square_root_of_multivector_with) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_exp_line_1614, __pyx_kp_u_Exponential_of_multivector_x_cl) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_log_line_1628, __pyx_kp_u_Natural_logarithm_of_multivecto) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_cos_line_1651, __pyx_kp_u_Cosine_of_multivector_with_opti) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_acos_line_1668, __pyx_kp_u_Inverse_cosine_of_multivector_w) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_cosh_line_1689, __pyx_kp_u_Hyperbolic_cosine_of_multivecto) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_acosh_line_1705, __pyx_kp_u_Inverse_hyperbolic_cosine_of_mu) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_sin_line_1728, __pyx_kp_u_Sine_of_multivector_with_option) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_asin_line_1747, __pyx_kp_u_Inverse_sine_of_multivector_wit) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_sinh_line_1768, __pyx_kp_u_Hyperbolic_sine_of_multivector) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_asinh_line_1782, __pyx_kp_u_Inverse_hyperbolic_sine_of_mult) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_tan_line_1801, __pyx_kp_u_Tangent_of_multivector_with_opt) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_atan_line_1818, __pyx_kp_u_Inverse_tangent_of_multivector) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_tanh_line_1835, __pyx_kp_u_Hyperbolic_tangent_of_multivect) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_atanh_line_1847, __pyx_kp_u_Inverse_hyperbolic_tangent_of_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_random_clifford_line_1864, __pyx_kp_u_Random_multivector_within_a_fra) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_cga3_line_1873, __pyx_kp_u_Convert_Euclidean_3D_multivecto) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_cga3std_line_1882, __pyx_kp_u_Convert_CGA3_null_vector_to_sta) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_agc3_line_1893, __pyx_kp_u_Convert_CGA3_null_vector_to_Euc) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_e_line_1936, __pyx_kp_u_Abbreviation_for_clifford_index) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_kp_u_istpq_line_1949, __pyx_kp_u_Abbreviation_for_index_set_q_p) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_2, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PyClical", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PyClical");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
